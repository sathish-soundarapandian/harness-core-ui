{
  "status": "SUCCESS",
  "data": "failureStrategies:\n  - onFailure:\n      errors:\n        - AllErrors\n      action:\n        type: StageRollback\nspec:\n  execution:\n    steps:\n      - step:\n          name: \"Deploy\"\n          identifier: Deploy\n          type: Command\n          timeout: 10m\n          strategy:\n            repeat:\n              items: <+stage.output.hosts>\n          spec:\n            onDelegate: false\n            environmentVariables: [ ]\n            outputVariables: [ ]\n            commandUnits:\n              - identifier: Setup_Runtime_Paths\n                name: \"Setup Runtime Paths\"\n                type: Script\n                spec:\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # Execute as root and pass environment variables\n                        # su -p -\n\n                        # Execute as root via user credentials (with root privileges)\n                        # sudo -E su -p -\n\n                        # Creating runtime, backup and staging folders:\n\n                        mkdir -p $HOME/<+service.name>/<+env.name>/runtime\n                        mkdir -p $HOME/<+service.name>/<+env.name>/backup\n                        mkdir -p $HOME/<+service.name>/<+env.name>/staging\n                        mkdir -p $HOME/<+service.name>/<+env.name>/tomcat/bin\n              - identifier: Stop_Service\n                name: \"Stop Service\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: \"# [ -f ./shutdown.sh ] && ./shutdown.sh  || true\"\n              - identifier: Process_Stopped\n                name: \"Process Stopped\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # i=0\n                        # while [ \"$i\" -lt 30 ]\n                        # do\n                        #   pgrep -f \"\\-Dcatalina.home=$HOME/<+service.name>/<+env.name>/tomcat\"\n                        #   rc=$?\n                        #   if [ \"$rc\" -eq 0 ]\n                        #   then\n                        #     sleep 1\n                        #     i=$((i+1))\n                        #   else\n                        #     exit 0\n                        #   fi\n                        # done\n                        # exit 1\n              - identifier: Port_Cleared\n                name: \"Port Cleared\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # server_xml=\"$HARNESS_RUNTIME_PATH/tomcat/conf/server.xml\"\n                        # if [ -f \"$server_xml\" ]\n                        # then\n                        #   port=$(grep \"<Connector[ ]*port=\\\"[0-9]*\\\"[ ]*protocol=\\\"HTTP/1.1\\\"\" \"$server_xml\" |cut -d '\"' -f2)\n                        # nc -v -z -w 5 localhost $port\n                        # else\n                        #   echo \"Tomcat config file(\"$server_xml\") does not exist.. port check failed.\"\n                        # exit 1\n                        # fi\n              - identifier: Copy_Artifact\n                name: \"Copy Artifact\"\n                type: Copy\n                spec:\n                  sourceType: Artifact\n                  destinationPath: $HOME/<+service.name>/<+env.name>\n              - identifier: Copy_Config\n                name: \"Copy Config\"\n                type: Copy\n                spec:\n                  sourceType: Config\n                  destinationPath: $HOME/<+service.name>/<+env.name>\n              - identifier: Start_Service\n                name: \"Start Service\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: \"# ./startup.sh\"\n              - identifier: Process_Running\n                name: \"Process Running\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # i=0\n                        # while [ \"$i\" -lt 30 ]\n                        # do\n                        #     pgrep -f \"\\-Dcatalina.home=$HOME/<+service.name>/<+env.name>/tomcat\"\n                        #     rc=$?\n                        #     if [ \"$rc\" -eq 0 ]\n                        #     then\n                        #         exit 0\n                        #         sleep 1\n                        #         i=$((i+1))\n                        #     else\n                        #         sleep 1\n                        #         i=$((i+1))\n                        #     fi\n                        # done\n                        # exit 1\n              - identifier: Port_Listening\n                name: \"Port Listening\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # if [ -f \"$server_xml\" ]\n                        # then\n                        #   port=$(grep \"<Connector[ ]*port=\\\"[0-9]*\\\"[ ]*protocol=\\\"HTTP/1.1\\\"\" \"$server_xml\" |cut -d '\"' -f2)\n                        #   nc -v -z -w 5 localhost $port\n                        #   rc=$?\n                        #   if [ \"$rc\" -eq 0 ]\n                        #   then\n                        #     exit 1\n                        #   fi\n                        # else\n                        #   echo \"Tomcat config file(\"$server_xml\") does not exist.. skipping port check.\"\n                        # fi\n    rollbackSteps:\n      - step:\n          name: \"Rollback\"\n          identifier: Rollback\n          type: Command\n          timeout: 10m\n          strategy:\n            repeat:\n              items: <+stage.output.hosts>\n          spec:\n            onDelegate: false\n            environmentVariables: [ ]\n            outputVariables: [ ]\n            commandUnits:\n              - identifier: Stop_Service_Rollback\n                name: \"Stop Service Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: \"# [ -f ./shutdown.sh ] && ./shutdown.sh  || true\"\n              - identifier: Process_Stopped_Rollback\n                name: \"Process Stopped Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # i=0\n                        # while [ \"$i\" -lt 30 ]\n                        # do\n                        #   pgrep -f \"\\-Dcatalina.home=$HOME/<+service.name>/<+env.name>/tomcat\"\n                        #   rc=$?\n                        #   if [ \"$rc\" -eq 0 ]\n                        #   then\n                        #     sleep 1\n                        #     i=$((i+1))\n                        #   else\n                        #     exit 0\n                        #   fi\n                        # done\n                        # exit 1\n              - identifier: Port_Cleared_Rollback\n                name: \"Port Cleared Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # server_xml=\"$HARNESS_RUNTIME_PATH/tomcat/conf/server.xml\"\n                        # if [ -f \"$server_xml\" ]\n                        # then\n                        #   port=$(grep \"<Connector[ ]*port=\\\"[0-9]*\\\"[ ]*protocol=\\\"HTTP/1.1\\\"\" \"$server_xml\" |cut -d '\"' -f2)\n                        # nc -v -z -w 5 localhost $port\n                        # else\n                        #   echo \"Tomcat config file(\"$server_xml\") does not exist.. port check failed.\"\n                        # exit 1\n                        # fi\n              - identifier: Setup_Runtime_Paths_Rollback\n                name: \"Setup Runtime Paths Rollback\"\n                type: Script\n                spec:\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # Execute as root and pass environment variables\n                        # su -p -\n\n                        # Execute as root via user credentials (with root privileges)\n                        # sudo -E su -p -\n\n                        # Creating runtime, backup and staging folders:\n\n                        mkdir -p $HOME/<+service.name>/<+env.name>/runtime\n                        mkdir -p $HOME/<+service.name>/<+env.name>/backup\n                        mkdir -p $HOME/<+service.name>/<+env.name>/staging\n                        mkdir -p $HOME/<+service.name>/<+env.name>/tomcat/bin\n              - identifier: Copy_Artifact_Rollback\n                name: \"Copy Artifact Rollback\"\n                type: Copy\n                spec:\n                  sourceType: Artifact\n                  destinationPath: $HOME/<+service.name>/<+env.name>\n              - identifier: Copy_Config_Rollback\n                name: \"Copy Config Rollback\"\n                type: Copy\n                spec:\n                  sourceType: Config\n                  destinationPath: $HOME/<+service.name>/<+env.name>\n              - identifier: Start_Service_Rollback\n                name: \"Start Service Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: \"# ./startup.sh\"\n              - identifier: Process_Running_Rollback\n                name: \"Process Running Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # i=0\n                        # while [ \"$i\" -lt 30 ]\n                        # do\n                        #     pgrep -f \"\\-Dcatalina.home=$HOME/<+service.name>/<+env.name>/tomcat\"\n                        #     rc=$?\n                        #     if [ \"$rc\" -eq 0 ]\n                        #     then\n                        #         exit 0\n                        #         sleep 1\n                        #         i=$((i+1))\n                        #     else\n                        #         sleep 1\n                        #         i=$((i+1))\n                        #     fi\n                        # done\n                        # exit 1\n              - identifier: Port_Listening_Rollback\n                name: \"Port Listening Rollback\"\n                type: Script\n                spec:\n                  workingDirectory: $HOME/<+service.name>/<+env.name>/tomcat/bin\n                  shell: Bash\n                  source:\n                    type: Inline\n                    spec:\n                      script: |-\n                        # if [ -f \"$server_xml\" ]\n                        # then\n                        #   port=$(grep \"<Connector[ ]*port=\\\"[0-9]*\\\"[ ]*protocol=\\\"HTTP/1.1\\\"\" \"$server_xml\" |cut -d '\"' -f2)\n                        #   nc -v -z -w 5 localhost $port\n                        #   rc=$?\n                        #   if [ \"$rc\" -eq 0 ]\n                        #   then\n                        #     exit 1\n                        #   fi\n                        # else\n                        #   echo \"Tomcat config file(\"$server_xml\") does not exist.. skipping port check.\"\n                        # fi",
  "metaData": null,
  "correlationId": "50ced341-c35f-42a3-8043-edfed8917801"
}
