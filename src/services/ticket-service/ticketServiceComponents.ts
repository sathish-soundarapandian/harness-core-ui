/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0-beta
 */
import * as reactQuery from '@tanstack/react-query'
import { useTicketServiceContext, TicketServiceContext } from './ticketServiceContext'
import type * as Fetcher from './ticketServiceFetcher'
import { ticketServiceFetch } from './ticketServiceFetcher'
import type * as Schemas from './ticketServiceSchemas'

export type MetadataListPrioritiesQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type MetadataListPrioritiesError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type MetadataListPrioritiesVariables = {
  queryParams: MetadataListPrioritiesQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * List all Ticket priorities accessible on the Ticket Provider
 */
export const fetchMetadataListPriorities = (variables: MetadataListPrioritiesVariables) =>
  ticketServiceFetch<
    Schemas.MetadataListPrioritiesResponseBody,
    MetadataListPrioritiesError,
    undefined,
    {},
    MetadataListPrioritiesQueryParams,
    {}
  >({ url: '/api/metadata/priorities', method: 'get', ...variables })

/**
 * List all Ticket priorities accessible on the Ticket Provider
 */
export const useMetadataListPriorities = <TData>(
  variables: MetadataListPrioritiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MetadataListPrioritiesResponseBody, MetadataListPrioritiesError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.MetadataListPrioritiesResponseBody, MetadataListPrioritiesError, TData>(
    queryKeyFn({ path: '/api/metadata/priorities', operationId: 'metadataListPriorities', variables }),
    () => fetchMetadataListPriorities({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type MetadataListProjectsQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type MetadataListProjectsError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type MetadataListProjectsVariables = {
  queryParams: MetadataListProjectsQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * List all projects accessible on the Ticket Provider
 */
export const fetchMetadataListProjects = (variables: MetadataListProjectsVariables) =>
  ticketServiceFetch<
    Schemas.MetadataListProjectsResponseBody,
    MetadataListProjectsError,
    undefined,
    {},
    MetadataListProjectsQueryParams,
    {}
  >({ url: '/api/metadata/projects', method: 'get', ...variables })

/**
 * List all projects accessible on the Ticket Provider
 */
export const useMetadataListProjects = <TData>(
  variables: MetadataListProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MetadataListProjectsResponseBody, MetadataListProjectsError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.MetadataListProjectsResponseBody, MetadataListProjectsError, TData>(
    queryKeyFn({ path: '/api/metadata/projects', operationId: 'metadataListProjects', variables }),
    () => fetchMetadataListProjects({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type MetadataGetProjectPathParams = {
  /*
   * The ID of the project to retrieve
   *
   * @example Dicta ut eius corrupti quos.
   */
  id: string
}

export type MetadataGetProjectQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type MetadataGetProjectError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type MetadataGetProjectVariables = {
  pathParams: MetadataGetProjectPathParams
  queryParams: MetadataGetProjectQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Get information for a given project on the Ticket Provider
 */
export const fetchMetadataGetProject = (variables: MetadataGetProjectVariables) =>
  ticketServiceFetch<
    Schemas.Project,
    MetadataGetProjectError,
    undefined,
    {},
    MetadataGetProjectQueryParams,
    MetadataGetProjectPathParams
  >({ url: '/api/metadata/projects/{id}', method: 'get', ...variables })

/**
 * Get information for a given project on the Ticket Provider
 */
export const useMetadataGetProject = <TData>(
  variables: MetadataGetProjectVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Project, MetadataGetProjectError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.Project, MetadataGetProjectError, TData>(
    queryKeyFn({ path: '/api/metadata/projects/{id}', operationId: 'metadataGetProject', variables }),
    () => fetchMetadataGetProject({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SettingsGetSettingQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type SettingsGetSettingError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type SettingsGetSettingVariables = {
  queryParams: SettingsGetSettingQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Get Ticket Service Settings
 */
export const fetchSettingsGetSetting = (variables: SettingsGetSettingVariables) =>
  ticketServiceFetch<Schemas.Setting, SettingsGetSettingError, undefined, {}, SettingsGetSettingQueryParams, {}>({
    url: '/api/settings',
    method: 'get',
    ...variables
  })

/**
 * Get Ticket Service Settings
 */
export const useSettingsGetSetting = <TData>(
  variables: SettingsGetSettingVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Setting, SettingsGetSettingError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.Setting, SettingsGetSettingError, TData>(
    queryKeyFn({ path: '/api/settings', operationId: 'settingsGetSetting', variables }),
    () => fetchSettingsGetSetting({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SettingsSaveSettingQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
}

export type SettingsSaveSettingError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type SettingsSaveSettingVariables = {
  body: Schemas.SaveSettingRequestBody
  queryParams: SettingsSaveSettingQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Create or update Ticket Service Settings
 */
export const fetchSettingsSaveSetting = (variables: SettingsSaveSettingVariables) =>
  ticketServiceFetch<
    undefined,
    SettingsSaveSettingError,
    Schemas.SaveSettingRequestBody,
    {},
    SettingsSaveSettingQueryParams,
    {}
  >({ url: '/api/settings', method: 'put', ...variables })

/**
 * Create or update Ticket Service Settings
 */
export const useSettingsSaveSetting = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SettingsSaveSettingError, SettingsSaveSettingVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useTicketServiceContext()
  return reactQuery.useMutation<undefined, SettingsSaveSettingError, SettingsSaveSettingVariables>(
    (variables: SettingsSaveSettingVariables) => fetchSettingsSaveSetting({ ...fetcherOptions, ...variables }),
    options
  )
}

export type SystemHealthError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.NotFound
}>

export type SystemHealthVariables = TicketServiceContext['fetcherOptions']

/**
 * Check service health
 */
export const fetchSystemHealth = (variables: SystemHealthVariables) =>
  ticketServiceFetch<undefined, SystemHealthError, undefined, {}, {}, {}>({
    url: '/api/system/health',
    method: 'get',
    ...variables
  })

/**
 * Check service health
 */
export const useSystemHealth = <TData>(
  variables: SystemHealthVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, SystemHealthError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<undefined, SystemHealthError, TData>(
    queryKeyFn({ path: '/api/system/health', operationId: 'systemHealth', variables }),
    () => fetchSystemHealth({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type SystemVersionError = Fetcher.ErrorWrapper<undefined>

export type SystemVersionVariables = TicketServiceContext['fetcherOptions']

/**
 * Get service version
 */
export const fetchSystemVersion = (variables: SystemVersionVariables) =>
  ticketServiceFetch<Schemas.ServiceVersion, SystemVersionError, undefined, {}, {}, {}>({
    url: '/api/system/version',
    method: 'get',
    ...variables
  })

/**
 * Get service version
 */
export const useSystemVersion = <TData>(
  variables: SystemVersionVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.ServiceVersion, SystemVersionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.ServiceVersion, SystemVersionError, TData>(
    queryKeyFn({ path: '/api/system/version', operationId: 'systemVersion', variables }),
    () => fetchSystemVersion({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TicketsListTicketsQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Page number to fetch (starting from 0)
   *
   * @default 0
   * @example 4
   * @minimum 0
   */
  page?: number
  /*
   * Number of results per page
   *
   * @default 30
   * @example 50
   * @minimum 1
   * @maximum 100
   */
  pageSize?: number
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
  /*
   * Identifier(s) to match, in JSON format
   *
   * @example {"key1":"value1","key2":"value2"}
   */
  identifiers?: string
  /*
   * Optional Scope(s) to to match, in JSON format
   *
   * @example {"target": "123"}
   */
  optional?: string
  /*
   * External Ticket ID to match
   *
   * @example PROJ-1234
   */
  externalId?: string
}

export type TicketsListTicketsError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type TicketsListTicketsVariables = {
  queryParams: TicketsListTicketsQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * List a collection of External Tickets
 */
export const fetchTicketsListTickets = (variables: TicketsListTicketsVariables) =>
  ticketServiceFetch<
    Schemas.TicketsListTicketsResponseBody,
    TicketsListTicketsError,
    undefined,
    {},
    TicketsListTicketsQueryParams,
    {}
  >({ url: '/api/tickets', method: 'get', ...variables })

/**
 * List a collection of External Tickets
 */
export const useTicketsListTickets = <TData>(
  variables: TicketsListTicketsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TicketsListTicketsResponseBody, TicketsListTicketsError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.TicketsListTicketsResponseBody, TicketsListTicketsError, TData>(
    queryKeyFn({ path: '/api/tickets', operationId: 'ticketsListTickets', variables }),
    () => fetchTicketsListTickets({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TicketsCreateTicketQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * The Harness module responsible for this ticket
   *
   * @example sto
   */
  module: string
}

export type TicketsCreateTicketError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type TicketsCreateTicketVariables = {
  body: Schemas.CreateTicketRequestBody
  queryParams: TicketsCreateTicketQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Create a new External Ticket
 */
export const fetchTicketsCreateTicket = (variables: TicketsCreateTicketVariables) =>
  ticketServiceFetch<
    Schemas.TicketsCreateTicketResponseBody,
    TicketsCreateTicketError,
    Schemas.CreateTicketRequestBody,
    {},
    TicketsCreateTicketQueryParams,
    {}
  >({ url: '/api/tickets', method: 'post', ...variables })

/**
 * Create a new External Ticket
 */
export const useTicketsCreateTicket = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TicketsCreateTicketResponseBody,
      TicketsCreateTicketError,
      TicketsCreateTicketVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useTicketServiceContext()
  return reactQuery.useMutation<
    Schemas.TicketsCreateTicketResponseBody,
    TicketsCreateTicketError,
    TicketsCreateTicketVariables
  >((variables: TicketsCreateTicketVariables) => fetchTicketsCreateTicket({ ...fetcherOptions, ...variables }), options)
}

export type TicketsFindTicketByIdPathParams = {
  /*
   * The ID of the External Ticket to retrieve
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  id: string
}

export type TicketsFindTicketByIdQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type TicketsFindTicketByIdError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type TicketsFindTicketByIdVariables = {
  pathParams: TicketsFindTicketByIdPathParams
  queryParams: TicketsFindTicketByIdQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Find External Ticket by ID
 */
export const fetchTicketsFindTicketById = (variables: TicketsFindTicketByIdVariables) =>
  ticketServiceFetch<
    Schemas.Ticket,
    TicketsFindTicketByIdError,
    undefined,
    {},
    TicketsFindTicketByIdQueryParams,
    TicketsFindTicketByIdPathParams
  >({ url: '/api/tickets/{id}', method: 'get', ...variables })

/**
 * Find External Ticket by ID
 */
export const useTicketsFindTicketById = <TData>(
  variables: TicketsFindTicketByIdVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Ticket, TicketsFindTicketByIdError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTicketServiceContext(options)
  return reactQuery.useQuery<Schemas.Ticket, TicketsFindTicketByIdError, TData>(
    queryKeyFn({ path: '/api/tickets/{id}', operationId: 'ticketsFindTicketById', variables }),
    () => fetchTicketsFindTicketById({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type TicketsAddCommentPathParams = {
  /*
   * The ID of the External Ticket
   *
   * @example YE_8g5_49zj7iPv7U9G6JZ
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  id: string
}

export type TicketsAddCommentQueryParams = {
  /*
   * Harness Account ID
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /*
   * Harness Organization ID
   *
   * @example example_org
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  orgId?: string
  /*
   * Harness Project ID
   *
   * @example example_project
   * @pattern ^[A-Za-z_][A-Za-z0-9_]*$
   * @maxLength 128
   */
  projectId?: string
  /*
   * Harness Module
   *
   * @example sto
   */
  module: string
}

export type TicketsAddCommentError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type TicketsAddCommentVariables = {
  body: Schemas.AddCommentRequestBody
  pathParams: TicketsAddCommentPathParams
  queryParams: TicketsAddCommentQueryParams
} & TicketServiceContext['fetcherOptions']

/**
 * Add Comment to External Ticket
 */
export const fetchTicketsAddComment = (variables: TicketsAddCommentVariables) =>
  ticketServiceFetch<
    undefined,
    TicketsAddCommentError,
    Schemas.AddCommentRequestBody,
    {},
    TicketsAddCommentQueryParams,
    TicketsAddCommentPathParams
  >({ url: '/api/tickets/{id}/comment', method: 'post', ...variables })

/**
 * Add Comment to External Ticket
 */
export const useTicketsAddComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, TicketsAddCommentError, TicketsAddCommentVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useTicketServiceContext()
  return reactQuery.useMutation<undefined, TicketsAddCommentError, TicketsAddCommentVariables>(
    (variables: TicketsAddCommentVariables) => fetchTicketsAddComment({ ...fetcherOptions, ...variables }),
    options
  )
}

export type QueryOperation =
  | {
      path: '/api/metadata/priorities'
      operationId: 'metadataListPriorities'
      variables: MetadataListPrioritiesVariables
    }
  | {
      path: '/api/metadata/projects'
      operationId: 'metadataListProjects'
      variables: MetadataListProjectsVariables
    }
  | {
      path: '/api/metadata/projects/{id}'
      operationId: 'metadataGetProject'
      variables: MetadataGetProjectVariables
    }
  | {
      path: '/api/settings'
      operationId: 'settingsGetSetting'
      variables: SettingsGetSettingVariables
    }
  | {
      path: '/api/system/health'
      operationId: 'systemHealth'
      variables: SystemHealthVariables
    }
  | {
      path: '/api/system/version'
      operationId: 'systemVersion'
      variables: SystemVersionVariables
    }
  | {
      path: '/api/tickets'
      operationId: 'ticketsListTickets'
      variables: TicketsListTicketsVariables
    }
  | {
      path: '/api/tickets/{id}'
      operationId: 'ticketsFindTicketById'
      variables: TicketsFindTicketByIdVariables
    }
