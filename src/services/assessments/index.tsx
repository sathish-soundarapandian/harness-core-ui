/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '0.1'
export interface AssessmentError {
  entityId?: string
  entityType?: 'ASSESSMENT' | 'QUESTION' | 'OPTION' | 'SECTION' | 'BENCHMARK'
  errorMessages?: string[]
}

export interface AssessmentInviteDTO {
  assessmentId: string
  emails: string[]
  invitedBy?: string
}

export interface AssessmentResultsResponse {
  assessmentId?: string
  assessmentName?: string
  benchmarks?: BenchmarkDTO[]
  companyName?: string
  majorVersion?: number
  minorVersion?: number
  organizationScores?: Score[]
  responses?: UserResponsesResponse[]
  resultLink?: string
  scoreOverview?: ScoreOverviewDTO
  status?: 'NOT_STARTED' | 'ONGOING' | 'COMPLETED'
  userScores?: Score[]
}

export interface AssessmentSectionResultResponse {
  assessmentId?: string
  assessmentName?: string
  benchmarks?: BenchmarkDTO[]
  companyName?: string
  majorVersion?: number
  minorVersion?: number
  organizationScores?: Score[]
  resultLink?: string
  scoreOverview?: ScoreOverviewDTO
  sectionResultResponses?: SectionResultResponse[]
  status?: 'NOT_STARTED' | 'ONGOING' | 'COMPLETED'
  userScores?: Score[]
}

export interface AssessmentUploadRequest {
  assessmentId: string
  assessmentName: string
  expectedCompletionDuration: number
  questions?: UploadedQuestion[]
}

export interface AssessmentUploadResponse {
  assessmentId?: string
  assessmentName?: string
  baseScore?: number
  createdAt?: number
  createdBy?: string
  errors?: AssessmentError[]
  expectedCompletionDuration?: number
  isPublished?: boolean
  lastUpdatedAt?: number
  majorVersion?: number
  minorVersion?: number
  questions?: Question[]
}

export interface BenchmarkDTO {
  benchmarkId: string
  benchmarkName: string
  isDefault?: boolean
  scores?: ScoreDTO[]
}

export interface BenchmarksListRequest {
  benchmarks: BenchmarkDTO[]
  majorVersion: number
}

export interface ImprovedMaturityDTO {
  assessmentId?: string
  questionLevelMaturityList?: QuestionMaturity[]
  resultCode?: string
  userId?: string
}

export interface OptionResponse {
  optionId?: string
  optionText?: string
}

export interface OptionResponseWithSelection {
  optionId?: string
  optionText?: string
  selected?: boolean
}

export interface Question {
  capability?: string
  maxScore?: number
  possibleResponses?: QuestionOption[]
  questionId?: string
  questionNumber?: number
  questionText?: string
  questionType?: 'RATING' | 'LIKERT' | 'CHECKBOX' | 'RADIO_BUTTON' | 'YES_NO'
  recommendations?: Recommendation[]
  scoreWeightage?: number
  sectionId?: string
  sectionName?: string
}

export interface QuestionMaturity {
  capability?: string
  currentScore?: number
  projectedScore?: number
  questionId?: string
  questionText?: string
  recommendation?: Recommendation
  sectionId?: string
  sectionText?: string
  selected?: boolean
}

export interface QuestionOption {
  optionId?: string
  optionPoints?: number
  optionText?: string
}

export interface QuestionResponse {
  possibleResponses?: OptionResponse[]
  questionId?: string
  questionNumber?: number
  questionText?: string
  questionType?: 'RATING' | 'LIKERT' | 'CHECKBOX' | 'RADIO_BUTTON' | 'YES_NO'
  sectionId?: string
  sectionName?: string
}

export interface QuestionResultDTO {
  assessmentId?: string
  companyDomain?: string
  companyId?: string
  companyName?: string
  detailedScores?: QuestionScore[]
  userEmail?: string
}

export interface QuestionScore {
  capability?: string
  questionId?: string
  questionScore?: ScoreOverviewDTO
  questionText?: string
  recommendation?: Recommendation
  sectionId?: string
  sectionText?: string
}

export interface Recommendation {
  currentMaturityLevel?: 'LEVEL_1' | 'LEVEL_2' | 'LEVEL_3'
  harnessModule?:
    | 'CI'
    | 'CD'
    | 'SEI'
    | 'SRM'
    | 'FF'
    | 'CCM'
    | 'CHAOS'
    | 'CET'
    | 'IDP'
    | 'SCM'
    | 'STO'
    | 'Chaos'
    | 'SSCM'
  recommendationId?: string
  recommendationText?: string
}

export interface Score {
  entityId?: string
  maxScore?: number
  score?: number
  scoreType?: 'QUESTION_LEVEL' | 'SECTION_LEVEL' | 'ASSESSMENT_LEVEL'
}

export interface ScoreDTO {
  entityId?: string
  maxScore: number
  score: number
  scoreType: 'QUESTION_LEVEL' | 'SECTION_LEVEL' | 'ASSESSMENT_LEVEL'
}

export interface ScoreOverviewDTO {
  benchmarkId?: string
  benchmarkName?: string
  benchmarkScore?: Score
  best?: UserResponsesResponse[]
  maturityLevel?: 'LEVEL_1' | 'LEVEL_2' | 'LEVEL_3'
  numberOfResponses?: number
  organizationScore?: Score
  percentageDiffBenchmark?: number
  percentageDiffOrg?: number
  selfScore?: Score
  worst?: UserResponsesResponse[]
}

export interface SectionResultDTO {
  assessmentId?: string
  benchmarkId?: string
  companyDomain?: string
  companyId?: string
  companyName?: string
  overallScoreOverview?: ScoreOverviewDTO
  sectionScores?: SectionScore[]
  userEmail?: string
}

export interface SectionResultResponse {
  benchmarkScore?: number
  maxScore?: number
  organizationScore?: number
  sectionId?: string
  sectionText?: string
  userResponses?: UserResponsesResponse[]
  userScore?: number
}

export interface SectionScore {
  numRecommendations?: number
  sectionId?: string
  sectionScore?: ScoreOverviewDTO
  sectionText?: string
}

export interface UploadedOption {
  optionId: string
  optionPoints?: number
  optionText: string
}

export interface UploadedQuestion {
  capability?: string
  possibleResponses: UploadedOption[]
  questionId: string
  questionMaxScore?: number
  questionNumber?: number
  questionText: string
  questionType: 'RATING' | 'LIKERT' | 'CHECKBOX' | 'RADIO_BUTTON' | 'YES_NO'
  recommendations?: Recommendation[]
  sectionId?: string
  sectionName?: string
}

export interface UserAssessmentDTO {
  assessmentId?: string
  assessmentName?: string
  baseScore?: number
  expectedCompletionDuration?: number
  majorVersion?: number
  minorVersion?: number
  questions?: QuestionResponse[]
  resultLink?: string
  sectionQuestions?: {
    [key: string]: QuestionResponse[]
  }
  status?: 'NOT_STARTED' | 'ONGOING' | 'COMPLETED'
  userResponse?: UserResponseRequestItem[]
}

export interface UserResponseRequestItem {
  questionId?: string
  responseIds?: string[]
}

export interface UserResponsesRequest {
  responses: UserResponseRequestItem[]
  role?: string
}

export interface UserResponsesResponse {
  benchmarkScore?: number
  maxScore?: number
  organizationScore?: number
  questionId?: string
  questionText?: string
  questionType?: 'RATING' | 'LIKERT' | 'CHECKBOX' | 'RADIO_BUTTON' | 'YES_NO'
  responses?: OptionResponseWithSelection[]
  sectionId?: string
  sectionText?: string
  userScore?: number
}

export type AssessmentUploadRequestRequestBody = AssessmentUploadRequest

export type UserResponsesRequestRequestBody = UserResponsesRequest

export type SendAssessmentInviteProps = Omit<
  MutateProps<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>,
  'path' | 'verb'
>

/**
 * Creates invites in the system with unique sign-up code, which is sent to the respective emails
 */
export const SendAssessmentInvite = (props: SendAssessmentInviteProps) => (
  <Mutate<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>
    verb="POST"
    path={`/v1/assessment/invite`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseSendAssessmentInviteProps = Omit<
  UseMutateProps<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>,
  'path' | 'verb'
>

/**
 * Creates invites in the system with unique sign-up code, which is sent to the respective emails
 */
export const useSendAssessmentInvite = (props: UseSendAssessmentInviteProps) =>
  useMutate<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>('POST', `/v1/assessment/invite`, {
    base: getConfig('assessments/api'),
    ...props
  })

/**
 * Creates invites in the system with unique sign-up code, which is sent to the respective emails
 */
export const sendAssessmentInvitePromise = (
  props: MutateUsingFetchProps<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<AssessmentInviteDTO, unknown, void, AssessmentInviteDTO, void>(
    'POST',
    getConfig('assessments/api'),
    `/v1/assessment/invite`,
    props,
    signal
  )

export type SaveAssessmentResponseProps = Omit<
  MutateProps<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * Save response for an assessment, and continue it for later.
 */
export const SaveAssessmentResponse = (props: SaveAssessmentResponseProps) => (
  <Mutate<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>
    verb="POST"
    path={`/v1/attempt/save`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseSaveAssessmentResponseProps = Omit<
  UseMutateProps<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * Save response for an assessment, and continue it for later.
 */
export const useSaveAssessmentResponse = (props: UseSaveAssessmentResponseProps) =>
  useMutate<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>('POST', `/v1/attempt/save`, {
    base: getConfig('assessments/api'),
    ...props
  })

/**
 * Save response for an assessment, and continue it for later.
 */
export const saveAssessmentResponsePromise = (
  props: MutateUsingFetchProps<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<UserAssessmentDTO, unknown, void, UserResponsesRequestRequestBody, void>(
    'POST',
    getConfig('assessments/api'),
    `/v1/attempt/save`,
    props,
    signal
  )

export interface SubmitAssessmentForUserPathParams {
  assessmentId: string
}

export type SubmitAssessmentForUserProps = Omit<
  MutateProps<
    AssessmentResultsResponse,
    unknown,
    void,
    UserResponsesRequestRequestBody,
    SubmitAssessmentForUserPathParams
  >,
  'path' | 'verb'
> &
  SubmitAssessmentForUserPathParams

/**
 * Submit response for an assessment, and view the results
 */
export const SubmitAssessmentForUser = ({ assessmentId, ...props }: SubmitAssessmentForUserProps) => (
  <Mutate<AssessmentResultsResponse, unknown, void, UserResponsesRequestRequestBody, SubmitAssessmentForUserPathParams>
    verb="POST"
    path={`/v1/attempt/${assessmentId}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseSubmitAssessmentForUserProps = Omit<
  UseMutateProps<
    AssessmentResultsResponse,
    unknown,
    void,
    UserResponsesRequestRequestBody,
    SubmitAssessmentForUserPathParams
  >,
  'path' | 'verb'
> &
  SubmitAssessmentForUserPathParams

/**
 * Submit response for an assessment, and view the results
 */
export const useSubmitAssessmentForUser = ({ assessmentId, ...props }: UseSubmitAssessmentForUserProps) =>
  useMutate<
    AssessmentResultsResponse,
    unknown,
    void,
    UserResponsesRequestRequestBody,
    SubmitAssessmentForUserPathParams
  >('POST', (paramsInPath: SubmitAssessmentForUserPathParams) => `/v1/attempt/${paramsInPath.assessmentId}`, {
    base: getConfig('assessments/api'),
    pathParams: { assessmentId },
    ...props
  })

/**
 * Submit response for an assessment, and view the results
 */
export const submitAssessmentForUserPromise = (
  {
    assessmentId,
    ...props
  }: MutateUsingFetchProps<
    AssessmentResultsResponse,
    unknown,
    void,
    UserResponsesRequestRequestBody,
    SubmitAssessmentForUserPathParams
  > & { assessmentId: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    AssessmentResultsResponse,
    unknown,
    void,
    UserResponsesRequestRequestBody,
    SubmitAssessmentForUserPathParams
  >('POST', getConfig('assessments/api'), `/v1/attempt/${assessmentId}`, props, signal)

export interface GetAssessmentForUserPathParams {
  assessmentInviteId: string
}

export type GetAssessmentForUserProps = Omit<
  GetProps<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams>,
  'path'
> &
  GetAssessmentForUserPathParams

/**
 * View assessment for a particular invite code
 */
export const GetAssessmentForUser = ({ assessmentInviteId, ...props }: GetAssessmentForUserProps) => (
  <Get<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams>
    path={`/v1/attempt/${assessmentInviteId}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetAssessmentForUserProps = Omit<
  UseGetProps<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams>,
  'path'
> &
  GetAssessmentForUserPathParams

/**
 * View assessment for a particular invite code
 */
export const useGetAssessmentForUser = ({ assessmentInviteId, ...props }: UseGetAssessmentForUserProps) =>
  useGet<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams>(
    (paramsInPath: GetAssessmentForUserPathParams) => `/v1/attempt/${paramsInPath.assessmentInviteId}`,
    { base: getConfig('assessments/api'), pathParams: { assessmentInviteId }, ...props }
  )

/**
 * View assessment for a particular invite code
 */
export const getAssessmentForUserPromise = (
  {
    assessmentInviteId,
    ...props
  }: GetUsingFetchProps<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams> & {
    assessmentInviteId: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<UserAssessmentDTO, unknown, void, GetAssessmentForUserPathParams>(
    getConfig('assessments/api'),
    `/v1/attempt/${assessmentInviteId}`,
    props,
    signal
  )

export interface GetBenchmarksForResultCodePathParams {
  resultCode: string
}

export type GetBenchmarksForResultCodeProps = Omit<
  GetProps<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams>,
  'path'
> &
  GetBenchmarksForResultCodePathParams

/**
 * Get list of benchmarks against a resultCode
 */
export const GetBenchmarksForResultCode = ({ resultCode, ...props }: GetBenchmarksForResultCodeProps) => (
  <Get<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams>
    path={`/v1/benchmark/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetBenchmarksForResultCodeProps = Omit<
  UseGetProps<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams>,
  'path'
> &
  GetBenchmarksForResultCodePathParams

/**
 * Get list of benchmarks against a resultCode
 */
export const useGetBenchmarksForResultCode = ({ resultCode, ...props }: UseGetBenchmarksForResultCodeProps) =>
  useGet<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams>(
    (paramsInPath: GetBenchmarksForResultCodePathParams) => `/v1/benchmark/${paramsInPath.resultCode}`,
    { base: getConfig('assessments/api'), pathParams: { resultCode }, ...props }
  )

/**
 * Get list of benchmarks against a resultCode
 */
export const getBenchmarksForResultCodePromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams> & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<BenchmarkDTO[], unknown, void, GetBenchmarksForResultCodePathParams>(
    getConfig('assessments/api'),
    `/v1/benchmark/${resultCode}`,
    props,
    signal
  )

export interface GetAssessmentDetailedResultsQueryParams {
  benchmarkId?: string
}

export interface GetAssessmentDetailedResultsPathParams {
  resultCode: string
}

export type GetAssessmentDetailedResultsProps = Omit<
  GetProps<QuestionResultDTO, unknown, GetAssessmentDetailedResultsQueryParams, GetAssessmentDetailedResultsPathParams>,
  'path'
> &
  GetAssessmentDetailedResultsPathParams

/**
 * View detailed question level results of an assessment previously attempted.
 */
export const GetAssessmentDetailedResults = ({ resultCode, ...props }: GetAssessmentDetailedResultsProps) => (
  <Get<QuestionResultDTO, unknown, GetAssessmentDetailedResultsQueryParams, GetAssessmentDetailedResultsPathParams>
    path={`/v1/detailed-results/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetAssessmentDetailedResultsProps = Omit<
  UseGetProps<
    QuestionResultDTO,
    unknown,
    GetAssessmentDetailedResultsQueryParams,
    GetAssessmentDetailedResultsPathParams
  >,
  'path'
> &
  GetAssessmentDetailedResultsPathParams

/**
 * View detailed question level results of an assessment previously attempted.
 */
export const useGetAssessmentDetailedResults = ({ resultCode, ...props }: UseGetAssessmentDetailedResultsProps) =>
  useGet<QuestionResultDTO, unknown, GetAssessmentDetailedResultsQueryParams, GetAssessmentDetailedResultsPathParams>(
    (paramsInPath: GetAssessmentDetailedResultsPathParams) => `/v1/detailed-results/${paramsInPath.resultCode}`,
    { base: getConfig('assessments/api'), pathParams: { resultCode }, ...props }
  )

/**
 * View detailed question level results of an assessment previously attempted.
 */
export const getAssessmentDetailedResultsPromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<
    QuestionResultDTO,
    unknown,
    GetAssessmentDetailedResultsQueryParams,
    GetAssessmentDetailedResultsPathParams
  > & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    QuestionResultDTO,
    unknown,
    GetAssessmentDetailedResultsQueryParams,
    GetAssessmentDetailedResultsPathParams
  >(getConfig('assessments/api'), `/v1/detailed-results/${resultCode}`, props, signal)

export type SaveImprovedMaturityProps = Omit<MutateProps<void, void, void, ImprovedMaturityDTO, void>, 'path' | 'verb'>

/**
 * save an improved maturitySetting
 */
export const SaveImprovedMaturity = (props: SaveImprovedMaturityProps) => (
  <Mutate<void, void, void, ImprovedMaturityDTO, void>
    verb="POST"
    path={`/v1/improve-maturity`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseSaveImprovedMaturityProps = Omit<
  UseMutateProps<void, void, void, ImprovedMaturityDTO, void>,
  'path' | 'verb'
>

/**
 * save an improved maturitySetting
 */
export const useSaveImprovedMaturity = (props: UseSaveImprovedMaturityProps) =>
  useMutate<void, void, void, ImprovedMaturityDTO, void>('POST', `/v1/improve-maturity`, {
    base: getConfig('assessments/api'),
    ...props
  })

/**
 * save an improved maturitySetting
 */
export const saveImprovedMaturityPromise = (
  props: MutateUsingFetchProps<void, void, void, ImprovedMaturityDTO, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, void, ImprovedMaturityDTO, void>(
    'POST',
    getConfig('assessments/api'),
    `/v1/improve-maturity`,
    props,
    signal
  )

export interface GetImproveMaturityStatePathParams {
  resultCode: string
}

export type GetImproveMaturityStateProps = Omit<
  GetProps<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams>,
  'path'
> &
  GetImproveMaturityStatePathParams

/**
 * Get current status for improving maturity
 */
export const GetImproveMaturityState = ({ resultCode, ...props }: GetImproveMaturityStateProps) => (
  <Get<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams>
    path={`/v1/improve/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetImproveMaturityStateProps = Omit<
  UseGetProps<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams>,
  'path'
> &
  GetImproveMaturityStatePathParams

/**
 * Get current status for improving maturity
 */
export const useGetImproveMaturityState = ({ resultCode, ...props }: UseGetImproveMaturityStateProps) =>
  useGet<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams>(
    (paramsInPath: GetImproveMaturityStatePathParams) => `/v1/improve/${paramsInPath.resultCode}`,
    { base: getConfig('assessments/api'), pathParams: { resultCode }, ...props }
  )

/**
 * Get current status for improving maturity
 */
export const getImproveMaturityStatePromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams> & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ImprovedMaturityDTO, unknown, void, GetImproveMaturityStatePathParams>(
    getConfig('assessments/api'),
    `/v1/improve/${resultCode}`,
    props,
    signal
  )

export interface GetAssessmentResultsQueryParams {
  benchmarkId?: string
}

export interface GetAssessmentResultsPathParams {
  resultCode: string
}

export type GetAssessmentResultsProps = Omit<
  GetProps<AssessmentResultsResponse, unknown, GetAssessmentResultsQueryParams, GetAssessmentResultsPathParams>,
  'path'
> &
  GetAssessmentResultsPathParams

/**
 * View results of an assessment previously attempted.
 */
export const GetAssessmentResults = ({ resultCode, ...props }: GetAssessmentResultsProps) => (
  <Get<AssessmentResultsResponse, unknown, GetAssessmentResultsQueryParams, GetAssessmentResultsPathParams>
    path={`/v1/results/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetAssessmentResultsProps = Omit<
  UseGetProps<AssessmentResultsResponse, unknown, GetAssessmentResultsQueryParams, GetAssessmentResultsPathParams>,
  'path'
> &
  GetAssessmentResultsPathParams

/**
 * View results of an assessment previously attempted.
 */
export const useGetAssessmentResults = ({ resultCode, ...props }: UseGetAssessmentResultsProps) =>
  useGet<AssessmentResultsResponse, unknown, GetAssessmentResultsQueryParams, GetAssessmentResultsPathParams>(
    (paramsInPath: GetAssessmentResultsPathParams) => `/v1/results/${paramsInPath.resultCode}`,
    { base: getConfig('assessments/api'), pathParams: { resultCode }, ...props }
  )

/**
 * View results of an assessment previously attempted.
 */
export const getAssessmentResultsPromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<
    AssessmentResultsResponse,
    unknown,
    GetAssessmentResultsQueryParams,
    GetAssessmentResultsPathParams
  > & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<AssessmentResultsResponse, unknown, GetAssessmentResultsQueryParams, GetAssessmentResultsPathParams>(
    getConfig('assessments/api'),
    `/v1/results/${resultCode}`,
    props,
    signal
  )

export interface GetAssessmentSectionOverviewResultsQueryParams {
  benchmarkId?: string
}

export interface GetAssessmentSectionOverviewResultsPathParams {
  resultCode: string
}

export type GetAssessmentSectionOverviewResultsProps = Omit<
  GetProps<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  >,
  'path'
> &
  GetAssessmentSectionOverviewResultsPathParams

/**
 * View overview of section wise results of an assessment previously attempted.
 */
export const GetAssessmentSectionOverviewResults = ({
  resultCode,
  ...props
}: GetAssessmentSectionOverviewResultsProps) => (
  <Get<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  >
    path={`/v1/section-result-overview/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetAssessmentSectionOverviewResultsProps = Omit<
  UseGetProps<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  >,
  'path'
> &
  GetAssessmentSectionOverviewResultsPathParams

/**
 * View overview of section wise results of an assessment previously attempted.
 */
export const useGetAssessmentSectionOverviewResults = ({
  resultCode,
  ...props
}: UseGetAssessmentSectionOverviewResultsProps) =>
  useGet<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  >(
    (paramsInPath: GetAssessmentSectionOverviewResultsPathParams) =>
      `/v1/section-result-overview/${paramsInPath.resultCode}`,
    { base: getConfig('assessments/api'), pathParams: { resultCode }, ...props }
  )

/**
 * View overview of section wise results of an assessment previously attempted.
 */
export const getAssessmentSectionOverviewResultsPromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  > & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    SectionResultDTO,
    unknown,
    GetAssessmentSectionOverviewResultsQueryParams,
    GetAssessmentSectionOverviewResultsPathParams
  >(getConfig('assessments/api'), `/v1/section-result-overview/${resultCode}`, props, signal)

export interface GetAssessmentSectionResultsQueryParams {
  benchmarkId?: string
}

export interface GetAssessmentSectionResultsPathParams {
  resultCode: string
}

export type GetAssessmentSectionResultsProps = Omit<
  GetProps<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  >,
  'path'
> &
  GetAssessmentSectionResultsPathParams

/**
 * View section wise results of an assessment previously attempted.
 */
export const GetAssessmentSectionResults = ({ resultCode, ...props }: GetAssessmentSectionResultsProps) => (
  <Get<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  >
    path={`/v1/section-results/${resultCode}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetAssessmentSectionResultsProps = Omit<
  UseGetProps<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  >,
  'path'
> &
  GetAssessmentSectionResultsPathParams

/**
 * View section wise results of an assessment previously attempted.
 */
export const useGetAssessmentSectionResults = ({ resultCode, ...props }: UseGetAssessmentSectionResultsProps) =>
  useGet<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  >((paramsInPath: GetAssessmentSectionResultsPathParams) => `/v1/section-results/${paramsInPath.resultCode}`, {
    base: getConfig('assessments/api'),
    pathParams: { resultCode },
    ...props
  })

/**
 * View section wise results of an assessment previously attempted.
 */
export const getAssessmentSectionResultsPromise = (
  {
    resultCode,
    ...props
  }: GetUsingFetchProps<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  > & { resultCode: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    AssessmentSectionResultResponse,
    unknown,
    GetAssessmentSectionResultsQueryParams,
    GetAssessmentSectionResultsPathParams
  >(getConfig('assessments/api'), `/v1/section-results/${resultCode}`, props, signal)

export interface GetSectionsForAssessmentResponse {
  [key: string]: any
}
;[]

export interface GetSectionsForAssessmentPathParams {
  assessmentId: string
}

export type GetSectionsForAssessmentProps = Omit<
  GetProps<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams>,
  'path'
> &
  GetSectionsForAssessmentPathParams

/**
 * View list of sections for an assessmentId
 */
export const GetSectionsForAssessment = ({ assessmentId, ...props }: GetSectionsForAssessmentProps) => (
  <Get<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams>
    path={`/v1/sections/${assessmentId}`}
    base={getConfig('assessments/api')}
    {...props}
  />
)

export type UseGetSectionsForAssessmentProps = Omit<
  UseGetProps<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams>,
  'path'
> &
  GetSectionsForAssessmentPathParams

/**
 * View list of sections for an assessmentId
 */
export const useGetSectionsForAssessment = ({ assessmentId, ...props }: UseGetSectionsForAssessmentProps) =>
  useGet<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams>(
    (paramsInPath: GetSectionsForAssessmentPathParams) => `/v1/sections/${paramsInPath.assessmentId}`,
    { base: getConfig('assessments/api'), pathParams: { assessmentId }, ...props }
  )

/**
 * View list of sections for an assessmentId
 */
export const getSectionsForAssessmentPromise = (
  {
    assessmentId,
    ...props
  }: GetUsingFetchProps<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams> & {
    assessmentId: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<GetSectionsForAssessmentResponse, unknown, void, GetSectionsForAssessmentPathParams>(
    getConfig('assessments/api'),
    `/v1/sections/${assessmentId}`,
    props,
    signal
  )
