/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '0.1.0'
/**
 * result of get artifacts by id
 */
export interface ArtifactResult {
  artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type: string
    /**
     * url of the artifact
     */
    url: string
  }
  attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  sbom?: {
    /**
     * name of the sbom
     */
    name: string
    /**
     * url of the sbom
     */
    url?: string
  }
}

export interface CreateArtifactRequestBody {
  /**
   * name of the artifact
   */
  name: string
  /**
   * tag of the artifact
   */
  tag: string
  /**
   * type of the artifact
   */
  type: string
  /**
   * Url of the artifact
   */
  url: string
}

export interface CreateArtifactResponseBody {
  artifactId: string
}

/**
 * An enforcement result for a matched rule
 */
export interface EnforcementResult {
  'X-Page-Number'?: number
  'X-Page-Size'?: number
  'X-Total-Elements'?: number
  accountId: string
  artifactId: string
  enforcementId: string
  imageName?: string
  license: string
  name: string
  orchestrationId?: string
  orgIdentifier?: string
  packageManager: string
  projectIdentifier?: string
  purl: string
  supplier: string
  tag?: string
  version: string
  violationDetails: string
  violationType: string
}

export interface EnforcesbomRequestBody {
  artifact?: {
    /**
     * tag of the artifact
     */
    tag: string
    /**
     * url of the artifact
     */
    url: string
  }
  /**
   * enforcementId
   */
  enforcementId?: string
  policyFileId?: string
}

export interface EnforcesbomResponseBody {
  /**
   * ID of the enforcement of the SBOM
   */
  EnforcementId: string
  /**
   * Status of the enforcement
   */
  Status: string
}

export interface Error {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface FindResponseBody {
  packageReferences: PackageReference[]
}

export interface FindanyRequestBody {
  /**
   * Harness ExecutionIdentifier ID
   */
  ExecutionIdentifier?: string
  /**
   * Harness pipeline ID
   */
  PipelineIdentifier?: string
  packageIdentifiers: PackageIdentifier[]
}

export interface GetArtifactsByIDOKResponseBody {
  artifacts?: ArtifactResult[]
}

export interface GetEnforcementResultSummaryByIDResponseBody {
  allowListViolationCount: number
  artifact: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type: string
    /**
     * url of the artifact
     */
    url: string
  }
  denyListViolationCount: number
  enforcementId: string
  status: string
}

export interface GetEnforcementResultsByIDResponseBody {
  /**
   * enforcment results for a given enforcement Id
   */
  results?: EnforcementResult[]
}

export interface GetUniqueArtifactResponseBody {
  Artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type: string
    /**
     * url of the artifact
     */
    url: string
  }
  Attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  Sbom?: {
    /**
     * name of the sbom
     */
    name: string
    /**
     * url of the sbom
     */
    url?: string
  }
}

export interface LoginRequestBody {
  /**
   * Password
   */
  password: string
}

/**
 * A package identifier
 */
export interface PackageIdentifier {
  /**
   * name of the package
   */
  name?: string
}

/**
 * A package search request on sscs
 */
export interface PackageReference {
  /**
   * name of the package
   */
  AccountName?: string
  /**
   * Source ID associated with this connection source
   */
  ArtifactName?: string
  /**
   * Source ID associated with this connection source
   */
  BuildURL?: string
  /**
   * name of the package
   */
  Originator?: string
  /**
   * name of the package
   */
  PipelineIdentifier?: string
  /**
   * Source ID associated with this connection source
   */
  SBOMURL?: string
  /**
   * name of the package
   */
  SequenceId?: string
  /**
   * stage name where sbom is generated
   */
  StageName?: string
  /**
   * name of the package
   */
  VersionInfo?: string
  /**
   * name of the package
   */
  name?: string
}

/**
 * A sbom process request on sscs
 */
export interface ProcesssbomRequestBody {
  artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type: string
    /**
     * url of the artifact
     */
    url: string
  }
  attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  metadata?: {
    /**
     * BuildURL
     */
    buildUrl?: string
    /**
     * stage name where sbom is generated
     */
    format?: string
    /**
     * name of the package
     */
    pipelineExecutionId?: string
    /**
     * name of the package
     */
    pipelineIdentifier?: string
    /**
     * name of the package
     */
    sequenceId?: string
    /**
     * name of the Stage
     */
    stageIdentifier?: string
    /**
     * StepExecutionId
     */
    stepExecutionId?: string
    /**
     * id of the step
     */
    stepIdentifier?: string
    /**
     * name of the package
     */
    tool?: string
  }
  sbom?: {
    /**
     * serialised sbom data
     */
    data?: string
    /**
     * name of the sbom
     */
    name: string
    /**
     * URL of the sbom
     */
    url?: string
  }
}

export interface ProcesssbomResponseBody {
  /**
   * ID of the artifact
   */
  ArtifactId: string
}

export interface ServiceVersion {
  /**
   * Build identifier
   */
  commit: string
  /**
   * Version number
   */
  version: string
}

export interface TokenResponse {
  /**
   * Issued cross-service JWT
   */
  token: string
}

export interface DevLoginQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type DevLoginProps = Omit<
  MutateProps<string, void, DevLoginQueryParams, LoginRequestBody, void>,
  'path' | 'verb'
>

export const DevLogin = (props: DevLoginProps) => (
  <Mutate<string, void, DevLoginQueryParams, LoginRequestBody, void>
    verb="POST"
    path={`/api/login`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseDevLoginProps = Omit<
  UseMutateProps<string, void, DevLoginQueryParams, LoginRequestBody, void>,
  'path' | 'verb'
>

export const useDevLogin = (props: UseDevLoginProps) =>
  useMutate<string, void, DevLoginQueryParams, LoginRequestBody, void>('POST', `/api/login`, {
    base: getConfig('ssca'),
    ...props
  })

export interface ArtifactCreateArtifactQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type ArtifactCreateArtifactProps = Omit<
  MutateProps<CreateArtifactResponseBody, void, ArtifactCreateArtifactQueryParams, CreateArtifactRequestBody, void>,
  'path' | 'verb'
>

/**
 * create an artifact in the artifact db
 */
export const ArtifactCreateArtifact = (props: ArtifactCreateArtifactProps) => (
  <Mutate<CreateArtifactResponseBody, void, ArtifactCreateArtifactQueryParams, CreateArtifactRequestBody, void>
    verb="POST"
    path={`/api/v1/artifacts`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactCreateArtifactProps = Omit<
  UseMutateProps<CreateArtifactResponseBody, void, ArtifactCreateArtifactQueryParams, CreateArtifactRequestBody, void>,
  'path' | 'verb'
>

/**
 * create an artifact in the artifact db
 */
export const useArtifactCreateArtifact = (props: UseArtifactCreateArtifactProps) =>
  useMutate<CreateArtifactResponseBody, void, ArtifactCreateArtifactQueryParams, CreateArtifactRequestBody, void>(
    'POST',
    `/api/v1/artifacts`,
    { base: getConfig('ssca'), ...props }
  )

export interface ArtifactGetArtifactSBOMPathParams {
  /**
   * ID of the artifact to fetch
   */
  artifactId: string
  filename: string
}

export type ArtifactGetArtifactSBOMProps = Omit<GetProps<void, void, void, ArtifactGetArtifactSBOMPathParams>, 'path'> &
  ArtifactGetArtifactSBOMPathParams

/**
 * get the SBOM for an artifact of a particular version
 */
export const ArtifactGetArtifactSBOM = ({ artifactId, filename, ...props }: ArtifactGetArtifactSBOMProps) => (
  <Get<void, void, void, ArtifactGetArtifactSBOMPathParams>
    path={`/api/v1/artifacts/artifactId/${artifactId}/sbom/${filename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactSBOMProps = Omit<
  UseGetProps<void, void, void, ArtifactGetArtifactSBOMPathParams>,
  'path'
> &
  ArtifactGetArtifactSBOMPathParams

/**
 * get the SBOM for an artifact of a particular version
 */
export const useArtifactGetArtifactSBOM = ({ artifactId, filename, ...props }: UseArtifactGetArtifactSBOMProps) =>
  useGet<void, void, void, ArtifactGetArtifactSBOMPathParams>(
    (paramsInPath: ArtifactGetArtifactSBOMPathParams) =>
      `/api/v1/artifacts/artifactId/${paramsInPath.artifactId}/sbom/${paramsInPath.filename}`,
    { base: getConfig('ssca'), pathParams: { artifactId, filename }, ...props }
  )

export interface ArtifactGetArtifactFromExecutionIdPathParams {
  stepExeuctionId: string
}

export type ArtifactGetArtifactFromExecutionIdProps = Omit<
  GetProps<GetUniqueArtifactResponseBody, void, void, ArtifactGetArtifactFromExecutionIdPathParams>,
  'path'
> &
  ArtifactGetArtifactFromExecutionIdPathParams

/**
 * getArtifactFromExecutionId artifact
 *
 * get the artifact by passing the step execution id and the artifact id
 */
export const ArtifactGetArtifactFromExecutionId = ({
  stepExeuctionId,
  ...props
}: ArtifactGetArtifactFromExecutionIdProps) => (
  <Get<GetUniqueArtifactResponseBody, void, void, ArtifactGetArtifactFromExecutionIdPathParams>
    path={`/api/v1/artifacts/stepExecutions/${stepExeuctionId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactFromExecutionIdProps = Omit<
  UseGetProps<GetUniqueArtifactResponseBody, void, void, ArtifactGetArtifactFromExecutionIdPathParams>,
  'path'
> &
  ArtifactGetArtifactFromExecutionIdPathParams

/**
 * getArtifactFromExecutionId artifact
 *
 * get the artifact by passing the step execution id and the artifact id
 */
export const useArtifactGetArtifactFromExecutionId = ({
  stepExeuctionId,
  ...props
}: UseArtifactGetArtifactFromExecutionIdProps) =>
  useGet<GetUniqueArtifactResponseBody, void, void, ArtifactGetArtifactFromExecutionIdPathParams>(
    (paramsInPath: ArtifactGetArtifactFromExecutionIdPathParams) =>
      `/api/v1/artifacts/stepExecutions/${paramsInPath.stepExeuctionId}`,
    { base: getConfig('ssca'), pathParams: { stepExeuctionId }, ...props }
  )

export interface ArtifactGetArtifactsByIdPathParams {
  /**
   * ID of the artifact to fetch
   */
  artifactId: string
}

export type ArtifactGetArtifactsByIdProps = Omit<
  GetProps<GetArtifactsByIDOKResponseBody, void, void, ArtifactGetArtifactsByIdPathParams>,
  'path'
> &
  ArtifactGetArtifactsByIdPathParams

/**
 * get artifacts by passing an artifact id
 */
export const ArtifactGetArtifactsById = ({ artifactId, ...props }: ArtifactGetArtifactsByIdProps) => (
  <Get<GetArtifactsByIDOKResponseBody, void, void, ArtifactGetArtifactsByIdPathParams>
    path={`/api/v1/artifacts/${artifactId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactsByIdProps = Omit<
  UseGetProps<GetArtifactsByIDOKResponseBody, void, void, ArtifactGetArtifactsByIdPathParams>,
  'path'
> &
  ArtifactGetArtifactsByIdPathParams

/**
 * get artifacts by passing an artifact id
 */
export const useArtifactGetArtifactsById = ({ artifactId, ...props }: UseArtifactGetArtifactsByIdProps) =>
  useGet<GetArtifactsByIDOKResponseBody, void, void, ArtifactGetArtifactsByIdPathParams>(
    (paramsInPath: ArtifactGetArtifactsByIdPathParams) => `/api/v1/artifacts/${paramsInPath.artifactId}`,
    { base: getConfig('ssca'), pathParams: { artifactId }, ...props }
  )

export interface ArtifactGetSBOMFromExecutionIdPathParams {
  artifactId: string
  stepExeuctionId: string
  filename: string
}

export type ArtifactGetSBOMFromExecutionIdProps = Omit<
  GetProps<void, void, void, ArtifactGetSBOMFromExecutionIdPathParams>,
  'path'
> &
  ArtifactGetSBOMFromExecutionIdPathParams

/**
 * getSBOMFromExecutionId artifact
 *
 * get the SBOM by passing the step execution id and the artifact id
 */
export const ArtifactGetSBOMFromExecutionId = ({
  artifactId,
  stepExeuctionId,
  filename,
  ...props
}: ArtifactGetSBOMFromExecutionIdProps) => (
  <Get<void, void, void, ArtifactGetSBOMFromExecutionIdPathParams>
    path={`/api/v1/artifacts/${artifactId}/stepExecutions/${stepExeuctionId}/sbom/${filename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetSBOMFromExecutionIdProps = Omit<
  UseGetProps<void, void, void, ArtifactGetSBOMFromExecutionIdPathParams>,
  'path'
> &
  ArtifactGetSBOMFromExecutionIdPathParams

/**
 * getSBOMFromExecutionId artifact
 *
 * get the SBOM by passing the step execution id and the artifact id
 */
export const useArtifactGetSBOMFromExecutionId = ({
  artifactId,
  stepExeuctionId,
  filename,
  ...props
}: UseArtifactGetSBOMFromExecutionIdProps) =>
  useGet<void, void, void, ArtifactGetSBOMFromExecutionIdPathParams>(
    (paramsInPath: ArtifactGetSBOMFromExecutionIdPathParams) =>
      `/api/v1/artifacts/${paramsInPath.artifactId}/stepExecutions/${paramsInPath.stepExeuctionId}/sbom/${paramsInPath.filename}`,
    { base: getConfig('ssca'), pathParams: { artifactId, stepExeuctionId, filename }, ...props }
  )

export interface ArtifactGetUniqueArtifactPathParams {
  stepExecutionId: string
  stageId: string
  stepId: string
}

export type ArtifactGetUniqueArtifactProps = Omit<
  GetProps<GetUniqueArtifactResponseBody, void, void, ArtifactGetUniqueArtifactPathParams>,
  'path'
> &
  ArtifactGetUniqueArtifactPathParams

/**
 * get a unique by passing an artifact id and other exeuction details
 */
export const ArtifactGetUniqueArtifact = ({
  stepExecutionId,
  stageId,
  stepId,
  ...props
}: ArtifactGetUniqueArtifactProps) => (
  <Get<GetUniqueArtifactResponseBody, void, void, ArtifactGetUniqueArtifactPathParams>
    path={`/api/v1/artifacts/${stepExecutionId}/${stageId}/${stepId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetUniqueArtifactProps = Omit<
  UseGetProps<GetUniqueArtifactResponseBody, void, void, ArtifactGetUniqueArtifactPathParams>,
  'path'
> &
  ArtifactGetUniqueArtifactPathParams

/**
 * get a unique by passing an artifact id and other exeuction details
 */
export const useArtifactGetUniqueArtifact = ({
  stepExecutionId,
  stageId,
  stepId,
  ...props
}: UseArtifactGetUniqueArtifactProps) =>
  useGet<GetUniqueArtifactResponseBody, void, void, ArtifactGetUniqueArtifactPathParams>(
    (paramsInPath: ArtifactGetUniqueArtifactPathParams) =>
      `/api/v1/artifacts/${paramsInPath.stepExecutionId}/${paramsInPath.stageId}/${paramsInPath.stepId}`,
    { base: getConfig('ssca'), pathParams: { stepExecutionId, stageId, stepId }, ...props }
  )

export interface SbomprocessorEnforcesbomQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SbomprocessorEnforcesbomProps = Omit<
  MutateProps<EnforcesbomResponseBody, void, SbomprocessorEnforcesbomQueryParams, EnforcesbomRequestBody, void>,
  'path' | 'verb'
>

/**
 * enforce an sbom
 */
export const SbomprocessorEnforcesbom = (props: SbomprocessorEnforcesbomProps) => (
  <Mutate<EnforcesbomResponseBody, void, SbomprocessorEnforcesbomQueryParams, EnforcesbomRequestBody, void>
    verb="POST"
    path={`/api/v1/sbom/enforcement`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSbomprocessorEnforcesbomProps = Omit<
  UseMutateProps<EnforcesbomResponseBody, void, SbomprocessorEnforcesbomQueryParams, EnforcesbomRequestBody, void>,
  'path' | 'verb'
>

/**
 * enforce an sbom
 */
export const useSbomprocessorEnforcesbom = (props: UseSbomprocessorEnforcesbomProps) =>
  useMutate<EnforcesbomResponseBody, void, SbomprocessorEnforcesbomQueryParams, EnforcesbomRequestBody, void>(
    'POST',
    `/api/v1/sbom/enforcement`,
    { base: getConfig('ssca'), ...props }
  )

export interface EnforcementGetEnforcementResultsByIdQueryParams {
  /**
   * Page number to fetch (starting from 0)
   */
  page?: number
  /**
   * Number of results per page
   */
  pageSize?: number
}

export interface EnforcementGetEnforcementResultsByIdPathParams {
  /**
   * ID of the enforcement to fetch
   */
  enforcementId: string
}

export type EnforcementGetEnforcementResultsByIdProps = Omit<
  GetProps<
    GetEnforcementResultsByIDResponseBody,
    void,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultsByIdPathParams

/**
 * get enforcement by passing an enforcement id
 */
export const EnforcementGetEnforcementResultsById = ({
  enforcementId,
  ...props
}: EnforcementGetEnforcementResultsByIdProps) => (
  <Get<
    GetEnforcementResultsByIDResponseBody,
    void,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >
    path={`/api/v1/sbom/enforcement/${enforcementId}/`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseEnforcementGetEnforcementResultsByIdProps = Omit<
  UseGetProps<
    GetEnforcementResultsByIDResponseBody,
    void,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultsByIdPathParams

/**
 * get enforcement by passing an enforcement id
 */
export const useEnforcementGetEnforcementResultsById = ({
  enforcementId,
  ...props
}: UseEnforcementGetEnforcementResultsByIdProps) =>
  useGet<
    GetEnforcementResultsByIDResponseBody,
    void,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >(
    (paramsInPath: EnforcementGetEnforcementResultsByIdPathParams) =>
      `/api/v1/sbom/enforcement/${paramsInPath.enforcementId}/`,
    { base: getConfig('ssca'), pathParams: { enforcementId }, ...props }
  )

export interface EnforcementGetEnforcementResultSummaryByIdPathParams {
  /**
   * ID of the enforcement to fetch
   */
  enforcementId: string
}

export type EnforcementGetEnforcementResultSummaryByIdProps = Omit<
  GetProps<
    GetEnforcementResultSummaryByIDResponseBody,
    void,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultSummaryByIdPathParams

/**
 * get enforcement by passing an enforcement id
 */
export const EnforcementGetEnforcementResultSummaryById = ({
  enforcementId,
  ...props
}: EnforcementGetEnforcementResultSummaryByIdProps) => (
  <Get<GetEnforcementResultSummaryByIDResponseBody, void, void, EnforcementGetEnforcementResultSummaryByIdPathParams>
    path={`/api/v1/sbom/enforcement/${enforcementId}/summary`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseEnforcementGetEnforcementResultSummaryByIdProps = Omit<
  UseGetProps<
    GetEnforcementResultSummaryByIDResponseBody,
    void,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultSummaryByIdPathParams

/**
 * get enforcement by passing an enforcement id
 */
export const useEnforcementGetEnforcementResultSummaryById = ({
  enforcementId,
  ...props
}: UseEnforcementGetEnforcementResultSummaryByIdProps) =>
  useGet<GetEnforcementResultSummaryByIDResponseBody, void, void, EnforcementGetEnforcementResultSummaryByIdPathParams>(
    (paramsInPath: EnforcementGetEnforcementResultSummaryByIdPathParams) =>
      `/api/v1/sbom/enforcement/${paramsInPath.enforcementId}/summary`,
    { base: getConfig('ssca'), pathParams: { enforcementId }, ...props }
  )

export interface SbomprocessorProcesssbomQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SbomprocessorProcesssbomProps = Omit<
  MutateProps<ProcesssbomResponseBody, void, SbomprocessorProcesssbomQueryParams, ProcesssbomRequestBody, void>,
  'path' | 'verb'
>

/**
 * process & inject sbom
 */
export const SbomprocessorProcesssbom = (props: SbomprocessorProcesssbomProps) => (
  <Mutate<ProcesssbomResponseBody, void, SbomprocessorProcesssbomQueryParams, ProcesssbomRequestBody, void>
    verb="POST"
    path={`/api/v1/sbom/process`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSbomprocessorProcesssbomProps = Omit<
  UseMutateProps<ProcesssbomResponseBody, void, SbomprocessorProcesssbomQueryParams, ProcesssbomRequestBody, void>,
  'path' | 'verb'
>

/**
 * process & inject sbom
 */
export const useSbomprocessorProcesssbom = (props: UseSbomprocessorProcesssbomProps) =>
  useMutate<ProcesssbomResponseBody, void, SbomprocessorProcesssbomQueryParams, ProcesssbomRequestBody, void>(
    'POST',
    `/api/v1/sbom/process`,
    { base: getConfig('ssca'), ...props }
  )

export interface SearchFindanyQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SearchFindanyProps = Omit<
  MutateProps<FindResponseBody, void, SearchFindanyQueryParams, FindanyRequestBody, void>,
  'path' | 'verb'
>

/**
 * Find a package references by name
 */
export const SearchFindany = (props: SearchFindanyProps) => (
  <Mutate<FindResponseBody, void, SearchFindanyQueryParams, FindanyRequestBody, void>
    verb="POST"
    path={`/api/v1/search/findany`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSearchFindanyProps = Omit<
  UseMutateProps<FindResponseBody, void, SearchFindanyQueryParams, FindanyRequestBody, void>,
  'path' | 'verb'
>

/**
 * Find a package references by name
 */
export const useSearchFindany = (props: UseSearchFindanyProps) =>
  useMutate<FindResponseBody, void, SearchFindanyQueryParams, FindanyRequestBody, void>(
    'POST',
    `/api/v1/search/findany`,
    { base: getConfig('ssca'), ...props }
  )

export interface SearchFindQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export interface SearchFindPathParams {
  /**
   * Source ID associated with this connection source
   */
  packagename: string
}

export type SearchFindProps = Omit<
  GetProps<FindResponseBody, void, SearchFindQueryParams, SearchFindPathParams>,
  'path'
> &
  SearchFindPathParams

/**
 * Find a package references by name
 */
export const SearchFind = ({ packagename, ...props }: SearchFindProps) => (
  <Get<FindResponseBody, void, SearchFindQueryParams, SearchFindPathParams>
    path={`/api/v1/search/${packagename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSearchFindProps = Omit<
  UseGetProps<FindResponseBody, void, SearchFindQueryParams, SearchFindPathParams>,
  'path'
> &
  SearchFindPathParams

/**
 * Find a package references by name
 */
export const useSearchFind = ({ packagename, ...props }: UseSearchFindProps) =>
  useGet<FindResponseBody, void, SearchFindQueryParams, SearchFindPathParams>(
    (paramsInPath: SearchFindPathParams) => `/api/v1/search/${paramsInPath.packagename}`,
    { base: getConfig('ssca'), pathParams: { packagename }, ...props }
  )

export type SystemHealthProps = Omit<GetProps<void, void, void, void>, 'path'>

/**
 * Check service health
 */
export const SystemHealth = (props: SystemHealthProps) => (
  <Get<void, void, void, void> path={`/api/v1/system/health`} base={getConfig('ssca')} {...props} />
)

export type UseSystemHealthProps = Omit<UseGetProps<void, void, void, void>, 'path'>

/**
 * Check service health
 */
export const useSystemHealth = (props: UseSystemHealthProps) =>
  useGet<void, void, void, void>(`/api/v1/system/health`, { base: getConfig('ssca'), ...props })

export type SystemVersionProps = Omit<GetProps<ServiceVersion, void, void, void>, 'path'>

/**
 * Check service version
 */
export const SystemVersion = (props: SystemVersionProps) => (
  <Get<ServiceVersion, void, void, void> path={`/api/v1/system/version`} base={getConfig('ssca')} {...props} />
)

export type UseSystemVersionProps = Omit<UseGetProps<ServiceVersion, void, void, void>, 'path'>

/**
 * Check service version
 */
export const useSystemVersion = (props: UseSystemVersionProps) =>
  useGet<ServiceVersion, void, void, void>(`/api/v1/system/version`, { base: getConfig('ssca'), ...props })

export interface TokenIssueTokenQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type TokenIssueTokenProps = Omit<
  GetProps<TokenResponse, TokenResponse, TokenIssueTokenQueryParams, void>,
  'path'
>

/**
 * Issue a cross-service token
 */
export const TokenIssueToken = (props: TokenIssueTokenProps) => (
  <Get<TokenResponse, TokenResponse, TokenIssueTokenQueryParams, void>
    path={`/api/v1/token`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseTokenIssueTokenProps = Omit<
  UseGetProps<TokenResponse, TokenResponse, TokenIssueTokenQueryParams, void>,
  'path'
>

/**
 * Issue a cross-service token
 */
export const useTokenIssueToken = (props: UseTokenIssueTokenProps) =>
  useGet<TokenResponse, TokenResponse, TokenIssueTokenQueryParams, void>(`/api/v1/token`, {
    base: getConfig('ssca'),
    ...props
  })
