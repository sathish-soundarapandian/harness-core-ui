/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '0.1.0'
/**
 * createArtifact_BadGateway_response_body result type (default view)
 */
export interface ArtifactCreateArtifactBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * createArtifact_BadRequest_response_body result type (default view)
 */
export interface ArtifactCreateArtifactBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * createArtifact_Forbidden_response_body result type (default view)
 */
export interface ArtifactCreateArtifactForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * createArtifact_InternalServer_response_body result type (default view)
 */
export interface ArtifactCreateArtifactInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * createArtifact_NotFound_response_body result type (default view)
 */
export interface ArtifactCreateArtifactNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface ArtifactCreateArtifactRequestBody {
  /**
   * name of the artifact
   */
  name: string
  /**
   * tag of the artifact
   */
  tag: string
  /**
   * type of the artifact
   */
  type: string
  /**
   * Url of the artifact
   */
  url: string
}

export interface ArtifactCreateArtifactResponseBody {
  artifactId: string
}

/**
 * createArtifact_Unauthorized_response_body result type (default view)
 */
export interface ArtifactCreateArtifactUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactFromExecutionId_BadGateway_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactFromExecutionId_BadRequest_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactFromExecutionId_Forbidden_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactFromExecutionId_InternalServer_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactFromExecutionId_NotFound_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface ArtifactGetArtifactFromExecutionIDResponseBody {
  Artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  Attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  Sbom?: {
    /**
     * name of the sbom
     */
    name: string
    /**
     * url of the sbom
     */
    url?: string
  }
}

/**
 * getArtifactFromExecutionId_Unauthorized_response_body result type (default view)
 */
export interface ArtifactGetArtifactFromExecutionIDUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_BadGateway_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_BadRequest_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_Forbidden_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_InternalServer_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_NotFound_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactSBOM_Unauthorized_response_body result type (default view)
 */
export interface ArtifactGetArtifactSBOMUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactsById_BadGateway_response_body result type (default view)
 */
export interface ArtifactGetArtifactsByIDBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactsById_BadRequest_response_body result type (default view)
 */
export interface ArtifactGetArtifactsByIDBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactsById_Forbidden_response_body result type (default view)
 */
export interface ArtifactGetArtifactsByIDForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactsById_InternalServer_response_body result type (default view)
 */
export interface ArtifactGetArtifactsByIDInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getArtifactsById_NotFound_response_body result type (default view)
 */
export interface ArtifactGetArtifactsByIDNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface ArtifactGetArtifactsByIDOKResponseBody {
  artifacts?: ArtifactResultResponseBody[]
}

export interface ArtifactGetArtifactsByIDUnauthorizedResponseBody {
  artifacts?: ArtifactResultResponseBody[]
}

/**
 * getSBOMFromExecutionId_BadGateway_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getSBOMFromExecutionId_BadRequest_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getSBOMFromExecutionId_Forbidden_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getSBOMFromExecutionId_InternalServer_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getSBOMFromExecutionId_NotFound_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getSBOMFromExecutionId_Unauthorized_response_body result type (default view)
 */
export interface ArtifactGetSBOMFromExecutionIDUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getUniqueArtifact_BadGateway_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getUniqueArtifact_BadRequest_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getUniqueArtifact_Forbidden_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getUniqueArtifact_InternalServer_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getUniqueArtifact_NotFound_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface ArtifactGetUniqueArtifactResponseBody {
  Artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  Attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  Sbom?: {
    /**
     * name of the sbom
     */
    name: string
    /**
     * url of the sbom
     */
    url?: string
  }
}

/**
 * getUniqueArtifact_Unauthorized_response_body result type (default view)
 */
export interface ArtifactGetUniqueArtifactUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * login_BadGateway_response_body result type (default view)
 */
export interface DevLoginBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * login_BadRequest_response_body result type (default view)
 */
export interface DevLoginBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * login_Forbidden_response_body result type (default view)
 */
export interface DevLoginForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * login_InternalServer_response_body result type (default view)
 */
export interface DevLoginInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * login_NotFound_response_body result type (default view)
 */
export interface DevLoginNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface DevLoginRequestBody {
  /**
   * Password
   */
  password: string
}

/**
 * login_Unauthorized_response_body result type (default view)
 */
export interface DevLoginUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultSummaryById_BadGateway_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultSummaryById_BadRequest_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultSummaryById_Forbidden_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultSummaryById_InternalServer_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultSummaryById_NotFound_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface EnforcementGetEnforcementResultSummaryByIDResponseBody {
  allowListViolationCount: number
  artifact: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  denyListViolationCount: number
  enforcementId: string
  status: string
}

/**
 * getEnforcementResultSummaryById_Unauthorized_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultSummaryByIDUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultsById_BadGateway_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultsById_BadRequest_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultsById_Forbidden_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultsById_InternalServer_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * getEnforcementResultsById_NotFound_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface EnforcementGetEnforcementResultsByIDResponseBody {
  /**
   * enforcment results for a given enforcement Id
   */
  results?: EnforcementResultResponseBody[]
}

/**
 * getEnforcementResultsById_Unauthorized_response_body result type (default view)
 */
export interface EnforcementGetEnforcementResultsByIDUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * An enforcement result for a matched rule
 */
export interface EnforcementResultResponseBody {
  'X-Page-Number'?: number
  'X-Page-Size'?: number
  'X-Total-Elements'?: number
  accountId: string
  artifactId: string
  enforcementId: string
  imageName?: string
  license: string[]
  name: string
  orchestrationId?: string
  orgIdentifier?: string
  packageManager: string
  projectIdentifier?: string
  purl: string
  supplier: string
  tag?: string
  version: string
  violationDetails: string
  violationType: string
}

export interface IssueTokenIssueTokenOKResponseBody {
  /**
   * Issued cross-service JWT
   */
  token: string
}

export interface IssueTokenIssueTokenUnauthorizedResponseBody {
  /**
   * Issued cross-service JWT
   */
  token: string
}

/**
 * enforcesbom_BadGateway_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * enforcesbom_BadRequest_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * enforcesbom_Forbidden_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * enforcesbom_InternalServer_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * enforcesbom_NotFound_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface SbomprocessorEnforcesbomRequestBody {
  artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  /**
   * enforcementId
   */
  enforcementId?: string
  policyFileId?: string
}

export interface SbomprocessorEnforcesbomResponseBody {
  /**
   * ID of the enforcement of the SBOM
   */
  EnforcementId: string
  /**
   * Status of the enforcement
   */
  Status: string
}

/**
 * enforcesbom_Unauthorized_response_body result type (default view)
 */
export interface SbomprocessorEnforcesbomUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * processsbom_BadGateway_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * processsbom_BadRequest_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * processsbom_Forbidden_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * processsbom_InternalServer_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * processsbom_NotFound_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * A sbom process request on sscs
 */
export interface SbomprocessorProcesssbomRequestBody {
  artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  metadata?: {
    /**
     * BuildURL
     */
    buildUrl?: string
    /**
     * stage name where sbom is generated
     */
    format?: string
    /**
     * name of the package
     */
    pipelineExecutionId?: string
    /**
     * name of the package
     */
    pipelineIdentifier?: string
    /**
     * name of the package
     */
    sequenceId?: string
    /**
     * name of the Stage
     */
    stageIdentifier?: string
    /**
     * StepExecutionId
     */
    stepExecutionId?: string
    /**
     * id of the step
     */
    stepIdentifier?: string
    /**
     * name of the package
     */
    tool?: string
  }
  sbom?: {
    /**
     * serialised sbom data
     */
    data?: string
    /**
     * format of the SBOM
     */
    format: string
    /**
     * name of the sbom
     */
    name: string
    /**
     * URL of the sbom
     */
    url?: string
  }
}

export interface SbomprocessorProcesssbomResponseBody {
  /**
   * ID of the artifact
   */
  ArtifactId: string
}

/**
 * processsbom_Unauthorized_response_body result type (default view)
 */
export interface SbomprocessorProcesssbomUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * find_BadGateway_response_body result type (default view)
 */
export interface SearchFindBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * find_BadRequest_response_body result type (default view)
 */
export interface SearchFindBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * find_Forbidden_response_body result type (default view)
 */
export interface SearchFindForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * find_InternalServer_response_body result type (default view)
 */
export interface SearchFindInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * find_NotFound_response_body result type (default view)
 */
export interface SearchFindNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface SearchFindResponseBody {
  packageReferences: PackageReferenceResponseBody[]
}

/**
 * find_Unauthorized_response_body result type (default view)
 */
export interface SearchFindUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * findany_BadGateway_response_body result type (default view)
 */
export interface SearchFindanyBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * findany_BadRequest_response_body result type (default view)
 */
export interface SearchFindanyBadRequestResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * findany_Forbidden_response_body result type (default view)
 */
export interface SearchFindanyForbiddenResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * findany_InternalServer_response_body result type (default view)
 */
export interface SearchFindanyInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * findany_NotFound_response_body result type (default view)
 */
export interface SearchFindanyNotFoundResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface SearchFindanyRequestBody {
  /**
   * Harness ExecutionIdentifier ID
   */
  ExecutionIdentifier?: string
  /**
   * Harness pipeline ID
   */
  PipelineIdentifier?: string
  packageIdentifiers: PackageIdentifierRequestBody[]
}

export interface SearchFindanyResponseBody {
  packageReferences: PackageReferenceResponseBody[]
}

/**
 * findany_Unauthorized_response_body result type (default view)
 */
export interface SearchFindanyUnauthorizedResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * health_BadGateway_response_body result type (default view)
 */
export interface SystemHealthBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * health_InternalServer_response_body result type (default view)
 */
export interface SystemHealthInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * version_BadGateway_response_body result type (default view)
 */
export interface SystemVersionBadGatewayResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

/**
 * version_InternalServer_response_body result type (default view)
 */
export interface SystemVersionInternalServerResponseBody {
  /**
   * Is the error a server-side fault?
   */
  fault: boolean
  /**
   * ID is a unique identifier for this particular occurrence of the problem.
   */
  id: string
  /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   */
  message: string
  /**
   * Name is the name of this class of errors.
   */
  name: string
  /**
   * Is the error temporary?
   */
  temporary: boolean
  /**
   * Is the error a timeout?
   */
  timeout: boolean
}

export interface SystemVersionResponseBody {
  /**
   * Build identifier
   */
  commit: string
  /**
   * Version number
   */
  version: string
}

/**
 * result of get artifacts by id
 */
export interface ArtifactResultResponseBody {
  artifact?: {
    /**
     * id of the artifact
     */
    id?: string
    /**
     * name of the artifact
     */
    name: string
    /**
     * url of the artifact
     */
    registryUrl: string
    /**
     * tag of the artifact
     */
    tag?: string
    /**
     * type of the artifact
     */
    type?: string
  }
  attestation?: {
    /**
     * is the sbom attested or not
     */
    isAttested?: boolean
    /**
     * url of the attested file
     */
    url?: string
  }
  sbom?: {
    /**
     * name of the sbom
     */
    name: string
    /**
     * url of the sbom
     */
    url?: string
  }
}

/**
 * A package identifier
 */
export interface PackageIdentifierRequestBody {
  /**
   * name of the package
   */
  name?: string
}

/**
 * A package search request on sscs
 */
export interface PackageReferenceResponseBody {
  /**
   * name of the package
   */
  AccountName?: string
  /**
   * Source ID associated with this connection source
   */
  ArtifactName?: string
  /**
   * Source ID associated with this connection source
   */
  BuildURL?: string
  /**
   * name of the package
   */
  Originator?: string
  /**
   * name of the package
   */
  PipelineIdentifier?: string
  /**
   * Source ID associated with this connection source
   */
  SBOMURL?: string
  /**
   * name of the package
   */
  SequenceId?: string
  /**
   * stage name where sbom is generated
   */
  StageName?: string
  /**
   * name of the package
   */
  VersionInfo?: string
  /**
   * name of the package
   */
  name?: string
}

export interface DevLoginQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type DevLoginProps = Omit<
  MutateProps<
    string,
    | DevLoginBadRequestResponseBody
    | DevLoginUnauthorizedResponseBody
    | DevLoginForbiddenResponseBody
    | DevLoginNotFoundResponseBody
    | DevLoginInternalServerResponseBody
    | DevLoginBadGatewayResponseBody,
    DevLoginQueryParams,
    DevLoginRequestBody,
    void
  >,
  'path' | 'verb'
>

export const DevLogin = (props: DevLoginProps) => (
  <Mutate<
    string,
    | DevLoginBadRequestResponseBody
    | DevLoginUnauthorizedResponseBody
    | DevLoginForbiddenResponseBody
    | DevLoginNotFoundResponseBody
    | DevLoginInternalServerResponseBody
    | DevLoginBadGatewayResponseBody,
    DevLoginQueryParams,
    DevLoginRequestBody,
    void
  >
    verb="POST"
    path={`/api/login`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseDevLoginProps = Omit<
  UseMutateProps<
    string,
    | DevLoginBadRequestResponseBody
    | DevLoginUnauthorizedResponseBody
    | DevLoginForbiddenResponseBody
    | DevLoginNotFoundResponseBody
    | DevLoginInternalServerResponseBody
    | DevLoginBadGatewayResponseBody,
    DevLoginQueryParams,
    DevLoginRequestBody,
    void
  >,
  'path' | 'verb'
>

export const useDevLogin = (props: UseDevLoginProps) =>
  useMutate<
    string,
    | DevLoginBadRequestResponseBody
    | DevLoginUnauthorizedResponseBody
    | DevLoginForbiddenResponseBody
    | DevLoginNotFoundResponseBody
    | DevLoginInternalServerResponseBody
    | DevLoginBadGatewayResponseBody,
    DevLoginQueryParams,
    DevLoginRequestBody,
    void
  >('POST', `/api/login`, { base: getConfig('ssca'), ...props })

export interface ArtifactCreateArtifactQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type ArtifactCreateArtifactProps = Omit<
  MutateProps<
    ArtifactCreateArtifactResponseBody,
    | ArtifactCreateArtifactBadRequestResponseBody
    | ArtifactCreateArtifactUnauthorizedResponseBody
    | ArtifactCreateArtifactForbiddenResponseBody
    | ArtifactCreateArtifactNotFoundResponseBody
    | ArtifactCreateArtifactInternalServerResponseBody
    | ArtifactCreateArtifactBadGatewayResponseBody,
    ArtifactCreateArtifactQueryParams,
    ArtifactCreateArtifactRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * create an artifact in the artifact db
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactCreateArtifact = (props: ArtifactCreateArtifactProps) => (
  <Mutate<
    ArtifactCreateArtifactResponseBody,
    | ArtifactCreateArtifactBadRequestResponseBody
    | ArtifactCreateArtifactUnauthorizedResponseBody
    | ArtifactCreateArtifactForbiddenResponseBody
    | ArtifactCreateArtifactNotFoundResponseBody
    | ArtifactCreateArtifactInternalServerResponseBody
    | ArtifactCreateArtifactBadGatewayResponseBody,
    ArtifactCreateArtifactQueryParams,
    ArtifactCreateArtifactRequestBody,
    void
  >
    verb="POST"
    path={`/api/v1/artifacts`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactCreateArtifactProps = Omit<
  UseMutateProps<
    ArtifactCreateArtifactResponseBody,
    | ArtifactCreateArtifactBadRequestResponseBody
    | ArtifactCreateArtifactUnauthorizedResponseBody
    | ArtifactCreateArtifactForbiddenResponseBody
    | ArtifactCreateArtifactNotFoundResponseBody
    | ArtifactCreateArtifactInternalServerResponseBody
    | ArtifactCreateArtifactBadGatewayResponseBody,
    ArtifactCreateArtifactQueryParams,
    ArtifactCreateArtifactRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * create an artifact in the artifact db
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactCreateArtifact = (props: UseArtifactCreateArtifactProps) =>
  useMutate<
    ArtifactCreateArtifactResponseBody,
    | ArtifactCreateArtifactBadRequestResponseBody
    | ArtifactCreateArtifactUnauthorizedResponseBody
    | ArtifactCreateArtifactForbiddenResponseBody
    | ArtifactCreateArtifactNotFoundResponseBody
    | ArtifactCreateArtifactInternalServerResponseBody
    | ArtifactCreateArtifactBadGatewayResponseBody,
    ArtifactCreateArtifactQueryParams,
    ArtifactCreateArtifactRequestBody,
    void
  >('POST', `/api/v1/artifacts`, { base: getConfig('ssca'), ...props })

export interface ArtifactGetArtifactSBOMPathParams {
  /**
   * ID of the artifact to fetch
   */
  artifactId: string
  filename: string
}

export type ArtifactGetArtifactSBOMProps = Omit<
  GetProps<
    void,
    | ArtifactGetArtifactSBOMBadRequestResponseBody
    | ArtifactGetArtifactSBOMUnauthorizedResponseBody
    | ArtifactGetArtifactSBOMForbiddenResponseBody
    | ArtifactGetArtifactSBOMNotFoundResponseBody
    | ArtifactGetArtifactSBOMInternalServerResponseBody
    | ArtifactGetArtifactSBOMBadGatewayResponseBody,
    void,
    ArtifactGetArtifactSBOMPathParams
  >,
  'path'
> &
  ArtifactGetArtifactSBOMPathParams

/**
 * get the SBOM for an artifact of a particular version
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactGetArtifactSBOM = ({ artifactId, filename, ...props }: ArtifactGetArtifactSBOMProps) => (
  <Get<
    void,
    | ArtifactGetArtifactSBOMBadRequestResponseBody
    | ArtifactGetArtifactSBOMUnauthorizedResponseBody
    | ArtifactGetArtifactSBOMForbiddenResponseBody
    | ArtifactGetArtifactSBOMNotFoundResponseBody
    | ArtifactGetArtifactSBOMInternalServerResponseBody
    | ArtifactGetArtifactSBOMBadGatewayResponseBody,
    void,
    ArtifactGetArtifactSBOMPathParams
  >
    path={`/api/v1/artifacts/artifactId/${artifactId}/sbom/${filename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactSBOMProps = Omit<
  UseGetProps<
    void,
    | ArtifactGetArtifactSBOMBadRequestResponseBody
    | ArtifactGetArtifactSBOMUnauthorizedResponseBody
    | ArtifactGetArtifactSBOMForbiddenResponseBody
    | ArtifactGetArtifactSBOMNotFoundResponseBody
    | ArtifactGetArtifactSBOMInternalServerResponseBody
    | ArtifactGetArtifactSBOMBadGatewayResponseBody,
    void,
    ArtifactGetArtifactSBOMPathParams
  >,
  'path'
> &
  ArtifactGetArtifactSBOMPathParams

/**
 * get the SBOM for an artifact of a particular version
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactGetArtifactSBOM = ({ artifactId, filename, ...props }: UseArtifactGetArtifactSBOMProps) =>
  useGet<
    void,
    | ArtifactGetArtifactSBOMBadRequestResponseBody
    | ArtifactGetArtifactSBOMUnauthorizedResponseBody
    | ArtifactGetArtifactSBOMForbiddenResponseBody
    | ArtifactGetArtifactSBOMNotFoundResponseBody
    | ArtifactGetArtifactSBOMInternalServerResponseBody
    | ArtifactGetArtifactSBOMBadGatewayResponseBody,
    void,
    ArtifactGetArtifactSBOMPathParams
  >(
    (paramsInPath: ArtifactGetArtifactSBOMPathParams) =>
      `/api/v1/artifacts/artifactId/${paramsInPath.artifactId}/sbom/${paramsInPath.filename}`,
    { base: getConfig('ssca'), pathParams: { artifactId, filename }, ...props }
  )

export interface ArtifactGetArtifactFromExecutionIdPathParams {
  stepExeuctionId: string
}

export type ArtifactGetArtifactFromExecutionIdProps = Omit<
  GetProps<
    ArtifactGetArtifactFromExecutionIDResponseBody,
    | ArtifactGetArtifactFromExecutionIDBadRequestResponseBody
    | ArtifactGetArtifactFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetArtifactFromExecutionIDForbiddenResponseBody
    | ArtifactGetArtifactFromExecutionIDNotFoundResponseBody
    | ArtifactGetArtifactFromExecutionIDInternalServerResponseBody
    | ArtifactGetArtifactFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactFromExecutionIdPathParams
  >,
  'path'
> &
  ArtifactGetArtifactFromExecutionIdPathParams

/**
 * getArtifactFromExecutionId artifact
 *
 * get the artifact by passing the step execution id and the artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactGetArtifactFromExecutionId = ({
  stepExeuctionId,
  ...props
}: ArtifactGetArtifactFromExecutionIdProps) => (
  <Get<
    ArtifactGetArtifactFromExecutionIDResponseBody,
    | ArtifactGetArtifactFromExecutionIDBadRequestResponseBody
    | ArtifactGetArtifactFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetArtifactFromExecutionIDForbiddenResponseBody
    | ArtifactGetArtifactFromExecutionIDNotFoundResponseBody
    | ArtifactGetArtifactFromExecutionIDInternalServerResponseBody
    | ArtifactGetArtifactFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactFromExecutionIdPathParams
  >
    path={`/api/v1/artifacts/stepExecutions/${stepExeuctionId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactFromExecutionIdProps = Omit<
  UseGetProps<
    ArtifactGetArtifactFromExecutionIDResponseBody,
    | ArtifactGetArtifactFromExecutionIDBadRequestResponseBody
    | ArtifactGetArtifactFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetArtifactFromExecutionIDForbiddenResponseBody
    | ArtifactGetArtifactFromExecutionIDNotFoundResponseBody
    | ArtifactGetArtifactFromExecutionIDInternalServerResponseBody
    | ArtifactGetArtifactFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactFromExecutionIdPathParams
  >,
  'path'
> &
  ArtifactGetArtifactFromExecutionIdPathParams

/**
 * getArtifactFromExecutionId artifact
 *
 * get the artifact by passing the step execution id and the artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactGetArtifactFromExecutionId = ({
  stepExeuctionId,
  ...props
}: UseArtifactGetArtifactFromExecutionIdProps) =>
  useGet<
    ArtifactGetArtifactFromExecutionIDResponseBody,
    | ArtifactGetArtifactFromExecutionIDBadRequestResponseBody
    | ArtifactGetArtifactFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetArtifactFromExecutionIDForbiddenResponseBody
    | ArtifactGetArtifactFromExecutionIDNotFoundResponseBody
    | ArtifactGetArtifactFromExecutionIDInternalServerResponseBody
    | ArtifactGetArtifactFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactFromExecutionIdPathParams
  >(
    (paramsInPath: ArtifactGetArtifactFromExecutionIdPathParams) =>
      `/api/v1/artifacts/stepExecutions/${paramsInPath.stepExeuctionId}`,
    { base: getConfig('ssca'), pathParams: { stepExeuctionId }, ...props }
  )

export interface ArtifactGetArtifactsByIdPathParams {
  /**
   * ID of the artifact to fetch
   */
  artifactId: string
}

export type ArtifactGetArtifactsByIdProps = Omit<
  GetProps<
    ArtifactGetArtifactsByIDOKResponseBody,
    | ArtifactGetArtifactsByIDBadRequestResponseBody
    | ArtifactGetArtifactsByIDUnauthorizedResponseBody
    | ArtifactGetArtifactsByIDForbiddenResponseBody
    | ArtifactGetArtifactsByIDNotFoundResponseBody
    | ArtifactGetArtifactsByIDInternalServerResponseBody
    | ArtifactGetArtifactsByIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactsByIdPathParams
  >,
  'path'
> &
  ArtifactGetArtifactsByIdPathParams

/**
 * get artifacts by passing an artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactGetArtifactsById = ({ artifactId, ...props }: ArtifactGetArtifactsByIdProps) => (
  <Get<
    ArtifactGetArtifactsByIDOKResponseBody,
    | ArtifactGetArtifactsByIDBadRequestResponseBody
    | ArtifactGetArtifactsByIDUnauthorizedResponseBody
    | ArtifactGetArtifactsByIDForbiddenResponseBody
    | ArtifactGetArtifactsByIDNotFoundResponseBody
    | ArtifactGetArtifactsByIDInternalServerResponseBody
    | ArtifactGetArtifactsByIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactsByIdPathParams
  >
    path={`/api/v1/artifacts/${artifactId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetArtifactsByIdProps = Omit<
  UseGetProps<
    ArtifactGetArtifactsByIDOKResponseBody,
    | ArtifactGetArtifactsByIDBadRequestResponseBody
    | ArtifactGetArtifactsByIDUnauthorizedResponseBody
    | ArtifactGetArtifactsByIDForbiddenResponseBody
    | ArtifactGetArtifactsByIDNotFoundResponseBody
    | ArtifactGetArtifactsByIDInternalServerResponseBody
    | ArtifactGetArtifactsByIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactsByIdPathParams
  >,
  'path'
> &
  ArtifactGetArtifactsByIdPathParams

/**
 * get artifacts by passing an artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactGetArtifactsById = ({ artifactId, ...props }: UseArtifactGetArtifactsByIdProps) =>
  useGet<
    ArtifactGetArtifactsByIDOKResponseBody,
    | ArtifactGetArtifactsByIDBadRequestResponseBody
    | ArtifactGetArtifactsByIDUnauthorizedResponseBody
    | ArtifactGetArtifactsByIDForbiddenResponseBody
    | ArtifactGetArtifactsByIDNotFoundResponseBody
    | ArtifactGetArtifactsByIDInternalServerResponseBody
    | ArtifactGetArtifactsByIDBadGatewayResponseBody,
    void,
    ArtifactGetArtifactsByIdPathParams
  >((paramsInPath: ArtifactGetArtifactsByIdPathParams) => `/api/v1/artifacts/${paramsInPath.artifactId}`, {
    base: getConfig('ssca'),
    pathParams: { artifactId },
    ...props
  })

export interface ArtifactGetSBOMFromExecutionIdPathParams {
  artifactId: string
  stepExeuctionId: string
  filename: string
}

export type ArtifactGetSBOMFromExecutionIdProps = Omit<
  GetProps<
    void,
    | ArtifactGetSBOMFromExecutionIDBadRequestResponseBody
    | ArtifactGetSBOMFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetSBOMFromExecutionIDForbiddenResponseBody
    | ArtifactGetSBOMFromExecutionIDNotFoundResponseBody
    | ArtifactGetSBOMFromExecutionIDInternalServerResponseBody
    | ArtifactGetSBOMFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetSBOMFromExecutionIdPathParams
  >,
  'path'
> &
  ArtifactGetSBOMFromExecutionIdPathParams

/**
 * getSBOMFromExecutionId artifact
 *
 * get the SBOM by passing the step execution id and the artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactGetSBOMFromExecutionId = ({
  artifactId,
  stepExeuctionId,
  filename,
  ...props
}: ArtifactGetSBOMFromExecutionIdProps) => (
  <Get<
    void,
    | ArtifactGetSBOMFromExecutionIDBadRequestResponseBody
    | ArtifactGetSBOMFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetSBOMFromExecutionIDForbiddenResponseBody
    | ArtifactGetSBOMFromExecutionIDNotFoundResponseBody
    | ArtifactGetSBOMFromExecutionIDInternalServerResponseBody
    | ArtifactGetSBOMFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetSBOMFromExecutionIdPathParams
  >
    path={`/api/v1/artifacts/${artifactId}/stepExecutions/${stepExeuctionId}/sbom/${filename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetSBOMFromExecutionIdProps = Omit<
  UseGetProps<
    void,
    | ArtifactGetSBOMFromExecutionIDBadRequestResponseBody
    | ArtifactGetSBOMFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetSBOMFromExecutionIDForbiddenResponseBody
    | ArtifactGetSBOMFromExecutionIDNotFoundResponseBody
    | ArtifactGetSBOMFromExecutionIDInternalServerResponseBody
    | ArtifactGetSBOMFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetSBOMFromExecutionIdPathParams
  >,
  'path'
> &
  ArtifactGetSBOMFromExecutionIdPathParams

/**
 * getSBOMFromExecutionId artifact
 *
 * get the SBOM by passing the step execution id and the artifact id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactGetSBOMFromExecutionId = ({
  artifactId,
  stepExeuctionId,
  filename,
  ...props
}: UseArtifactGetSBOMFromExecutionIdProps) =>
  useGet<
    void,
    | ArtifactGetSBOMFromExecutionIDBadRequestResponseBody
    | ArtifactGetSBOMFromExecutionIDUnauthorizedResponseBody
    | ArtifactGetSBOMFromExecutionIDForbiddenResponseBody
    | ArtifactGetSBOMFromExecutionIDNotFoundResponseBody
    | ArtifactGetSBOMFromExecutionIDInternalServerResponseBody
    | ArtifactGetSBOMFromExecutionIDBadGatewayResponseBody,
    void,
    ArtifactGetSBOMFromExecutionIdPathParams
  >(
    (paramsInPath: ArtifactGetSBOMFromExecutionIdPathParams) =>
      `/api/v1/artifacts/${paramsInPath.artifactId}/stepExecutions/${paramsInPath.stepExeuctionId}/sbom/${paramsInPath.filename}`,
    { base: getConfig('ssca'), pathParams: { artifactId, stepExeuctionId, filename }, ...props }
  )

export interface ArtifactGetUniqueArtifactPathParams {
  stepExecutionId: string
  stageId: string
  stepId: string
}

export type ArtifactGetUniqueArtifactProps = Omit<
  GetProps<
    ArtifactGetUniqueArtifactResponseBody,
    | ArtifactGetUniqueArtifactBadRequestResponseBody
    | ArtifactGetUniqueArtifactUnauthorizedResponseBody
    | ArtifactGetUniqueArtifactForbiddenResponseBody
    | ArtifactGetUniqueArtifactNotFoundResponseBody
    | ArtifactGetUniqueArtifactInternalServerResponseBody
    | ArtifactGetUniqueArtifactBadGatewayResponseBody,
    void,
    ArtifactGetUniqueArtifactPathParams
  >,
  'path'
> &
  ArtifactGetUniqueArtifactPathParams

/**
 * get a unique by passing an artifact id and other exeuction details
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const ArtifactGetUniqueArtifact = ({
  stepExecutionId,
  stageId,
  stepId,
  ...props
}: ArtifactGetUniqueArtifactProps) => (
  <Get<
    ArtifactGetUniqueArtifactResponseBody,
    | ArtifactGetUniqueArtifactBadRequestResponseBody
    | ArtifactGetUniqueArtifactUnauthorizedResponseBody
    | ArtifactGetUniqueArtifactForbiddenResponseBody
    | ArtifactGetUniqueArtifactNotFoundResponseBody
    | ArtifactGetUniqueArtifactInternalServerResponseBody
    | ArtifactGetUniqueArtifactBadGatewayResponseBody,
    void,
    ArtifactGetUniqueArtifactPathParams
  >
    path={`/api/v1/artifacts/${stepExecutionId}/${stageId}/${stepId}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseArtifactGetUniqueArtifactProps = Omit<
  UseGetProps<
    ArtifactGetUniqueArtifactResponseBody,
    | ArtifactGetUniqueArtifactBadRequestResponseBody
    | ArtifactGetUniqueArtifactUnauthorizedResponseBody
    | ArtifactGetUniqueArtifactForbiddenResponseBody
    | ArtifactGetUniqueArtifactNotFoundResponseBody
    | ArtifactGetUniqueArtifactInternalServerResponseBody
    | ArtifactGetUniqueArtifactBadGatewayResponseBody,
    void,
    ArtifactGetUniqueArtifactPathParams
  >,
  'path'
> &
  ArtifactGetUniqueArtifactPathParams

/**
 * get a unique by passing an artifact id and other exeuction details
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useArtifactGetUniqueArtifact = ({
  stepExecutionId,
  stageId,
  stepId,
  ...props
}: UseArtifactGetUniqueArtifactProps) =>
  useGet<
    ArtifactGetUniqueArtifactResponseBody,
    | ArtifactGetUniqueArtifactBadRequestResponseBody
    | ArtifactGetUniqueArtifactUnauthorizedResponseBody
    | ArtifactGetUniqueArtifactForbiddenResponseBody
    | ArtifactGetUniqueArtifactNotFoundResponseBody
    | ArtifactGetUniqueArtifactInternalServerResponseBody
    | ArtifactGetUniqueArtifactBadGatewayResponseBody,
    void,
    ArtifactGetUniqueArtifactPathParams
  >(
    (paramsInPath: ArtifactGetUniqueArtifactPathParams) =>
      `/api/v1/artifacts/${paramsInPath.stepExecutionId}/${paramsInPath.stageId}/${paramsInPath.stepId}`,
    { base: getConfig('ssca'), pathParams: { stepExecutionId, stageId, stepId }, ...props }
  )

export interface SbomprocessorEnforcesbomQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SbomprocessorEnforcesbomProps = Omit<
  MutateProps<
    SbomprocessorEnforcesbomResponseBody,
    | SbomprocessorEnforcesbomBadRequestResponseBody
    | SbomprocessorEnforcesbomUnauthorizedResponseBody
    | SbomprocessorEnforcesbomForbiddenResponseBody
    | SbomprocessorEnforcesbomNotFoundResponseBody
    | SbomprocessorEnforcesbomInternalServerResponseBody
    | SbomprocessorEnforcesbomBadGatewayResponseBody,
    SbomprocessorEnforcesbomQueryParams,
    SbomprocessorEnforcesbomRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * enforce an sbom
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const SbomprocessorEnforcesbom = (props: SbomprocessorEnforcesbomProps) => (
  <Mutate<
    SbomprocessorEnforcesbomResponseBody,
    | SbomprocessorEnforcesbomBadRequestResponseBody
    | SbomprocessorEnforcesbomUnauthorizedResponseBody
    | SbomprocessorEnforcesbomForbiddenResponseBody
    | SbomprocessorEnforcesbomNotFoundResponseBody
    | SbomprocessorEnforcesbomInternalServerResponseBody
    | SbomprocessorEnforcesbomBadGatewayResponseBody,
    SbomprocessorEnforcesbomQueryParams,
    SbomprocessorEnforcesbomRequestBody,
    void
  >
    verb="POST"
    path={`/api/v1/sbom/enforcement`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSbomprocessorEnforcesbomProps = Omit<
  UseMutateProps<
    SbomprocessorEnforcesbomResponseBody,
    | SbomprocessorEnforcesbomBadRequestResponseBody
    | SbomprocessorEnforcesbomUnauthorizedResponseBody
    | SbomprocessorEnforcesbomForbiddenResponseBody
    | SbomprocessorEnforcesbomNotFoundResponseBody
    | SbomprocessorEnforcesbomInternalServerResponseBody
    | SbomprocessorEnforcesbomBadGatewayResponseBody,
    SbomprocessorEnforcesbomQueryParams,
    SbomprocessorEnforcesbomRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * enforce an sbom
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useSbomprocessorEnforcesbom = (props: UseSbomprocessorEnforcesbomProps) =>
  useMutate<
    SbomprocessorEnforcesbomResponseBody,
    | SbomprocessorEnforcesbomBadRequestResponseBody
    | SbomprocessorEnforcesbomUnauthorizedResponseBody
    | SbomprocessorEnforcesbomForbiddenResponseBody
    | SbomprocessorEnforcesbomNotFoundResponseBody
    | SbomprocessorEnforcesbomInternalServerResponseBody
    | SbomprocessorEnforcesbomBadGatewayResponseBody,
    SbomprocessorEnforcesbomQueryParams,
    SbomprocessorEnforcesbomRequestBody,
    void
  >('POST', `/api/v1/sbom/enforcement`, { base: getConfig('ssca'), ...props })

export interface EnforcementGetEnforcementResultsByIdQueryParams {
  /**
   * Page number to fetch (starting from 0)
   */
  page?: number
  /**
   * Number of results per page
   */
  pageSize?: number
  searchTerm?: string
  sort?: string
  order?: string
}

export interface EnforcementGetEnforcementResultsByIdPathParams {
  /**
   * ID of the enforcement to fetch
   */
  enforcementId: string
}

export type EnforcementGetEnforcementResultsByIdProps = Omit<
  GetProps<
    EnforcementGetEnforcementResultsByIDResponseBody,
    | EnforcementGetEnforcementResultsByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultsByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultsByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultsByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultsByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultsByIDBadGatewayResponseBody,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultsByIdPathParams

/**
 * get enforcement by passing an enforcement id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const EnforcementGetEnforcementResultsById = ({
  enforcementId,
  ...props
}: EnforcementGetEnforcementResultsByIdProps) => (
  <Get<
    EnforcementGetEnforcementResultsByIDResponseBody,
    | EnforcementGetEnforcementResultsByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultsByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultsByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultsByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultsByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultsByIDBadGatewayResponseBody,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >
    path={`/api/v1/sbom/enforcement/${enforcementId}/`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseEnforcementGetEnforcementResultsByIdProps = Omit<
  UseGetProps<
    EnforcementGetEnforcementResultsByIDResponseBody,
    | EnforcementGetEnforcementResultsByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultsByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultsByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultsByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultsByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultsByIDBadGatewayResponseBody,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultsByIdPathParams

/**
 * get enforcement by passing an enforcement id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useEnforcementGetEnforcementResultsById = ({
  enforcementId,
  ...props
}: UseEnforcementGetEnforcementResultsByIdProps) =>
  useGet<
    EnforcementGetEnforcementResultsByIDResponseBody,
    | EnforcementGetEnforcementResultsByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultsByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultsByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultsByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultsByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultsByIDBadGatewayResponseBody,
    EnforcementGetEnforcementResultsByIdQueryParams,
    EnforcementGetEnforcementResultsByIdPathParams
  >(
    (paramsInPath: EnforcementGetEnforcementResultsByIdPathParams) =>
      `/api/v1/sbom/enforcement/${paramsInPath.enforcementId}/`,
    { base: getConfig('ssca'), pathParams: { enforcementId }, ...props }
  )

export interface EnforcementGetEnforcementResultSummaryByIdPathParams {
  /**
   * ID of the enforcement to fetch
   */
  enforcementId: string
}

export type EnforcementGetEnforcementResultSummaryByIdProps = Omit<
  GetProps<
    EnforcementGetEnforcementResultSummaryByIDResponseBody,
    | EnforcementGetEnforcementResultSummaryByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultSummaryByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultSummaryByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultSummaryByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultSummaryByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultSummaryByIDBadGatewayResponseBody,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultSummaryByIdPathParams

/**
 * get enforcement by passing an enforcement id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const EnforcementGetEnforcementResultSummaryById = ({
  enforcementId,
  ...props
}: EnforcementGetEnforcementResultSummaryByIdProps) => (
  <Get<
    EnforcementGetEnforcementResultSummaryByIDResponseBody,
    | EnforcementGetEnforcementResultSummaryByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultSummaryByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultSummaryByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultSummaryByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultSummaryByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultSummaryByIDBadGatewayResponseBody,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >
    path={`/api/v1/sbom/enforcement/${enforcementId}/summary`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseEnforcementGetEnforcementResultSummaryByIdProps = Omit<
  UseGetProps<
    EnforcementGetEnforcementResultSummaryByIDResponseBody,
    | EnforcementGetEnforcementResultSummaryByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultSummaryByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultSummaryByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultSummaryByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultSummaryByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultSummaryByIDBadGatewayResponseBody,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >,
  'path'
> &
  EnforcementGetEnforcementResultSummaryByIdPathParams

/**
 * get enforcement by passing an enforcement id
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useEnforcementGetEnforcementResultSummaryById = ({
  enforcementId,
  ...props
}: UseEnforcementGetEnforcementResultSummaryByIdProps) =>
  useGet<
    EnforcementGetEnforcementResultSummaryByIDResponseBody,
    | EnforcementGetEnforcementResultSummaryByIDBadRequestResponseBody
    | EnforcementGetEnforcementResultSummaryByIDUnauthorizedResponseBody
    | EnforcementGetEnforcementResultSummaryByIDForbiddenResponseBody
    | EnforcementGetEnforcementResultSummaryByIDNotFoundResponseBody
    | EnforcementGetEnforcementResultSummaryByIDInternalServerResponseBody
    | EnforcementGetEnforcementResultSummaryByIDBadGatewayResponseBody,
    void,
    EnforcementGetEnforcementResultSummaryByIdPathParams
  >(
    (paramsInPath: EnforcementGetEnforcementResultSummaryByIdPathParams) =>
      `/api/v1/sbom/enforcement/${paramsInPath.enforcementId}/summary`,
    { base: getConfig('ssca'), pathParams: { enforcementId }, ...props }
  )

export interface SbomprocessorProcesssbomQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SbomprocessorProcesssbomProps = Omit<
  MutateProps<
    SbomprocessorProcesssbomResponseBody,
    | SbomprocessorProcesssbomBadRequestResponseBody
    | SbomprocessorProcesssbomUnauthorizedResponseBody
    | SbomprocessorProcesssbomForbiddenResponseBody
    | SbomprocessorProcesssbomNotFoundResponseBody
    | SbomprocessorProcesssbomInternalServerResponseBody
    | SbomprocessorProcesssbomBadGatewayResponseBody,
    SbomprocessorProcesssbomQueryParams,
    SbomprocessorProcesssbomRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * process & inject sbom
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const SbomprocessorProcesssbom = (props: SbomprocessorProcesssbomProps) => (
  <Mutate<
    SbomprocessorProcesssbomResponseBody,
    | SbomprocessorProcesssbomBadRequestResponseBody
    | SbomprocessorProcesssbomUnauthorizedResponseBody
    | SbomprocessorProcesssbomForbiddenResponseBody
    | SbomprocessorProcesssbomNotFoundResponseBody
    | SbomprocessorProcesssbomInternalServerResponseBody
    | SbomprocessorProcesssbomBadGatewayResponseBody,
    SbomprocessorProcesssbomQueryParams,
    SbomprocessorProcesssbomRequestBody,
    void
  >
    verb="POST"
    path={`/api/v1/sbom/process`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSbomprocessorProcesssbomProps = Omit<
  UseMutateProps<
    SbomprocessorProcesssbomResponseBody,
    | SbomprocessorProcesssbomBadRequestResponseBody
    | SbomprocessorProcesssbomUnauthorizedResponseBody
    | SbomprocessorProcesssbomForbiddenResponseBody
    | SbomprocessorProcesssbomNotFoundResponseBody
    | SbomprocessorProcesssbomInternalServerResponseBody
    | SbomprocessorProcesssbomBadGatewayResponseBody,
    SbomprocessorProcesssbomQueryParams,
    SbomprocessorProcesssbomRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * process & inject sbom
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useSbomprocessorProcesssbom = (props: UseSbomprocessorProcesssbomProps) =>
  useMutate<
    SbomprocessorProcesssbomResponseBody,
    | SbomprocessorProcesssbomBadRequestResponseBody
    | SbomprocessorProcesssbomUnauthorizedResponseBody
    | SbomprocessorProcesssbomForbiddenResponseBody
    | SbomprocessorProcesssbomNotFoundResponseBody
    | SbomprocessorProcesssbomInternalServerResponseBody
    | SbomprocessorProcesssbomBadGatewayResponseBody,
    SbomprocessorProcesssbomQueryParams,
    SbomprocessorProcesssbomRequestBody,
    void
  >('POST', `/api/v1/sbom/process`, { base: getConfig('ssca'), ...props })

export interface SearchFindanyQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type SearchFindanyProps = Omit<
  MutateProps<
    SearchFindanyResponseBody,
    | SearchFindanyBadRequestResponseBody
    | SearchFindanyUnauthorizedResponseBody
    | SearchFindanyForbiddenResponseBody
    | SearchFindanyNotFoundResponseBody
    | SearchFindanyInternalServerResponseBody
    | SearchFindanyBadGatewayResponseBody,
    SearchFindanyQueryParams,
    SearchFindanyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Find a package references by name
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const SearchFindany = (props: SearchFindanyProps) => (
  <Mutate<
    SearchFindanyResponseBody,
    | SearchFindanyBadRequestResponseBody
    | SearchFindanyUnauthorizedResponseBody
    | SearchFindanyForbiddenResponseBody
    | SearchFindanyNotFoundResponseBody
    | SearchFindanyInternalServerResponseBody
    | SearchFindanyBadGatewayResponseBody,
    SearchFindanyQueryParams,
    SearchFindanyRequestBody,
    void
  >
    verb="POST"
    path={`/api/v1/search/findany`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSearchFindanyProps = Omit<
  UseMutateProps<
    SearchFindanyResponseBody,
    | SearchFindanyBadRequestResponseBody
    | SearchFindanyUnauthorizedResponseBody
    | SearchFindanyForbiddenResponseBody
    | SearchFindanyNotFoundResponseBody
    | SearchFindanyInternalServerResponseBody
    | SearchFindanyBadGatewayResponseBody,
    SearchFindanyQueryParams,
    SearchFindanyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Find a package references by name
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useSearchFindany = (props: UseSearchFindanyProps) =>
  useMutate<
    SearchFindanyResponseBody,
    | SearchFindanyBadRequestResponseBody
    | SearchFindanyUnauthorizedResponseBody
    | SearchFindanyForbiddenResponseBody
    | SearchFindanyNotFoundResponseBody
    | SearchFindanyInternalServerResponseBody
    | SearchFindanyBadGatewayResponseBody,
    SearchFindanyQueryParams,
    SearchFindanyRequestBody,
    void
  >('POST', `/api/v1/search/findany`, { base: getConfig('ssca'), ...props })

export interface SearchFindQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export interface SearchFindPathParams {
  /**
   * Source ID associated with this connection source
   */
  packagename: string
}

export type SearchFindProps = Omit<
  GetProps<
    SearchFindResponseBody,
    | SearchFindBadRequestResponseBody
    | SearchFindUnauthorizedResponseBody
    | SearchFindForbiddenResponseBody
    | SearchFindNotFoundResponseBody
    | SearchFindInternalServerResponseBody
    | SearchFindBadGatewayResponseBody,
    SearchFindQueryParams,
    SearchFindPathParams
  >,
  'path'
> &
  SearchFindPathParams

/**
 * Find a package references by name
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const SearchFind = ({ packagename, ...props }: SearchFindProps) => (
  <Get<
    SearchFindResponseBody,
    | SearchFindBadRequestResponseBody
    | SearchFindUnauthorizedResponseBody
    | SearchFindForbiddenResponseBody
    | SearchFindNotFoundResponseBody
    | SearchFindInternalServerResponseBody
    | SearchFindBadGatewayResponseBody,
    SearchFindQueryParams,
    SearchFindPathParams
  >
    path={`/api/v1/search/${packagename}`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSearchFindProps = Omit<
  UseGetProps<
    SearchFindResponseBody,
    | SearchFindBadRequestResponseBody
    | SearchFindUnauthorizedResponseBody
    | SearchFindForbiddenResponseBody
    | SearchFindNotFoundResponseBody
    | SearchFindInternalServerResponseBody
    | SearchFindBadGatewayResponseBody,
    SearchFindQueryParams,
    SearchFindPathParams
  >,
  'path'
> &
  SearchFindPathParams

/**
 * Find a package references by name
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useSearchFind = ({ packagename, ...props }: UseSearchFindProps) =>
  useGet<
    SearchFindResponseBody,
    | SearchFindBadRequestResponseBody
    | SearchFindUnauthorizedResponseBody
    | SearchFindForbiddenResponseBody
    | SearchFindNotFoundResponseBody
    | SearchFindInternalServerResponseBody
    | SearchFindBadGatewayResponseBody,
    SearchFindQueryParams,
    SearchFindPathParams
  >((paramsInPath: SearchFindPathParams) => `/api/v1/search/${paramsInPath.packagename}`, {
    base: getConfig('ssca'),
    pathParams: { packagename },
    ...props
  })

export type SystemHealthProps = Omit<
  GetProps<void, SystemHealthInternalServerResponseBody | SystemHealthBadGatewayResponseBody, void, void>,
  'path'
>

/**
 * Check service health
 */
export const SystemHealth = (props: SystemHealthProps) => (
  <Get<void, SystemHealthInternalServerResponseBody | SystemHealthBadGatewayResponseBody, void, void>
    path={`/api/v1/system/health`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSystemHealthProps = Omit<
  UseGetProps<void, SystemHealthInternalServerResponseBody | SystemHealthBadGatewayResponseBody, void, void>,
  'path'
>

/**
 * Check service health
 */
export const useSystemHealth = (props: UseSystemHealthProps) =>
  useGet<void, SystemHealthInternalServerResponseBody | SystemHealthBadGatewayResponseBody, void, void>(
    `/api/v1/system/health`,
    { base: getConfig('ssca'), ...props }
  )

export type SystemVersionProps = Omit<
  GetProps<
    SystemVersionResponseBody,
    SystemVersionInternalServerResponseBody | SystemVersionBadGatewayResponseBody,
    void,
    void
  >,
  'path'
>

/**
 * Check service version
 */
export const SystemVersion = (props: SystemVersionProps) => (
  <Get<
    SystemVersionResponseBody,
    SystemVersionInternalServerResponseBody | SystemVersionBadGatewayResponseBody,
    void,
    void
  >
    path={`/api/v1/system/version`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseSystemVersionProps = Omit<
  UseGetProps<
    SystemVersionResponseBody,
    SystemVersionInternalServerResponseBody | SystemVersionBadGatewayResponseBody,
    void,
    void
  >,
  'path'
>

/**
 * Check service version
 */
export const useSystemVersion = (props: UseSystemVersionProps) =>
  useGet<
    SystemVersionResponseBody,
    SystemVersionInternalServerResponseBody | SystemVersionBadGatewayResponseBody,
    void,
    void
  >(`/api/v1/system/version`, { base: getConfig('ssca'), ...props })

export interface IssueTokenIssueTokenQueryParams {
  /**
   * Harness account ID
   */
  accountIdentifier: string
  /**
   * Harness organization ID
   */
  orgIdentifier: string
  /**
   * Harness project ID
   */
  projectIdentifier: string
}

export type IssueTokenIssueTokenProps = Omit<
  GetProps<
    IssueTokenIssueTokenOKResponseBody,
    IssueTokenIssueTokenUnauthorizedResponseBody,
    IssueTokenIssueTokenQueryParams,
    void
  >,
  'path'
>

/**
 * Issue a cross-service token
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const IssueTokenIssueToken = (props: IssueTokenIssueTokenProps) => (
  <Get<
    IssueTokenIssueTokenOKResponseBody,
    IssueTokenIssueTokenUnauthorizedResponseBody,
    IssueTokenIssueTokenQueryParams,
    void
  >
    path={`/api/v1/token`}
    base={getConfig('ssca')}
    {...props}
  />
)

export type UseIssueTokenIssueTokenProps = Omit<
  UseGetProps<
    IssueTokenIssueTokenOKResponseBody,
    IssueTokenIssueTokenUnauthorizedResponseBody,
    IssueTokenIssueTokenQueryParams,
    void
  >,
  'path'
>

/**
 * Issue a cross-service token
 *
 * **Required security scopes for jwt**:
 *   * `core_project_view`
 */
export const useIssueTokenIssueToken = (props: UseIssueTokenIssueTokenProps) =>
  useGet<
    IssueTokenIssueTokenOKResponseBody,
    IssueTokenIssueTokenUnauthorizedResponseBody,
    IssueTokenIssueTokenQueryParams,
    void
  >(`/api/v1/token`, { base: getConfig('ssca'), ...props })
