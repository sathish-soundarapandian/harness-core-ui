/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '1.0'
export interface ActiveServiceDTO {
  accountIdentifier?: string
  identifier: string
  instanceCount?: number
  lastDeployed?: number
  licensesConsumed?: number
  module?: string
  name?: string
  orgIdentifier?: string
  orgName?: string
  projectIdentifier?: string
  projectName?: string
  timestamp?: number
}

export interface ActiveServicesFilterParams {
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
}

export interface AlertThreshold {
  alertsSent?: number
  basedOn?: 'ACTUAL_COST' | 'FORECASTED_COST'
  crossedAt?: number
  emailAddresses?: string[]
  percentage?: number
  slackWebhooks?: string[]
  userGroupIds?: string[]
}

export interface AnomalyData {
  actualAmount?: number
  anomalousSpend?: number
  anomalousSpendPercentage?: number
  anomalyRelativeTime?: string
  anomalyScore?: number
  cloudProvider?: string
  comment?: string
  details?: string
  entity?: EntityInfo
  expectedAmount?: number
  id?: string
  perspectiveId?: string
  perspectiveName?: string
  resourceInfo?: string
  resourceName?: string
  status?: string
  statusRelativeTime?: string
  time?: number
  userFeedback?: 'TRUE_ANOMALY' | 'FALSE_ANOMALY' | 'NOT_RESPONDED'
}

export interface AnomalyFeedbackDTO {
  feedback?: 'TRUE_ANOMALY' | 'FALSE_ANOMALY' | 'NOT_RESPONDED'
}

export interface AnomalyFilterProperties {
  aggregations?: CCMAggregation[]
  awsAccounts?: string[]
  awsServices?: string[]
  awsUsageTypes?: string[]
  azureMeterCategories?: string[]
  azureResourceGroups?: string[]
  azureSubscriptionGuids?: string[]
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
  gcpProducts?: string[]
  gcpProjects?: string[]
  gcpSKUDescriptions?: string[]
  groupBy?: CCMGroupBy[]
  k8sClusterNames?: string[]
  k8sNamespaces?: string[]
  k8sWorkloadNames?: string[]
  limit?: number
  minActualAmount?: number
  minAnomalousSpend?: number
  offset?: number
  orderBy?: CCMSort[]
  searchText?: string[]
  tags?: {
    [key: string]: string
  }
  timeFilters?: CCMTimeFilter[]
}

export interface AnomalySummary {
  actualCost?: number
  anomalousCost?: number
  costImpact?: number
  count?: number
  description?: string
  expectedCost?: number
  name?: string
}

export interface AnomalyWidgetData {
  widgetData?: AnomalySummary[]
  widgetDescription?: 'TOP_N_ANOMALIES' | 'TOTAL_COST_IMPACT' | 'ANOMALIES_BY_CLOUD_PROVIDERS' | 'ANOMALIES_BY_STATUS'
}

export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
  accountname: string
  authType?: 'UsernamePassword' | 'ApiClientToken'
  clientId?: string
  clientSecretRef?: string
  controllerUrl: string
  delegateSelectors?: string[]
  passwordRef?: string
  username?: string
}

export type ApplicationBudgetScope = BudgetScope & {
  applicationIds?: string[]
  environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
}

export interface ArtifactoryAuthCredentials {
  [key: string]: any
}

export interface ArtifactoryAuthentication {
  spec?: ArtifactoryAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type ArtifactoryConnector = ConnectorConfigDTO & {
  artifactoryServerUrl: string
  auth?: ArtifactoryAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface AwsAccountConnectionDetail {
  cloudFormationTemplateLink?: string
  externalId?: string
  harnessAccountId?: string
  stackLaunchTemplateLink?: string
}

export interface AwsCodeCommitAuthenticationDTO {
  spec: AwsCodeCommitCredentialsDTO
  type: 'HTTPS'
}

export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
  authentication: AwsCodeCommitAuthenticationDTO
  delegateSelectors?: string[]
  type: 'Repo' | 'Region'
  url: string
}

export interface AwsCodeCommitCredentialsDTO {
  [key: string]: any
}

export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
  spec: AwsCodeCommitHttpsCredentialsSpecDTO
  type: 'AWSCredentials'
}

export interface AwsCodeCommitHttpsCredentialsSpecDTO {
  [key: string]: any
}

export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsConnector = ConnectorConfigDTO & {
  awsSdkClientBackOffStrategyOverride?: AwsSdkClientBackoffStrategy
  credential: AwsCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface AwsCredential {
  crossAccountAccess?: CrossAccountAccess
  region?: string
  spec?: AwsCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig' | 'Irsa'
}

export interface AwsCredentialSpec {
  [key: string]: any
}

export interface AwsCurAttributes {
  region?: string
  reportName: string
  s3BucketName: string
  s3Prefix?: string
}

export type AwsEqualJitterBackoffStrategy = AwsSdkClientBackOffStrategySpec & {
  baseDelay?: number
  maxBackoffTime?: number
  retryCount?: number
}

export type AwsFixedDelayBackoffStrategy = AwsSdkClientBackOffStrategySpec & {
  fixedBackoff?: number
  retryCount?: number
}

export type AwsFullJitterBackoffStrategy = AwsSdkClientBackOffStrategySpec & {
  baseDelay?: number
  maxBackoffTime?: number
  retryCount?: number
}

export interface AwsKmsConnectorCredential {
  spec?: AwsKmsCredentialSpec
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
}

export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
  credential: AwsKmsConnectorCredential
  default?: boolean
  delegateSelectors?: string[]
  kmsArn: string
  region: string
}

export interface AwsKmsCredentialSpec {
  [key: string]: any
}

export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
  delegateSelectors: string[]
}

export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
  assumeStsRoleDuration?: number
  delegateSelectors: string[]
  externalName?: string
  roleArn: string
}

export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
  accessKey: string
  secretKey: string
}

export type AwsManualConfigSpec = AwsCredentialSpec & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsSMCredentialSpecAssumeIAM = AwsSecretManagerCredentialSpec & { [key: string]: any }

export type AwsSMCredentialSpecAssumeSTS = AwsSecretManagerCredentialSpec & {
  assumeStsRoleDuration?: number
  externalId?: string
  roleArn: string
}

export type AwsSMCredentialSpecManualConfig = AwsSecretManagerCredentialSpec & {
  accessKey: string
  secretKey: string
}

export interface AwsSdkClientBackOffStrategySpec {
  [key: string]: any
}

export interface AwsSdkClientBackoffStrategy {
  spec?: AwsSdkClientBackOffStrategySpec
  type: 'FixedDelayBackoffStrategy' | 'EqualJitterBackoffStrategy' | 'FullJitterBackoffStrategy'
}

export interface AwsSecretManagerCredential {
  spec?: AwsSecretManagerCredentialSpec
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
}

export interface AwsSecretManagerCredentialSpec {
  [key: string]: any
}

export type AwsSecretManagerDTO = ConnectorConfigDTO & {
  credential: AwsSecretManagerCredential
  default?: boolean
  delegateSelectors?: string[]
  region: string
  secretNamePrefix?: string
}

export interface AzureArtifactsAuthentication {
  spec: AzureArtifactsHttpCredentials
}

export type AzureArtifactsConnector = ConnectorConfigDTO & {
  auth: AzureArtifactsAuthentication
  azureArtifactsUrl: string
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface AzureArtifactsHttpCredentials {
  spec: AzureArtifactsUsernameToken
  type: 'PersonalAccessToken'
}

export interface AzureArtifactsUsernameToken {
  tokenRef: string
}

export interface AzureAuthCredentialDTO {
  [key: string]: any
}

export interface AzureAuthDTO {
  spec: AzureAuthCredentialDTO
  type: 'Secret' | 'Certificate'
}

export type AzureClientKeyCertDTO = AzureAuthCredentialDTO & {
  certificateRef: string
}

export type AzureClientSecretKeyDTO = AzureAuthCredentialDTO & {
  secretRef: string
}

export type AzureConnector = ConnectorConfigDTO & {
  azureEnvironmentType: 'AZURE' | 'AZURE_US_GOVERNMENT'
  credential: AzureCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface AzureCredential {
  spec?: AzureCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface AzureCredentialSpec {
  [key: string]: any
}

export type AzureInheritFromDelegateDetails = AzureCredentialSpec & {
  auth: AzureMSIAuth
}

export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
  azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
  azureManagedIdentityType?: 'SystemAssignedManagedIdentity' | 'UserAssignedManagedIdentity'
  clientId?: string
  default?: boolean
  delegateSelectors?: string[]
  managedClientId?: string
  secretKey?: string
  subscription: string
  tenantId?: string
  useManagedIdentity?: boolean
  vaultName: string
}

export interface AzureMSIAuth {
  [key: string]: any
}

export type AzureManualDetails = AzureCredentialSpec & {
  applicationId: string
  auth: AzureAuthDTO
  tenantId: string
}

export interface AzureRepoApiAccess {
  spec?: AzureRepoApiAccessSpecDTO
  type: 'Token'
}

export interface AzureRepoApiAccessSpecDTO {
  [key: string]: any
}

export interface AzureRepoAuthentication {
  spec: AzureRepoCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type AzureRepoConnector = ConnectorConfigDTO & {
  apiAccess?: AzureRepoApiAccess
  authentication: AzureRepoAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Project' | 'Repo'
  url: string
  validationRepo?: string
}

export interface AzureRepoCredentialsDTO {
  [key: string]: any
}

export type AzureRepoHttpCredentials = AzureRepoCredentialsDTO & {
  spec: AzureRepoHttpCredentialsSpecDTO
  type: 'UsernameToken'
}

export interface AzureRepoHttpCredentialsSpecDTO {
  [key: string]: any
}

export type AzureRepoSshCredentials = AzureRepoCredentialsDTO & {
  sshKeyRef: string
}

export type AzureRepoTokenSpec = AzureRepoApiAccessSpecDTO & {
  tokenRef: string
}

export type AzureRepoUsernameToken = AzureRepoHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export type AzureSystemAssignedMSIAuth = AzureAuthCredentialDTO & { [key: string]: any }

export type AzureUserAssignedMSIAuth = AzureAuthCredentialDTO & {
  clientId: string
}

export interface BIDashboardSummary {
  cloudProvider?: string
  dashboardId?: string
  dashboardName?: string
  description?: string
  redirectionURL?: string
  serviceType?: string
}

export interface BambooAuthCredentialsDTO {
  [key: string]: any
}

export interface BambooAuthenticationDTO {
  spec?: BambooAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous' | 'Bearer Token(HTTP Header)'
}

export type BambooConnectorDTO = ConnectorConfigDTO & {
  auth?: BambooAuthenticationDTO
  bambooUrl: string
  delegateSelectors?: string[]
}

export type BambooUserNamePasswordDTO = BambooAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface BillingExportSpec {
  containerName: string
  directoryName: string
  reportName: string
  storageAccountName: string
  subscriptionId: string
}

export interface BitbucketApiAccess {
  spec: BitbucketApiAccessSpecDTO
  type: 'UsernameToken'
}

export interface BitbucketApiAccessSpecDTO {
  [key: string]: any
}

export interface BitbucketAuthentication {
  spec: BitbucketCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type BitbucketConnector = ConnectorConfigDTO & {
  apiAccess?: BitbucketApiAccess
  authentication: BitbucketAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Account' | 'Repo' | 'Project'
  url: string
  validationRepo?: string
}

export interface BitbucketCredentialsDTO {
  [key: string]: any
}

export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
  spec: BitbucketHttpCredentialsSpecDTO
  type: 'UsernamePassword'
}

export interface BitbucketHttpCredentialsSpecDTO {
  [key: string]: any
}

export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
  sshKeyRef: string
}

export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface Budget {
  accountId?: string
  actualCost?: number
  alertThresholds?: AlertThreshold[]
  budgetAmount?: number
  budgetHistory?: {
    [key: string]: BudgetCostData
  }
  budgetMonthlyBreakdown?: BudgetMonthlyBreakdown
  createdAt?: number
  disableCurrencyWarning?: boolean
  emailAddresses?: string[]
  endTime?: number
  forecastCost?: number
  growthRate?: number
  lastMonthCost?: number
  lastUpdatedAt?: number
  name?: string
  ngBudget?: boolean
  notifyOnSlack?: boolean
  parentBudgetGroupId?: string
  period?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
  scope?: BudgetScope
  startTime?: number
  type?: 'SPECIFIED_AMOUNT' | 'PREVIOUS_MONTH_SPEND' | 'PREVIOUS_PERIOD_SPEND'
  userGroupIds?: string[]
  uuid?: string
}

export interface BudgetCostData {
  actualCost?: number
  budgetVariance?: number
  budgetVariancePercentage?: number
  budgeted?: number
  endTime?: number
  forecastCost?: number
  time?: number
}

export interface BudgetData {
  costData?: BudgetCostData[]
  forecastCost?: number
}

export interface BudgetGroup {
  accountId?: string
  actualCost?: number
  alertThresholds?: AlertThreshold[]
  budgetGroupAmount?: number
  budgetGroupHistory?: {
    [key: string]: BudgetCostData
  }
  budgetGroupMonthlyBreakdown?: BudgetMonthlyBreakdown
  cascadeType?: 'EQUAL' | 'PROPORTIONAL' | 'NO_CASCADE'
  childEntities?: BudgetGroupChildEntityDTO[]
  createdAt?: number
  endTime?: number
  forecastCost?: number
  lastMonthCost?: number
  lastUpdatedAt?: number
  name?: string
  parentBudgetGroupId?: string
  period?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
  startTime?: number
  uuid?: string
}

export interface BudgetGroupChildEntityDTO {
  budgetGroup?: boolean
  id?: string
  proportion?: number
}

export interface BudgetMonthlyBreakdown {
  actualMonthlyCost?: number[]
  budgetBreakdown?: 'YEARLY' | 'MONTHLY'
  budgetMonthlyAmount?: ValueDataPoint[]
  forecastMonthlyCost?: number[]
  yearlyLastPeriodCost?: number[]
}

export interface BudgetScope {
  budgetScopeType?: string
  entityIds?: string[]
  entityNames?: string[]
}

export interface BudgetSummary {
  actualCost?: number
  actualCostAlerts?: number[]
  alertThresholds?: AlertThreshold[]
  budgetAmount?: number
  budgetGroup?: boolean
  budgetMonthlyBreakdown?: BudgetMonthlyBreakdown
  cascadeType?: 'EQUAL' | 'PROPORTIONAL' | 'NO_CASCADE'
  childEntities?: BudgetSummary[]
  childEntityProportions?: BudgetGroupChildEntityDTO[]
  disableCurrencyWarning?: boolean
  folderId?: string
  forecastCost?: number
  forecastCostAlerts?: number[]
  growthRate?: number
  id?: string
  name?: string
  parentId?: string
  period?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
  perspectiveId?: string
  perspectiveName?: string
  startTime?: number
  timeLeft?: number
  timeScope?: string
  timeUnit?: string
  type?: 'SPECIFIED_AMOUNT' | 'PREVIOUS_MONTH_SPEND' | 'PREVIOUS_PERIOD_SPEND'
}

export interface BusinessMapping {
  accountId?: string
  costTargets?: CostTarget[]
  createdAt?: number
  createdBy?: EmbeddedUser
  dataSources?: ('CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL')[]
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  sharedCosts?: SharedCost[]
  unallocatedCost?: UnallocatedCost
  uuid?: string
}

export interface BusinessMappingListDTO {
  businessMappings?: BusinessMapping[]
  totalCount?: number
}

export interface CCMAggregation {
  field?:
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
  operationType?: 'SUM' | 'MAX' | 'MIN' | 'AVG' | 'COUNT'
}

export interface CCMConnectorDetails {
  connectorValidationResult?: ConnectorValidationResult
  createdAt?: number
  name?: string
}

export interface CCMEcsEntity {
  launchType?: string
  service?: string
  taskId?: string
}

export interface CCMGroupBy {
  groupByField?:
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
}

export interface CCMJiraCreateDTO {
  connectorRef?: string
  fields?: {
    [key: string]: string
  }
  issueType?: string
  projectKey?: string
  recommendationId?: string
  resourceType?: 'WORKLOAD' | 'NODE_POOL' | 'ECS_SERVICE' | 'EC2_INSTANCE'
}

export interface CCMJiraDetails {
  connectorRef?: string
  jiraIssue?: JiraIssueNG
}

export interface CCMK8sEntity {
  namespace?: string
  selectedLabels?: K8sLabel[]
  workload?: string
}

export interface CCMNotificationChannel {
  channelUrls?: string[]
  notificationChannelType?: 'EMAIL' | 'SLACK' | 'PAGERDUTY' | 'MSTEAMS'
}

export interface CCMNotificationSetting {
  accountId?: string
  channels?: CCMNotificationChannel[]
  createdAt?: number
  createdBy?: EmbeddedUser
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  perspectiveId?: string
  uuid?: string
}

export interface CCMPerspectiveNotificationChannelsDTO {
  channels?: CCMNotificationChannel[]
  perspectiveId?: string
  perspectiveName?: string
}

export interface CCMRecommendationFilterProperties {
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
  k8sRecommendationFilterPropertiesDTO?: K8sRecommendationFilterPropertiesDTO
  limit?: number
  minCost?: number
  minSaving?: number
  offset?: number
  perspectiveFilters?: QLCEViewFilterWrapper[]
  tags?: {
    [key: string]: string
  }
}

export interface CCMSort {
  field?:
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
  order?: 'ASCENDING' | 'DESCENDING'
}

export interface CCMStringFilter {
  field?:
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
  operator?:
    | 'NOT_IN'
    | 'IN'
    | 'EQUALS'
    | 'NOT_NULL'
    | 'NULL'
    | 'LIKE'
    | 'GREATER_THAN'
    | 'LESS_THAN'
    | 'GREATER_THAN_EQUALS_TO'
    | 'LESS_THAN_EQUALS_TO'
    | 'AFTER'
    | 'BEFORE'
  values?: string[]
}

export interface CCMTimeFilter {
  operator?:
    | 'NOT_IN'
    | 'IN'
    | 'EQUALS'
    | 'NOT_NULL'
    | 'NULL'
    | 'LIKE'
    | 'GREATER_THAN'
    | 'LESS_THAN'
    | 'GREATER_THAN_EQUALS_TO'
    | 'LESS_THAN_EQUALS_TO'
    | 'AFTER'
    | 'BEFORE'
  timestamp?: number
}

export type CEAwsConnector = ConnectorConfigDTO & {
  awsAccountId?: string
  crossAccountAccess: CrossAccountAccess
  curAttributes?: AwsCurAttributes
  featuresEnabled?: (
    | 'BILLING'
    | 'OPTIMIZATION'
    | 'VISIBILITY'
    | 'GOVERNANCE'
    | 'COMMITMENT_ORCHESTRATOR'
    | 'CLUSTER_ORCHESTRATOR'
  )[]
  isAWSGovCloudAccount?: boolean
}

export type CEAzureConnector = ConnectorConfigDTO & {
  billingExportSpec?: BillingExportSpec
  featuresEnabled?: (
    | 'BILLING'
    | 'OPTIMIZATION'
    | 'VISIBILITY'
    | 'GOVERNANCE'
    | 'COMMITMENT_ORCHESTRATOR'
    | 'CLUSTER_ORCHESTRATOR'
  )[]
  subscriptionId: string
  tenantId: string
}

export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
  connectorRef: string
  featuresEnabled?: (
    | 'BILLING'
    | 'OPTIMIZATION'
    | 'VISIBILITY'
    | 'GOVERNANCE'
    | 'COMMITMENT_ORCHESTRATOR'
    | 'CLUSTER_ORCHESTRATOR'
  )[]
}

export interface CELicenseUsageDTO {
  accountIdentifier?: string
  activeSpend?: UsageDataDTO
  module?: string
  timestamp?: number
}

export interface CEReportSchedule {
  accountId?: string
  createdAt?: number
  createdBy?: EmbeddedUser
  description?: string
  enabled?: boolean
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  nextExecution?: string
  recipients?: string[]
  userCron?: string
  userCronTimeZone?: string
  uuid?: string
  viewsId: string[]
}

export interface CEView {
  accountId?: string
  createdAt?: number
  createdBy?: EmbeddedUser
  dataSources?: ('CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL')[]
  folderId?: string
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  totalCost?: number
  uuid?: string
  viewPreferences?: ViewPreferences
  viewRules?: ViewRule[]
  viewState?: 'DRAFT' | 'COMPLETED'
  viewTimeRange?: ViewTimeRange
  viewType?: 'SAMPLE' | 'CUSTOMER' | 'DEFAULT'
  viewVersion?: string
  viewVisualization?: ViewVisualization
}

export interface CEViewFolder {
  accountId?: string
  createdAt?: number
  createdBy?: EmbeddedUser
  description?: string
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  pinned?: boolean
  tags?: string[]
  uuid?: string
  viewType?: 'SAMPLE' | 'CUSTOMER' | 'DEFAULT'
}

export interface CcmK8sMetaDTO {
  ccmK8sConnectorId?: string[]
}

export interface CcmK8sMetaInfo {
  ccmk8sConnectorId?: string
  clusterId?: string
  clusterName?: string
  optimisation?: string[]
  visibility?: string[]
}

export interface CcmK8sMetaInfoResponseDTO {
  ccmK8sMeta?: CcmK8sMetaInfo[]
}

export interface CcmOverviewDTO {
  costPerDay?: TimeSeriesDataPoints[]
  recommendationsCount?: number
  totalCost?: number
  totalCostTrend?: number
}

export interface CloneRuleDTO {
  ruleClone?: RuleClone
}

export type ClusterBudgetScope = BudgetScope & {
  clusterIds?: string[]
}

export interface ClusterCostDetails {
  cluster?: string
  clusterId?: string
  clusterType?: string
  ecs?: CCMEcsEntity
  idleCost?: number
  k8s?: CCMK8sEntity
  totalCost?: number
  unallocatedCost?: number
}

export interface ClusterCostDetailsQueryParamsDTO {
  aggregations?: CCMAggregation[]
  filters?: CCMStringFilter[]
  groupBy?: (
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
  )[]
  limit?: number
  offset?: number
  selectedLabels?: string[]
  skipRoundOff?: boolean
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  timeResolution?: 'HOUR' | 'DAY' | 'MONTH' | 'WEEK' | 'QUARTER' | 'YEAR'
}

export interface ClusterData {
  appId?: string
  appName?: string
  avgCpuUtilization?: number
  avgMemoryUtilization?: number
  cloudProvider?: string
  cloudProviderId?: string
  cloudServiceName?: string
  clusterId?: string
  clusterName?: string
  clusterType?: string
  costTrend?: number
  cpuActualIdleCost?: number
  cpuBillingAmount?: number
  cpuIdleCost?: number
  cpuUnallocatedCost?: number
  efficiencyScore?: number
  efficiencyScoreTrendPercentage?: number
  envId?: string
  envName?: string
  environment?: string
  id?: string
  idleCost?: number
  instanceId?: string
  instanceName?: string
  instanceType?: string
  launchType?: string
  maxCpuUtilization?: number
  maxMemoryUtilization?: number
  memoryActualIdleCost?: number
  memoryBillingAmount?: number
  memoryIdleCost?: number
  memoryUnallocatedCost?: number
  name?: string
  namespace?: string
  networkCost?: number
  prevBillingAmount?: number
  region?: string
  serviceId?: string
  serviceName?: string
  storageActualIdleCost?: number
  storageCost?: number
  storageRequest?: number
  storageUnallocatedCost?: number
  storageUtilizationValue?: number
  systemCost?: number
  taskId?: string
  totalCost?: number
  trendType?: string
  type?: string
  unallocatedCost?: number
  workloadName?: string
  workloadType?: string
}

export interface ClusterRecommendationAccuracy {
  cpu?: number
  masterPrice?: number
  memory?: number
  nodes?: number
  regularNodes?: number
  regularPrice?: number
  spotNodes?: number
  spotPrice?: number
  totalPrice?: number
  workerPrice?: number
  zone?: string
}

export interface ConnectorActivityDetails {
  lastActivityTime?: number
}

export interface ConnectorConfigDTO {
  [key: string]: any
}

export interface ConnectorConnectivityDetails {
  errorSummary?: string
  errors?: ErrorDetail[]
  lastConnectedAt?: number
  lastTestedAt?: number
  status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
  testedAt?: number
}

export interface ConnectorInfoDTO {
  description?: string
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  spec: ConnectorConfigDTO
  tags?: {
    [key: string]: string
  }
  type:
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Prometheus'
    | 'Dynatrace'
    | 'Vault'
    | 'AzureKeyVault'
    | 'DockerRegistry'
    | 'Local'
    | 'AwsKms'
    | 'GcpKms'
    | 'AwsSecretManager'
    | 'Gcp'
    | 'Aws'
    | 'Azure'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
    | 'Codecommit'
    | 'CEAws'
    | 'CEAzure'
    | 'GcpCloudCost'
    | 'CEK8sCluster'
    | 'HttpHelmRepo'
    | 'NewRelic'
    | 'Datadog'
    | 'SumoLogic'
    | 'PagerDuty'
    | 'CustomHealth'
    | 'ServiceNow'
    | 'ErrorTracking'
    | 'Pdc'
    | 'AzureRepo'
    | 'Jenkins'
    | 'OciHelmRepo'
    | 'CustomSecretManager'
    | 'ElasticSearch'
    | 'GcpSecretManager'
    | 'AzureArtifacts'
    | 'Tas'
    | 'Spot'
    | 'Bamboo'
    | 'TerraformCloud'
}

export interface ConnectorResponse {
  activityDetails?: ConnectorActivityDetails
  connector?: ConnectorInfoDTO
  createdAt?: number
  entityValidityDetails?: EntityValidityDetails
  gitDetails?: EntityGitDetails
  governanceMetadata?: GovernanceMetadata
  harnessManaged?: boolean
  lastModifiedAt?: number
  status?: ConnectorConnectivityDetails
}

export interface ConnectorValidationResult {
  delegateId?: string
  errorSummary?: string
  errors?: ErrorDetail[]
  status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
  testedAt?: number
}

export interface ContainerHistogramDTO {
  containerName?: string
  containerRecommendation?: ContainerRecommendation
  cpuHistogram?: HistogramExp
  memoryHistogram?: HistogramExp
}

export interface ContainerRecommendation {
  burstable?: ResourceRequirement
  current?: ResourceRequirement
  guaranteed?: ResourceRequirement
  lastDayCost?: Cost
  numDays?: number
  percentileBased?: {
    [key: string]: ResourceRequirement
  }
  recommended?: ResourceRequirement
  totalSamplesCount?: number
}

export interface Cost {
  cpu?: number
  memory?: number
}

export interface CostCategoryDeleteDTO {
  deleted?: boolean
  linkedPerspectives?: {
    [key: string]: string
  }
  message?: string
}

export interface CostDetailsQueryParamsDTO {
  filters?: CCMStringFilter[]
  groupBy?: (
    | 'PERSPECTIVE_ID'
    | 'WORKLOAD'
    | 'WORKLOAD_TYPE'
    | 'CLUSTER_ID'
    | 'CLUSTER_NAME'
    | 'CLUSTER_NAMESPACE'
    | 'CLUSTER_NAMESPACE_ID'
    | 'CLUSTER_WORKLOAD'
    | 'CLUSTER_WORKLOAD_ID'
    | 'CLUSTER_NODE'
    | 'CLUSTER_POD'
    | 'CLUSTER_PARENT_INSTANCE_ID'
    | 'CLUSTER_STORAGE'
    | 'CLUSTER_APPLICATION'
    | 'CLUSTER_ENVIRONMENT'
    | 'CLUSTER_SERVICE'
    | 'CLUSTER_CLOUD_PROVIDER'
    | 'CLUSTER_ECS_SERVICE'
    | 'CLUSTER_ECS_SERVICE_ID'
    | 'CLUSTER_ECS_TASK'
    | 'CLUSTER_ECS_TASK_ID'
    | 'CLUSTER_ECS_LAUNCH_TYPE'
    | 'CLUSTER_ECS_LAUNCH_TYPE_ID'
    | 'NAMESPACE'
    | 'GCP_PRODUCT'
    | 'GCP_PROJECT'
    | 'GCP_SKU_ID'
    | 'GCP_SKU_DESCRIPTION'
    | 'AWS_ACCOUNT'
    | 'AWS_SERVICE'
    | 'AWS_INSTANCE_TYPE'
    | 'AWS_USAGE_TYPE'
    | 'AZURE_SUBSCRIPTION_GUID'
    | 'AZURE_METER_NAME'
    | 'AZURE_METER_CATEGORY'
    | 'AZURE_METER_SUBCATEGORY'
    | 'AZURE_RESOURCE_ID'
    | 'AZURE_RESOURCE_GROUP_NAME'
    | 'AZURE_RESOURCE_TYPE'
    | 'AZURE_RESOURCE'
    | 'AZURE_SERVICE_NAME'
    | 'AZURE_SERVICE_TIER'
    | 'AZURE_INSTANCE_ID'
    | 'AZURE_SUBSCRIPTION_NAME'
    | 'AZURE_PUBLISHER_NAME'
    | 'AZURE_PUBLISHER_TYPE'
    | 'AZURE_RESERVATION_ID'
    | 'AZURE_RESERVATION_NAME'
    | 'AZURE_FREQUENCY'
    | 'COMMON_PRODUCT'
    | 'COMMON_REGION'
    | 'COMMON_NONE'
    | 'CLOUD_PROVIDER'
    | 'STATUS'
    | 'REGION'
    | 'ANOMALY_TIME'
    | 'ACTUAL_COST'
    | 'EXPECTED_COST'
    | 'ANOMALOUS_SPEND'
    | 'COST_IMPACT'
    | 'TOTAL_COST'
    | 'IDLE_COST'
    | 'UNALLOCATED_COST'
    | 'ALL'
    | 'RULE_NAME'
    | 'RULE_SET_NAME'
  )[]
  limit?: number
  offset?: number
  skipRoundOff?: boolean
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  timeResolution?: 'HOUR' | 'DAY' | 'MONTH' | 'WEEK' | 'QUARTER' | 'YEAR'
}

export interface CostOverviewDTO {
  statsLabel?: string
  statsTrend?: number
  statsValue?: string
  value?: number
}

export interface CostTarget {
  name?: string
  rules?: ViewRule[]
}

export interface CreatePerspectiveFolderDTO {
  ceViewFolder?: CEViewFolder
  perspectiveIds?: string[]
}

export interface CreateRuleDTO {
  rule?: Rule
}

export interface CreateRuleEnforcementDTO {
  ruleEnforcement?: RuleEnforcement
}

export interface CreateRuleExecutionDTO {
  RuleExecution?: RuleExecution
}

export interface CreateRuleExecutionFilterDTO {
  policyExecutionFilter?: RuleExecutionFilter
}

export interface CreateRuleSetDTO {
  ruleSet?: RuleSet
}

export interface CreateRuleSetFilterDTO {
  ruleSet?: RuleSetFilter
}

export interface CrossAccountAccess {
  crossAccountRoleArn: string
  externalId?: string
}

export interface CurrencyConversionFactorDTO {
  currencyConversionFactorDataList?: CurrencyConversionFactorData[]
}

export interface CurrencyConversionFactorData {
  cloudServiceProvider?: 'AWS' | 'GCP' | 'AZURE' | 'K8S'
  conversionFactor?: number
  conversionType?: 'DEFAULT' | 'CUSTOM'
  destinationCurrency?:
    | 'AED'
    | 'ARS'
    | 'AUD'
    | 'BRL'
    | 'CAD'
    | 'CNY'
    | 'EUR'
    | 'GBP'
    | 'INR'
    | 'JPY'
    | 'MXN'
    | 'NOK'
    | 'NZD'
    | 'RUB'
    | 'SGD'
    | 'USD'
    | 'NONE'
  sourceCurrency?:
    | 'AED'
    | 'ARS'
    | 'AUD'
    | 'BRL'
    | 'CAD'
    | 'CNY'
    | 'EUR'
    | 'GBP'
    | 'INR'
    | 'JPY'
    | 'MXN'
    | 'NOK'
    | 'NZD'
    | 'RUB'
    | 'SGD'
    | 'USD'
    | 'NONE'
}

export interface CurrencyDTO {
  currencies?: CurrencyData[]
}

export interface CurrencyData {
  currency?: string
  symbol?: string
}

export type CustomHealthConnectorDTO = ConnectorConfigDTO & {
  baseURL: string
  delegateSelectors?: string[]
  headers?: CustomHealthKeyAndValue[]
  method: 'GET' | 'POST'
  params?: CustomHealthKeyAndValue[]
  validationBody?: string
  validationPath?: string
}

export interface CustomHealthKeyAndValue {
  encryptedValueRef?: string
  key: string
  value?: string
  valueEncrypted?: boolean
}

export type CustomSecretManager = ConnectorConfigDTO & {
  connectorRef?: string
  default?: boolean
  delegateSelectors?: string[]
  host?: string
  onDelegate?: boolean
  template: TemplateLinkConfigForCustomSecretManager
  workingDirectory?: string
}

export interface DataPoint {
  key?: Reference
  value?: Number
}

export type DatadogConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  applicationKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface DockerAuthCredentialsDTO {
  [key: string]: any
}

export interface DockerAuthenticationDTO {
  spec?: DockerAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type DockerConnectorDTO = ConnectorConfigDTO & {
  auth?: DockerAuthenticationDTO
  delegateSelectors?: string[]
  dockerRegistryUrl: string
  executeOnDelegate?: boolean
  providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
}

export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type DynatraceConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  delegateSelectors?: string[]
  url: string
}

export interface EC2InstanceDTO {
  cpuUtilisation?: string
  instanceFamily?: string
  memory?: string
  memoryUtilisation?: string
  monthlyCost?: string
  region?: string
  vcpu?: string
}

export interface EC2RecommendationDTO {
  awsAccountId?: string
  crossFamilyRecommendation?: EC2InstanceDTO
  current?: EC2InstanceDTO
  id?: string
  jiraDetails?: CCMJiraDetails
  sameFamilyRecommendation?: EC2InstanceDTO
  showTerminated?: boolean
}

export interface ECSRecommendationDTO {
  clusterName?: string
  cpuHistogram?: HistogramExp
  current?: {
    [key: string]: string
  }
  id?: string
  jiraDetails?: CCMJiraDetails
  lastDayCost?: Cost
  launchType?: 'EC2' | 'FARGATE' | 'EXTERNAL'
  memoryHistogram?: HistogramExp
  percentileBased?: {
    [key: string]: {
      [key: string]: string
    }
  }
  serviceArn?: string
  serviceName?: string
}

export type ELKConnectorDTO = ConnectorConfigDTO & {
  apiKeyId?: string
  apiKeyRef?: string
  authType?: 'UsernamePassword' | 'ApiClientToken' | 'None'
  delegateSelectors?: string[]
  passwordRef?: string
  url: string
  username?: string
}

export type EmailNotificationChannel = CCMNotificationChannel & {
  emails?: string[]
}

export interface EmbeddedUser {
  email?: string
  externalUserId?: string
  name?: string
  uuid?: string
}

export interface EnforcementCount {
  accountId?: string
  ruleIds?: {
    [key: string]: string[]
  }
  ruleSetIds?: {
    [key: string]: string[]
  }
}

export interface EnforcementCountDTO {
  enforcementCount?: EnforcementCountRequest
}

export interface EnforcementCountRequest {
  accountId?: string
  ruleIds?: string[]
  ruleSetIds?: string[]
}

export interface EntityGitDetails {
  branch?: string
  commitId?: string
  filePath?: string
  fileUrl?: string
  objectId?: string
  parentEntityConnectorRef?: string
  parentEntityRepoName?: string
  repoIdentifier?: string
  repoName?: string
  repoUrl?: string
  rootFolder?: string
}

export interface EntityInfo {
  awsInstancetype?: string
  awsServiceCode?: string
  awsUsageAccountId?: string
  awsUsageType?: string
  azureInstanceId?: string
  azureMeterCategory?: string
  azureResourceGroup?: string
  azureServiceName?: string
  azureSubscriptionGuid?: string
  clusterId?: string
  clusterName?: string
  field?: string
  gcpProduct?: string
  gcpProjectId?: string
  gcpSKUDescription?: string
  gcpSKUId?: string
  namespace?: string
  workloadName?: string
  workloadType?: string
}

export interface EntityValidityDetails {
  invalidYaml?: string
  valid?: boolean
}

export interface Error {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'INVALID_AGENT_MTLS_AUTHORITY'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'WINRM_COMMAND_EXECUTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'EMAIL_ERROR'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'CUSTOM_APPROVAL_ERROR'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_GLOBAL_DELEGATE_ACCOUNT'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_CONFLICT_ERROR_V2'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_BAD_REQUEST'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'TEMPLATE_ALREADY_EXISTS_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
    | 'INVALID_AZURE_AKS_REQUEST'
    | 'AWS_IAM_ERROR'
    | 'AWS_CF_ERROR'
    | 'AWS_INSTANCE_ERROR'
    | 'AWS_VPC_ERROR'
    | 'AWS_TAG_ERROR'
    | 'AWS_ASG_ERROR'
    | 'AWS_LOAD_BALANCER_ERROR'
    | 'SCM_INTERNAL_SERVER_ERROR_V2'
    | 'SCM_UNAUTHORIZED_ERROR_V2'
    | 'TOO_MANY_REQUESTS'
    | 'INVALID_IDENTIFIER_REF'
    | 'SPOTINST_NULL_ERROR'
    | 'SCM_UNEXPECTED_ERROR'
    | 'DUPLICATE_FILE_IMPORT'
    | 'AZURE_APP_SERVICES_TASK_EXCEPTION'
    | 'AZURE_ARM_TASK_EXCEPTION'
    | 'AZURE_BP_TASK_EXCEPTION'
    | 'MEDIA_NOT_SUPPORTED'
    | 'AWS_ECS_ERROR'
    | 'AWS_APPLICATION_AUTO_SCALING'
    | 'AWS_ECS_SERVICE_NOT_ACTIVE'
    | 'AWS_ECS_CLIENT_ERROR'
    | 'AWS_STS_ERROR'
    | 'FREEZE_EXCEPTION'
    | 'DELEGATE_TASK_EXPIRED'
    | 'DELEGATE_TASK_VALIDATION_FAILED'
    | 'MONGO_EXECUTION_TIMEOUT_EXCEPTION'
    | 'DELEGATE_NOT_REGISTERED'
    | 'TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE'
    | 'APPROVAL_REJECTION'
    | 'TERRAGRUNT_EXECUTION_ERROR'
    | 'ADFS_ERROR'
    | 'TERRAFORM_CLOUD_ERROR'
    | 'CLUSTER_CREDENTIALS_NOT_FOUND'
    | 'SCM_API_ERROR'
    | 'INTERNAL_SERVER_ERROR'
    | 'SCM_FORBIDDEN'
    | 'AWS_EKS_ERROR'
    | 'OPA_POLICY_EVALUATION_ERROR'
    | 'USER_MARKED_FAILURE'
    | 'SSH_RETRY'
  correlationId?: string
  detailedMessage?: string
  message?: string
  metadata?: ErrorMetadataDTO
  responseMessages?: ResponseMessage[]
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ErrorDetail {
  code?: number
  message?: string
  reason?: string
}

export interface ErrorMetadataDTO {
  type?: string
}

export type ErrorTrackingConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface ExecutionDetailDTO {
  executionDetail?: ExecutionDetailRequest
}

export interface ExecutionDetailRequest {
  enforcementIds?: string[]
}

export interface ExecutionDetails {
  enforcementIds?: {
    [key: string]: ExecutionEnforcementDetails
  }[]
}

export interface ExecutionEnforcementDetails {
  accounts?: string[]
  description?: string
  enforcementName?: string
  regions?: string[]
  ruleIds?: {
    [key: string]: string
  }
  ruleSetIds?: {
    [key: string]: string
  }
  schedule?: string
}

export interface Failure {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'INVALID_AGENT_MTLS_AUTHORITY'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'WINRM_COMMAND_EXECUTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'EMAIL_ERROR'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'CUSTOM_APPROVAL_ERROR'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_GLOBAL_DELEGATE_ACCOUNT'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_CONFLICT_ERROR_V2'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_BAD_REQUEST'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'TEMPLATE_ALREADY_EXISTS_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
    | 'INVALID_AZURE_AKS_REQUEST'
    | 'AWS_IAM_ERROR'
    | 'AWS_CF_ERROR'
    | 'AWS_INSTANCE_ERROR'
    | 'AWS_VPC_ERROR'
    | 'AWS_TAG_ERROR'
    | 'AWS_ASG_ERROR'
    | 'AWS_LOAD_BALANCER_ERROR'
    | 'SCM_INTERNAL_SERVER_ERROR_V2'
    | 'SCM_UNAUTHORIZED_ERROR_V2'
    | 'TOO_MANY_REQUESTS'
    | 'INVALID_IDENTIFIER_REF'
    | 'SPOTINST_NULL_ERROR'
    | 'SCM_UNEXPECTED_ERROR'
    | 'DUPLICATE_FILE_IMPORT'
    | 'AZURE_APP_SERVICES_TASK_EXCEPTION'
    | 'AZURE_ARM_TASK_EXCEPTION'
    | 'AZURE_BP_TASK_EXCEPTION'
    | 'MEDIA_NOT_SUPPORTED'
    | 'AWS_ECS_ERROR'
    | 'AWS_APPLICATION_AUTO_SCALING'
    | 'AWS_ECS_SERVICE_NOT_ACTIVE'
    | 'AWS_ECS_CLIENT_ERROR'
    | 'AWS_STS_ERROR'
    | 'FREEZE_EXCEPTION'
    | 'DELEGATE_TASK_EXPIRED'
    | 'DELEGATE_TASK_VALIDATION_FAILED'
    | 'MONGO_EXECUTION_TIMEOUT_EXCEPTION'
    | 'DELEGATE_NOT_REGISTERED'
    | 'TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE'
    | 'APPROVAL_REJECTION'
    | 'TERRAGRUNT_EXECUTION_ERROR'
    | 'ADFS_ERROR'
    | 'TERRAFORM_CLOUD_ERROR'
    | 'CLUSTER_CREDENTIALS_NOT_FOUND'
    | 'SCM_API_ERROR'
    | 'INTERNAL_SERVER_ERROR'
    | 'SCM_FORBIDDEN'
    | 'AWS_EKS_ERROR'
    | 'OPA_POLICY_EVALUATION_ERROR'
    | 'USER_MARKED_FAILURE'
    | 'SSH_RETRY'
  correlationId?: string
  errors?: ValidationError[]
  message?: string
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface FilterDTO {
  filterProperties: FilterProperties
  filterVisibility?: 'EveryOne' | 'OnlyCreator'
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface FilterProperties {
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
  tags?: {
    [key: string]: string
  }
}

export interface FilterStatsDTO {
  key?: string
  values?: string[]
}

export interface FilterValues {
  ruleIds?: {
    [key: string]: string
  }
  ruleSetIds?: {
    [key: string]: string
  }
}

export interface FilterValuesDTO {
  columns?: string[]
  filter?: CCMRecommendationFilterProperties
}

export interface GcpBillingExportSpec {
  datasetId: string
  tableId: string
}

export type GcpCloudCostConnector = ConnectorConfigDTO & {
  billingExportSpec?: GcpBillingExportSpec
  featuresEnabled?: (
    | 'BILLING'
    | 'OPTIMIZATION'
    | 'VISIBILITY'
    | 'GOVERNANCE'
    | 'COMMITMENT_ORCHESTRATOR'
    | 'CLUSTER_ORCHESTRATOR'
  )[]
  projectId: string
  serviceAccountEmail: string
}

export type GcpConnector = ConnectorConfigDTO & {
  credential: GcpConnectorCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface GcpConnectorCredential {
  spec?: GcpCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface GcpCredentialSpec {
  [key: string]: any
}

export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
  credentials: string
  default?: boolean
  delegateSelectors?: string[]
  keyName: string
  keyRing: string
  projectId: string
  region: string
}

export type GcpManualDetails = GcpCredentialSpec & {
  secretKeyRef: string
}

export type GcpSecretManager = ConnectorConfigDTO & {
  credentialsRef: string
  default?: boolean
  delegateSelectors?: string[]
}

export interface GitAuthenticationDTO {
  [key: string]: any
}

export type GitConfigDTO = ConnectorConfigDTO & {
  branchName?: string
  connectionType: 'Account' | 'Repo' | 'Project'
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  spec: GitAuthenticationDTO
  type: 'Http' | 'Ssh'
  url: string
  validationRepo?: string
}

export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
  sshKeyRef: string
}

export interface GithubApiAccess {
  spec?: GithubApiAccessSpecDTO
  type: 'GithubApp' | 'Token' | 'OAuth'
}

export interface GithubApiAccessSpecDTO {
  [key: string]: any
}

export type GithubAppSpec = GithubApiAccessSpecDTO & {
  applicationId?: string
  applicationIdRef?: string
  installationId?: string
  installationIdRef?: string
  privateKeyRef: string
}

export interface GithubAuthentication {
  spec: GithubCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GithubConnector = ConnectorConfigDTO & {
  apiAccess?: GithubApiAccess
  authentication: GithubAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Account' | 'Repo' | 'Project'
  url: string
  validationRepo?: string
}

export interface GithubCredentialsDTO {
  [key: string]: any
}

export type GithubHttpCredentials = GithubCredentialsDTO & {
  spec: GithubHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken' | 'OAuth'
}

export interface GithubHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GithubOauth = GithubHttpCredentialsSpecDTO & {
  tokenRef: string
}

export type GithubSshCredentials = GithubCredentialsDTO & {
  sshKeyRef: string
}

export type GithubTokenSpec = GithubApiAccessSpecDTO & {
  tokenRef: string
}

export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface GitlabApiAccess {
  spec?: GitlabApiAccessSpecDTO
  type: 'Token' | 'OAuth'
}

export interface GitlabApiAccessSpecDTO {
  [key: string]: any
}

export interface GitlabAuthentication {
  spec: GitlabCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GitlabConnector = ConnectorConfigDTO & {
  apiAccess?: GitlabApiAccess
  authentication: GitlabAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Account' | 'Repo' | 'Project'
  url: string
  validationRepo?: string
}

export interface GitlabCredentialsDTO {
  [key: string]: any
}

export type GitlabHttpCredentials = GitlabCredentialsDTO & {
  spec: GitlabHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos' | 'OAuth'
}

export interface GitlabHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
  kerberosKeyRef: string
}

export type GitlabOauth = GitlabHttpCredentialsSpecDTO & {
  refreshTokenRef: string
  tokenRef: string
}

export type GitlabSshCredentials = GitlabCredentialsDTO & {
  sshKeyRef: string
}

export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
  tokenRef: string
}

export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface GovernanceEnqueueResponseDTO {
  ruleExecutionId?: string[]
}

export interface GovernanceJobEnqueueDTO {
  externalId?: string
  isDryRun?: boolean
  isOOTB?: boolean
  policy?: string
  roleArn?: string
  ruleCloudProviderType?: 'AWS'
  ruleEnforcementId?: string
  ruleId?: string
  targetAccountId?: string
  targetRegion?: string
}

export interface GovernanceMetadata {
  [key: string]: any
}

export interface GovernanceRuleFilter {
  accountId?: string
  cloudProvider?: string
  isOOTB?: boolean
  isStablePolicy?: boolean
  limit?: number
  offset?: number
  orderBy?: CCMSort[]
  orgIdentifier?: string
  policyIds?: string[]
  projectIdentifier?: string
  search?: string
  tags?: string
}

export interface GraphQLQuery {
  operationName?: string
  query?: string
  variables?: {
    [key: string]: { [key: string]: any }
  }
}

export interface HistogramExp {
  bucketWeights?: number[]
  firstBucketSize?: number
  growthRatio?: number
  maxBucket?: number
  minBucket?: number
  numBuckets?: number
  precomputed?: number[]
  totalWeight?: number
}

export interface HostDTO {
  hostAttributes?: {
    [key: string]: string
  }
  hostname: string
}

export interface HttpHelmAuthCredentialsDTO {
  [key: string]: any
}

export interface HttpHelmAuthenticationDTO {
  spec?: HttpHelmAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
  auth?: HttpHelmAuthenticationDTO
  delegateSelectors?: string[]
  helmRepoUrl: string
}

export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface InstanceDetails {
  cloudProviderInstanceId?: string
  clusterId?: string
  clusterName?: string
  cpuAllocatable?: number
  cpuBillingAmount?: number
  cpuIdleCost?: number
  cpuRequested?: number
  cpuUnallocatedCost?: number
  cpuUnitPrice?: number
  createTime?: number
  deleteTime?: number
  id?: string
  idleCost?: number
  instanceCategory?: string
  machineType?: string
  memoryAllocatable?: number
  memoryBillingAmount?: number
  memoryIdleCost?: number
  memoryRequested?: number
  memoryUnallocatedCost?: number
  memoryUnitPrice?: number
  name?: string
  namespace?: string
  networkCost?: number
  node?: string
  nodeId?: string
  nodePoolName?: string
  podCapacity?: string
  qosClass?: string
  storageActualIdleCost?: number
  storageCost?: number
  storageRequest?: number
  storageUnallocatedCost?: number
  storageUtilizationValue?: number
  systemCost?: number
  totalCost?: number
  unallocatedCost?: number
  workload?: string
}

export interface JenkinsAuthCredentialsDTO {
  [key: string]: any
}

export interface JenkinsAuthenticationDTO {
  spec?: JenkinsAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous' | 'Bearer Token(HTTP Header)'
}

export type JenkinsBearerTokenDTO = JenkinsAuthCredentialsDTO & {
  tokenRef: string
}

export type JenkinsConnectorDTO = ConnectorConfigDTO & {
  auth?: JenkinsAuthenticationDTO
  delegateSelectors?: string[]
  jenkinsUrl: string
}

export type JenkinsUserNamePasswordDTO = JenkinsAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface JiraAuthCredentialsDTO {
  [key: string]: any
}

export interface JiraAuthenticationDTO {
  spec: JiraAuthCredentialsDTO
  type: 'UsernamePassword' | 'PersonalAccessToken'
}

export type JiraConnector = ConnectorConfigDTO & {
  auth: JiraAuthenticationDTO
  delegateSelectors?: string[]
  jiraUrl: string
  passwordRef?: string
  username?: string
  usernameRef?: string
}

export interface JiraIssueNG {
  fields: {
    [key: string]: { [key: string]: any }
  }
  id: string
  key: string
  restUrl: string
  url?: string
}

export type JiraPATDTO = JiraAuthCredentialsDTO & {
  patRef: string
}

export type JiraUserNamePasswordDTO = JiraAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface JsonNode {
  [key: string]: any
}

export interface K8sClusterSetupRequest {
  ccmConnectorIdentifier?: string
  connectorIdentifier?: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface K8sLabel {
  name?: string
  value?: string
}

export interface K8sRecommendationFilterPropertiesDTO {
  clusterNames?: string[]
  ids?: string[]
  names?: string[]
  namespaces?: string[]
  recommendationStates?: ('OPEN' | 'APPLIED' | 'IGNORED')[]
  resourceTypes?: ('WORKLOAD' | 'NODE_POOL' | 'ECS_SERVICE' | 'EC2_INSTANCE')[]
}

export interface KubernetesAuthCredentialDTO {
  [key: string]: any
}

export interface KubernetesAuthDTO {
  spec: KubernetesAuthCredentialDTO
  type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
}

export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  clientCertRef: string
  clientKeyAlgo?: string
  clientKeyPassphraseRef?: string
  clientKeyRef: string
}

export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
  credential: KubernetesCredentialDTO
  delegateSelectors?: string[]
}

export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
  auth: KubernetesAuthDTO
  masterUrl: string
}

export interface KubernetesCredentialDTO {
  spec?: KubernetesCredentialSpecDTO
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface KubernetesCredentialSpecDTO {
  [key: string]: any
}

export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
  oidcClientIdRef: string
  oidcIssuerUrl?: string
  oidcPasswordRef: string
  oidcScopes?: string
  oidcSecretRef?: string
  oidcUsername?: string
  oidcUsernameRef?: string
}

export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  serviceAccountTokenRef: string
}

export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface LicenseUsageDTO {
  accountIdentifier?: string
  module?: string
  timestamp?: number
}

export interface LinkedPerspectives {
  costCategoryId?: string
  perspectiveIdAndName?: {
    [key: string]: string
  }
}

export interface ListDTO {
  query?: GovernanceRuleFilter
}

export type LocalConnectorDTO = ConnectorConfigDTO & {
  default?: boolean
}

export type MicrosoftTeamsNotificationChannel = CCMNotificationChannel & {
  microsoftTeamsUrl?: string
}

export interface MovePerspectiveDTO {
  newFolderId?: string
  perspectiveIds?: string[]
}

export interface NameValuePairWithDefault {
  name?: string
  type: string
  useAsDefault?: boolean
  value: string
}

export type NewRelicConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  delegateSelectors?: string[]
  newRelicAccountId: string
  url: string
}

export interface NexusAuthCredentials {
  [key: string]: any
}

export interface NexusAuthentication {
  spec?: NexusAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type NexusConnector = ConnectorConfigDTO & {
  auth?: NexusAuthentication
  delegateSelectors?: string[]
  nexusServerUrl: string
  version: string
}

export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface NodePool {
  role?: string
  sumNodes?: number
  vm?: VirtualMachine
  vmClass?: string
}

export interface NodePoolId {
  clusterid?: string
  nodepoolname?: string
}

export interface NodeRecommendationDTO {
  current?: RecommendationResponse
  id?: string
  jiraDetails?: CCMJiraDetails
  nodePoolId?: NodePoolId
  recommended?: RecommendationResponse
  resourceRequirement?: RecommendClusterRequest
  totalResourceUsage?: TotalResourceUsage
}

export interface NotificationChannelDTO {
  accountId?: string
  emailRecipients?: string[]
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'GTM' | 'UNRECOGNIZED'
  templateData?: {
    [key: string]: string
  }
  templateId?: string
  userGroups?: UserGroup[]
  webhookUrls?: string[]
}

export interface NotificationResult {
  notificationId?: string
}

export interface Number {
  [key: string]: any
}

export interface OciHelmAuthCredentialsDTO {
  [key: string]: any
}

export interface OciHelmAuthenticationDTO {
  spec?: OciHelmAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type OciHelmConnectorDTO = ConnectorConfigDTO & {
  auth?: OciHelmAuthenticationDTO
  delegateSelectors?: string[]
  helmRepoUrl: string
}

export type OciHelmUsernamePasswordDTO = OciHelmAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface Page {
  content?: { [key: string]: any }[]
  empty?: boolean
  first?: boolean
  last?: boolean
  number?: number
  numberOfElements?: number
  pageable?: Pageable
  size?: number
  sort?: Sort
  totalElements?: number
  totalPages?: number
}

export interface PageActiveServiceDTO {
  content?: ActiveServiceDTO[]
  empty?: boolean
  first?: boolean
  last?: boolean
  number?: number
  numberOfElements?: number
  pageable?: Pageable
  size?: number
  sort?: Sort
  totalElements?: number
  totalPages?: number
}

export interface PageFilterDTO {
  content?: FilterDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  pageToken?: string
  totalItems?: number
  totalPages?: number
}

export interface Pageable {
  offset?: number
  pageNumber?: number
  pageSize?: number
  paged?: boolean
  sort?: Sort
  unpaged?: boolean
}

export type PagerDutyConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  delegateSelectors?: string[]
}

export interface PerspectiveAnomalyData {
  actualCost?: number
  anomalyCount?: number
  associatedResources?: EntityInfo[]
  differenceFromExpectedCost?: number
  resourceType?: string
  timestamp?: number
}

export type PerspectiveBudgetScope = BudgetScope & {
  viewId?: string
  viewName?: string
}

export interface PerspectiveEntityStatsData {
  data?: QLCEViewEntityStatsDataPoint[]
}

export interface PerspectiveQueryDTO {
  filters?: QLCEViewFilterWrapper[]
  groupBy?: QLCEViewGroupBy[]
}

export interface PerspectiveTimeSeriesData {
  cpuLimit?: TimeSeriesDataPoints[]
  cpuRequest?: TimeSeriesDataPoints[]
  cpuUtilValues?: TimeSeriesDataPoints[]
  memoryLimit?: TimeSeriesDataPoints[]
  memoryRequest?: TimeSeriesDataPoints[]
  memoryUtilValues?: TimeSeriesDataPoints[]
  stats?: TimeSeriesDataPoints[]
}

export type PhysicalDataCenterConnectorDTO = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  hosts?: HostDTO[]
}

export type PrometheusConnectorDTO = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  headers?: CustomHealthKeyAndValue[]
  passwordRef?: string
  url: string
  username?: string
}

export interface QLCEView {
  chartType?: 'STACKED_TIME_SERIES' | 'STACKED_LINE_CHART'
  createdAt?: number
  createdBy?: string
  dataSources?: ('CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL')[]
  folderId?: string
  folderName?: string
  groupBy?: QLCEViewField
  id?: string
  lastUpdatedAt?: number
  name?: string
  reportScheduledConfigured?: boolean
  timeRange?: 'LAST_7' | 'LAST_30' | 'LAST_MONTH' | 'CURRENT_MONTH' | 'CUSTOM'
  totalCost?: number
  viewPreferences?: ViewPreferences
  viewState?: 'DRAFT' | 'COMPLETED'
  viewType?: 'SAMPLE' | 'CUSTOMER' | 'DEFAULT'
}

export interface QLCEViewEntityStatsDataPoint {
  clusterData?: ClusterData
  clusterPerspective?: boolean
  cost?: Number
  costTrend?: Number
  id?: string
  instanceDetails?: InstanceDetails
  name?: string
  pricingSource?: string
  storageDetails?: StorageDetails
}

export interface QLCEViewField {
  fieldId?: string
  fieldName?: string
  identifier?: 'CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL'
  identifierName?: string
}

export interface QLCEViewFieldInput {
  fieldId?: string
  fieldName?: string
  identifier?: 'CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL'
  identifierName?: string
}

export interface QLCEViewFilter {
  field?: QLCEViewFieldInput
  operator?: 'NOT_IN' | 'IN' | 'EQUALS' | 'NOT_NULL' | 'NULL' | 'LIKE'
  values?: string[]
}

export interface QLCEViewFilterWrapper {
  idFilter?: QLCEViewFilter
  ruleFilter?: QLCEViewRule
  timeFilter?: QLCEViewTimeFilter
  viewMetadataFilter?: QLCEViewMetadataFilter
}

export interface QLCEViewGroupBy {
  entityGroupBy?: QLCEViewFieldInput
  timeTruncGroupBy?: QLCEViewTimeTruncGroupBy
}

export interface QLCEViewMetadataFilter {
  isPreview?: boolean
  preview?: boolean
  viewId?: string
}

export interface QLCEViewRule {
  conditions?: QLCEViewFilter[]
}

export interface QLCEViewTimeFilter {
  field?: QLCEViewFieldInput
  operator?: 'AFTER' | 'BEFORE'
  value?: Number
}

export interface QLCEViewTimeTruncGroupBy {
  resolution?: 'HOUR' | 'DAY' | 'MONTH' | 'WEEK' | 'QUARTER' | 'YEAR'
}

export interface QueryStat {
  avgExecutionTime?: number
  count?: number
  maxExecutionTime?: number
  secondMaxExecutionTime?: number
}

export interface RecommendClusterRequest {
  allowBurst?: boolean
  allowOlderGen?: boolean
  category?: string[]
  excludes?: string[]
  includes?: string[]
  maxNodes?: number
  minCpu?: number
  minMem?: number
  minNodes?: number
  networkPerf?: string[]
  onDemandPct?: number
  sameSize?: boolean
  sumCpu?: number
  sumGpu?: number
  sumMem?: number
  zone?: string
}

export interface RecommendationDetailsDTO {
  [key: string]: any
}

export interface RecommendationEC2InstanceId {
  awsAccountId?: string
  instanceId?: string
}

export interface RecommendationECSServiceId {
  clusterName?: string
  ecsServiceName?: string
}

export interface RecommendationItemDTO {
  clusterName?: string
  id: string
  jiraConnectorRef?: string
  jiraIssueKey?: string
  jiraStatus?: string
  monthlyCost?: number
  monthlySaving?: number
  namespace?: string
  perspectiveId?: string
  perspectiveName?: string
  recommendationDetails?: RecommendationDetailsDTO
  recommendationState?: 'OPEN' | 'APPLIED' | 'IGNORED'
  resourceName?: string
  resourceType: 'WORKLOAD' | 'NODE_POOL' | 'ECS_SERVICE' | 'EC2_INSTANCE'
}

export interface RecommendationNodepoolId {
  clusterName?: string
  nodepoolName?: string
}

export interface RecommendationOverviewStats {
  totalMonthlyCost?: number
  totalMonthlySaving?: number
}

export interface RecommendationResponse {
  accuracy?: ClusterRecommendationAccuracy
  instanceCategory?: 'ON_DEMAND' | 'SPOT' | 'RESERVED'
  nodePools?: NodePool[]
  provider?: string
  region?: string
  service?: string
  zone?: string
}

export interface RecommendationWorkloadId {
  clusterName?: string
  namespace?: string
  workloadName?: string
}

export interface RecommendationsDTO {
  items?: RecommendationItemDTO[]
  limit?: number
  offset?: number
}

export interface RecommendationsIgnoreList {
  accountId?: string
  ec2InstanceIgnoreList?: RecommendationEC2InstanceId[]
  ecsServiceIgnoreList?: RecommendationECSServiceId[]
  nodepoolIgnoreList?: RecommendationNodepoolId[]
  workloadIgnoreList?: RecommendationWorkloadId[]
}

export interface RecommendationsIgnoreResourcesDTO {
  ec2Instances?: RecommendationEC2InstanceId[]
  ecsServices?: RecommendationECSServiceId[]
  nodepools?: RecommendationNodepoolId[]
  workloads?: RecommendationWorkloadId[]
}

export interface Reference {
  id?: string
  name?: string
  type?: string
}

export interface ReferenceDTO {
  accountIdentifier?: string
  count?: number
  identifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface ResourceRequirement {
  empty?: boolean
  limits?: {
    [key: string]: string
  }
  requests?: {
    [key: string]: string
  }
}

export interface Response {
  correlationId?: string
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseAwsAccountConnectionDetail {
  correlationId?: string
  data?: AwsAccountConnectionDetail
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBoolean {
  correlationId?: string
  data?: boolean
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBudget {
  correlationId?: string
  data?: Budget
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBudgetData {
  correlationId?: string
  data?: BudgetData
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBudgetGroup {
  correlationId?: string
  data?: BudgetGroup
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCCMConnectorDetails {
  correlationId?: string
  data?: CCMConnectorDetails
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCCMJiraDetails {
  correlationId?: string
  data?: CCMJiraDetails
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCCMNotificationSetting {
  correlationId?: string
  data?: CCMNotificationSetting
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCELicenseUsageDTO {
  correlationId?: string
  data?: CELicenseUsageDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCEView {
  correlationId?: string
  data?: CEView
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCEViewFolder {
  correlationId?: string
  data?: CEViewFolder
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCcmK8sMetaInfoResponseDTO {
  correlationId?: string
  data?: CcmK8sMetaInfoResponseDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCcmOverviewDTO {
  correlationId?: string
  data?: CcmOverviewDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseConnectorValidationResult {
  correlationId?: string
  data?: ConnectorValidationResult
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCostOverviewDTO {
  correlationId?: string
  data?: CostOverviewDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCurrencyConversionFactorDTO {
  correlationId?: string
  data?: CurrencyConversionFactorDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseCurrencyDTO {
  correlationId?: string
  data?: CurrencyDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseDouble {
  correlationId?: string
  data?: number
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseEC2RecommendationDTO {
  correlationId?: string
  data?: EC2RecommendationDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseECSRecommendationDTO {
  correlationId?: string
  data?: ECSRecommendationDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseEnforcementCount {
  correlationId?: string
  data?: EnforcementCount
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseExecutionDetails {
  correlationId?: string
  data?: ExecutionDetails
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseFilterDTO {
  correlationId?: string
  data?: FilterDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseFilterValues {
  correlationId?: string
  data?: FilterValues
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseGovernanceEnqueueResponseDTO {
  correlationId?: string
  data?: GovernanceEnqueueResponseDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseInteger {
  correlationId?: string
  data?: number
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseJsonNode {
  correlationId?: string
  data?: JsonNode
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseLicenseUsageDTO {
  correlationId?: string
  data?: LicenseUsageDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListAnomalyData {
  correlationId?: string
  data?: AnomalyData[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListAnomalySummary {
  correlationId?: string
  data?: AnomalySummary[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListAnomalyWidgetData {
  correlationId?: string
  data?: AnomalyWidgetData[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListBIDashboardSummary {
  correlationId?: string
  data?: BIDashboardSummary[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListBudget {
  correlationId?: string
  data?: Budget[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListBudgetGroup {
  correlationId?: string
  data?: BudgetGroup[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListBudgetSummary {
  correlationId?: string
  data?: BudgetSummary[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListCCMPerspectiveNotificationChannelsDTO {
  correlationId?: string
  data?: CCMPerspectiveNotificationChannelsDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListCEReportSchedule {
  correlationId?: string
  data?: CEReportSchedule[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListCEView {
  correlationId?: string
  data?: CEView[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListCEViewFolder {
  correlationId?: string
  data?: CEViewFolder[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListClusterCostDetails {
  correlationId?: string
  data?: ClusterCostDetails[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListFilterStatsDTO {
  correlationId?: string
  data?: FilterStatsDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListPerspectiveAnomalyData {
  correlationId?: string
  data?: PerspectiveAnomalyData[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListQLCEView {
  correlationId?: string
  data?: QLCEView[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListRule {
  correlationId?: string
  data?: Rule[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListRuleEnforcement {
  correlationId?: string
  data?: RuleEnforcement[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListValueDataPoint {
  correlationId?: string
  data?: ValueDataPoint[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMapStringQueryStat {
  correlationId?: string
  data?: {
    [key: string]: QueryStat
  }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'INVALID_AGENT_MTLS_AUTHORITY'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'WINRM_COMMAND_EXECUTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'EMAIL_ERROR'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'CUSTOM_APPROVAL_ERROR'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_GLOBAL_DELEGATE_ACCOUNT'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_CONFLICT_ERROR_V2'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_BAD_REQUEST'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'TEMPLATE_ALREADY_EXISTS_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
    | 'INVALID_AZURE_AKS_REQUEST'
    | 'AWS_IAM_ERROR'
    | 'AWS_CF_ERROR'
    | 'AWS_INSTANCE_ERROR'
    | 'AWS_VPC_ERROR'
    | 'AWS_TAG_ERROR'
    | 'AWS_ASG_ERROR'
    | 'AWS_LOAD_BALANCER_ERROR'
    | 'SCM_INTERNAL_SERVER_ERROR_V2'
    | 'SCM_UNAUTHORIZED_ERROR_V2'
    | 'TOO_MANY_REQUESTS'
    | 'INVALID_IDENTIFIER_REF'
    | 'SPOTINST_NULL_ERROR'
    | 'SCM_UNEXPECTED_ERROR'
    | 'DUPLICATE_FILE_IMPORT'
    | 'AZURE_APP_SERVICES_TASK_EXCEPTION'
    | 'AZURE_ARM_TASK_EXCEPTION'
    | 'AZURE_BP_TASK_EXCEPTION'
    | 'MEDIA_NOT_SUPPORTED'
    | 'AWS_ECS_ERROR'
    | 'AWS_APPLICATION_AUTO_SCALING'
    | 'AWS_ECS_SERVICE_NOT_ACTIVE'
    | 'AWS_ECS_CLIENT_ERROR'
    | 'AWS_STS_ERROR'
    | 'FREEZE_EXCEPTION'
    | 'DELEGATE_TASK_EXPIRED'
    | 'DELEGATE_TASK_VALIDATION_FAILED'
    | 'MONGO_EXECUTION_TIMEOUT_EXCEPTION'
    | 'DELEGATE_NOT_REGISTERED'
    | 'TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE'
    | 'APPROVAL_REJECTION'
    | 'TERRAGRUNT_EXECUTION_ERROR'
    | 'ADFS_ERROR'
    | 'TERRAFORM_CLOUD_ERROR'
    | 'CLUSTER_CREDENTIALS_NOT_FOUND'
    | 'SCM_API_ERROR'
    | 'INTERNAL_SERVER_ERROR'
    | 'SCM_FORBIDDEN'
    | 'AWS_EKS_ERROR'
    | 'OPA_POLICY_EVALUATION_ERROR'
    | 'USER_MARKED_FAILURE'
    | 'SSH_RETRY'
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
    | 'POLICY_EVALUATION_FAILURE'
    | 'INPUT_TIMEOUT_FAILURE'
    | 'APPROVAL_REJECTION'
    | 'DELEGATE_RESTART'
    | 'USER_MARKED_FAILURE'
  )[]
  level?: 'INFO' | 'ERROR'
  message?: string
}

export interface ResponseNodeRecommendationDTO {
  correlationId?: string
  data?: NodeRecommendationDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseNotificationResult {
  correlationId?: string
  data?: NotificationResult
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageActiveServiceDTO {
  correlationId?: string
  data?: PageActiveServiceDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageFilterDTO {
  correlationId?: string
  data?: PageFilterDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePerspectiveEntityStatsData {
  correlationId?: string
  data?: PerspectiveEntityStatsData
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePerspectiveTimeSeriesData {
  correlationId?: string
  data?: PerspectiveTimeSeriesData
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRecommendationOverviewStats {
  correlationId?: string
  data?: RecommendationOverviewStats
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRecommendationsDTO {
  correlationId?: string
  data?: RecommendationsDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRecommendationsIgnoreList {
  correlationId?: string
  data?: RecommendationsIgnoreList
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRule {
  correlationId?: string
  data?: Rule
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleEnforcement {
  correlationId?: string
  data?: RuleEnforcement
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleExecution {
  correlationId?: string
  data?: RuleExecution
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleExecutionList {
  correlationId?: string
  data?: RuleExecutionList
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleList {
  correlationId?: string
  data?: RuleList
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleSet {
  correlationId?: string
  data?: RuleSet
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseRuleSetList {
  correlationId?: string
  data?: RuleSetList
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseServiceInstanceUsageDTO {
  correlationId?: string
  data?: ServiceInstanceUsageDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseServiceUsageDTO {
  correlationId?: string
  data?: ServiceUsageDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseStatsInfo {
  correlationId?: string
  data?: StatsInfo
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseString {
  correlationId?: string
  data?: string
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseVoid {
  correlationId?: string
  data?: Void
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseWorkloadRecommendationDTO {
  correlationId?: string
  data?: WorkloadRecommendationDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBusinessMapping {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: BusinessMapping
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBusinessMappingListDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: BusinessMappingListDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseCostCategoryDeleteDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CostCategoryDeleteDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLinkedPerspectives {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LinkedPerspectives[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface RestResponseViewCustomField {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ViewCustomField
  responseMessages?: ResponseMessage[]
}

export interface Rule {
  accountId?: string
  cloudProvider?: 'AWS'
  createdAt?: number
  createdBy?: EmbeddedUser
  deleted?: boolean
  description?: string
  isOOTB?: boolean
  isStablePolicy?: boolean
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  rulesYaml?: string
  storeType?: 'INLINE' | 'REMOTE'
  tags?: string[]
  uuid?: string
  versionLabel?: string
}

export interface RuleClone {
  uuid?: string
}

export interface RuleEnforcement {
  accountId?: string
  cloudProvider?: 'AWS'
  createdAt?: number
  createdBy?: EmbeddedUser
  deleted?: boolean
  description?: string
  executionSchedule?: string
  executionTimezone?: string
  isDryRun?: boolean
  isEnabled?: boolean
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  ruleIds?: string[]
  ruleSetIDs?: string[]
  runCount?: number
  tags?: string[]
  targetAccounts?: string[]
  targetRegions?: string[]
  uuid?: string
}

export interface RuleExecution {
  accountId?: string
  cloudProvider?: 'AWS'
  createdAt?: number
  errorMessage?: string
  executionCompletedAt?: number
  executionLogBucketType?: string
  executionLogPath?: string
  executionStatus?: 'FAILED' | 'ENQUEUED' | 'SUCCESS'
  isDryRun?: boolean
  jobId?: string
  lastUpdatedAt?: number
  ootb?: boolean
  orgIdentifier?: string
  projectIdentifier?: string
  resourceCount?: number
  ruleEnforcementIdentifier?: string
  ruleEnforcementName?: string
  ruleIdentifier?: string
  ruleName?: string
  rulePackIdentifier?: string
  targetAccount?: string
  targetRegions?: string[]
  ttl?: number
  uuid?: string
}

export interface RuleExecutionFilter {
  accountId?: string
  cloudProvider?: 'AWS'
  executionStatus?: 'SUCCESS' | 'FAILED'
  limit?: number
  offset?: number
  region?: string[]
  ruleEnforcementId?: string[]
  ruleIds?: string[]
  ruleSetIds?: string[]
  targetAccount?: string[]
  time?: CCMTimeFilter[]
}

export interface RuleExecutionList {
  ruleExecution?: RuleExecution[]
  totalItems?: number
}

export interface RuleList {
  rules?: Rule[]
  totalItems?: number
}

export interface RuleSet {
  accountId?: string
  cloudProvider?: 'AWS'
  createdAt?: number
  createdBy?: EmbeddedUser
  description?: string
  isOOTB?: boolean
  lastUpdatedAt?: number
  lastUpdatedBy?: EmbeddedUser
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  rulesIdentifier?: string[]
  tags?: string[]
  uuid?: string
}

export interface RuleSetFilter {
  accountId?: string
  cloudProvider?: string
  isOOTB?: boolean
  limit?: number
  offset?: number
  orderBy?: CCMSort[]
  orgIdentifier?: string
  projectIdentifier?: string
  ruleSetIds?: string[]
  search?: string
  tags?: string
}

export interface RuleSetList {
  ruleSet?: RuleSet[]
  totalItems?: number
}

export interface ServiceInstanceUsageDTO {
  accountIdentifier?: string
  activeServiceInstances?: UsageDataDTO
  activeServices?: UsageDataDTO
  cdLicenseType?: 'SERVICES' | 'SERVICE_INSTANCES'
  module?: string
  timestamp?: number
}

export type ServiceNowADFSDTO = ServiceNowAuthCredentialsDTO & {
  adfsUrl: string
  certificateRef: string
  clientIdRef: string
  privateKeyRef: string
  resourceIdRef: string
}

export interface ServiceNowAuthCredentialsDTO {
  [key: string]: any
}

export interface ServiceNowAuthenticationDTO {
  spec: ServiceNowAuthCredentialsDTO
  type: 'UsernamePassword' | 'AdfsClientCredentialsWithCertificate'
}

export type ServiceNowConnector = ConnectorConfigDTO & {
  auth: ServiceNowAuthenticationDTO
  delegateSelectors?: string[]
  passwordRef?: string
  serviceNowUrl: string
  username?: string
  usernameRef?: string
}

export type ServiceNowUserNamePasswordDTO = ServiceNowAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface ServiceUsageDTO {
  accountIdentifier?: string
  activeServiceInstances?: UsageDataDTO
  activeServices?: UsageDataDTO
  cdLicenseType?: 'SERVICES' | 'SERVICE_INSTANCES'
  module?: string
  serviceLicenses?: UsageDataDTO
  timestamp?: number
}

export interface SharedCost {
  name?: string
  rules?: ViewRule[]
  splits?: SharedCostSplit[]
  strategy?: 'EQUAL' | 'PROPORTIONAL' | 'FIXED'
}

export interface SharedCostSplit {
  costTargetName?: string
  percentageContribution?: number
}

export type SlackNotificationChannel = CCMNotificationChannel & {
  slackWebHookUrl?: string
}

export interface Sort {
  empty?: boolean
  sorted?: boolean
  unsorted?: boolean
}

export type SplunkConnectorDTO = ConnectorConfigDTO & {
  accountId: string
  delegateSelectors?: string[]
  passwordRef: string
  splunkUrl: string
  username?: string
}

export type SpotConnector = ConnectorConfigDTO & {
  credential: SpotCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface SpotCredential {
  spec?: SpotCredentialSpec
  type: 'PermanentTokenConfig'
}

export interface SpotCredentialSpec {
  [key: string]: any
}

export type SpotPermanentTokenConfigSpec = SpotCredentialSpec & {
  apiTokenRef: string
  spotAccountId?: string
  spotAccountIdRef?: string
}

export interface StackTraceElement {
  classLoaderName?: string
  className?: string
  fileName?: string
  lineNumber?: number
  methodName?: string
  moduleName?: string
  moduleVersion?: string
  nativeMethod?: boolean
}

export interface StatsInfo {
  statsDescription?: string
  statsLabel?: string
  statsTrend?: Number
  statsValue?: string
  value?: Number
}

export interface StorageDetails {
  capacity?: number
  claimName?: string
  claimNamespace?: string
  cloudProvider?: string
  clusterId?: string
  clusterName?: string
  createTime?: number
  deleteTime?: number
  id?: string
  instanceId?: string
  instanceName?: string
  region?: string
  storageActualIdleCost?: number
  storageClass?: string
  storageCost?: number
  storageRequest?: number
  storageUnallocatedCost?: number
  storageUtilizationValue?: number
  volumeType?: string
}

export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
  accessIdRef: string
  accessKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export type TasConnector = ConnectorConfigDTO & {
  credential: TasCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
}

export interface TasCredential {
  spec?: TasCredentialSpec
  type: 'ManualConfig'
}

export interface TasCredentialSpec {
  [key: string]: any
}

export type TasManualDetails = TasCredentialSpec & {
  endpointUrl: string
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface TemplateLinkConfigForCustomSecretManager {
  templateInputs?: {
    [key: string]: NameValuePairWithDefault[]
  }
  templateRef: string
  versionLabel: string
}

export type TerraformCloudConnector = ConnectorConfigDTO & {
  credential: TerraformCloudCredential
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  terraformCloudUrl: string
}

export interface TerraformCloudCredential {
  spec?: TerraformCloudCredentialSpec
  type: 'ApiToken'
}

export interface TerraformCloudCredentialSpec {
  [key: string]: any
}

export type TerraformCloudTokenCredentials = TerraformCloudCredentialSpec & {
  apiToken: string
}

export interface Throwable {
  cause?: Throwable
  localizedMessage?: string
  message?: string
  stackTrace?: StackTraceElement[]
  suppressed?: Throwable[]
}

export interface TimeSeriesDataPoints {
  time?: number
  values?: DataPoint[]
}

export interface TotalResourceUsage {
  maxcpu?: number
  maxmemory?: number
  sumcpu?: number
  summemory?: number
}

export interface UnallocatedCost {
  label?: string
  sharingStrategy?: 'EQUAL' | 'PROPORTIONAL' | 'FIXED'
  splits?: SharedCostSplit[]
  strategy?: 'DISPLAY_NAME' | 'HIDE' | 'SHARE'
}

export interface UsageDataDTO {
  count?: number
  displayName?: string
  references?: ReferenceDTO[]
}

export interface UserGroup {
  [key: string]: any
}

export interface ValidationError {
  error?: string
  fieldId?: string
}

export interface ValueDataPoint {
  time?: number
  value?: number
}

export type VaultConnectorDTO = ConnectorConfigDTO & {
  accessType?: 'APP_ROLE' | 'TOKEN' | 'VAULT_AGENT' | 'AWS_IAM' | 'K8s_AUTH'
  appRoleId?: string
  authToken?: string
  awsRegion?: string
  basePath?: string
  default?: boolean
  delegateSelectors?: string[]
  k8sAuthEndpoint?: string
  namespace?: string
  readOnly?: boolean
  renewAppRoleToken?: boolean
  renewalIntervalMinutes: number
  secretEngineManuallyConfigured?: boolean
  secretEngineName?: string
  secretEngineVersion?: number
  secretId?: string
  serviceAccountTokenPath?: string
  sinkPath?: string
  useAwsIam?: boolean
  useK8sAuth?: boolean
  useVaultAgent?: boolean
  vaultAwsIamRole?: string
  vaultK8sAuthRole?: string
  vaultUrl: string
  xvaultAwsIamServerId?: string
}

export interface ViewCondition {
  type?: string
}

export interface ViewCustomField {
  accountId?: string
  createdAt?: number
  description?: string
  displayFormula?: string
  lastUpdatedAt?: number
  name?: string
  sqlFormula?: string
  userDefinedExpression?: string
  uuid?: string
  viewFields?: ViewField[]
  viewId?: string
}

export interface ViewField {
  fieldId?: string
  fieldName?: string
  identifier?: 'CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'BUSINESS_MAPPING' | 'LABEL'
  identifierName?: string
}

export type ViewIdCondition = ViewCondition & {
  values?: string[]
  viewField?: ViewField
  viewOperator?: 'NOT_IN' | 'IN' | 'EQUALS' | 'NOT_NULL' | 'NULL' | 'LIKE'
}

export interface ViewPreferences {
  includeOthers?: boolean
  includeUnallocatedCost?: boolean
}

export interface ViewRule {
  viewConditions?: ViewCondition[]
}

export interface ViewTimeRange {
  endTime?: number
  startTime?: number
  viewTimeRangeType?: 'LAST_7' | 'LAST_30' | 'LAST_MONTH' | 'CURRENT_MONTH' | 'CUSTOM'
}

export interface ViewVisualization {
  chartType?: 'STACKED_TIME_SERIES' | 'STACKED_LINE_CHART'
  granularity?: 'DAY' | 'MONTH'
  groupBy?: ViewField
}

export interface VirtualMachine {
  allocatableCpusPerVm?: number
  allocatableMemPerVm?: number
  avgPrice?: number
  burst?: boolean
  category?: string
  cpusPerVm?: number
  currentGen?: boolean
  gpusPerVm?: number
  memPerVm?: number
  networkPerf?: string
  networkPerfCategory?: string
  onDemandPrice?: number
  type?: string
  zones?: string[]
}

export interface Void {
  [key: string]: any
}

export interface WorkloadRecommendationDTO {
  containerRecommendations?: {
    [key: string]: ContainerRecommendation
  }
  id?: string
  items?: ContainerHistogramDTO[]
  jiraDetails?: CCMJiraDetails
  lastDayCost?: Cost
}

export type AnomalyFilterPropertiesRequestBody = AnomalyFilterProperties

export type BudgetRequestBody = Budget

export type BudgetGroupRequestBody = BudgetGroup

export type BusinessMappingRequestBody = BusinessMapping

export type CCMNotificationSettingRequestBody = CCMNotificationSetting

export type CCMRecommendationFilterPropertiesRequestBody = CCMRecommendationFilterProperties

export type CEReportScheduleRequestBody = CEReportSchedule

export type CEViewRequestBody = CEView

export type CostDetailsQueryParamsDTORequestBody = CostDetailsQueryParamsDTO

export type CreateRuleDTORequestBody = CreateRuleDTO

export type CreateRuleEnforcementDTORequestBody = CreateRuleEnforcementDTO

export type CreateRuleSetDTORequestBody = CreateRuleSetDTO

export type FilterDTORequestBody = FilterDTO

export type K8sClusterSetupRequestRequestBody = K8sClusterSetupRequest

export type RecommendationsIgnoreResourcesDTORequestBody = RecommendationsIgnoreResourcesDTO

export type ViewCustomFieldRequestBody = ViewCustomField

export type AnomalyFilterValuesBodyRequestBody = string[]

export interface GetActiveSpendQueryParams {
  accountIdentifier?: string
  startTime?: number
  endTime?: number
}

export type GetActiveSpendProps = Omit<
  GetProps<ResponseCostOverviewDTO, unknown, GetActiveSpendQueryParams, void>,
  'path'
>

/**
 * Get Active spend for given time period
 */
export const GetActiveSpend = (props: GetActiveSpendProps) => (
  <Get<ResponseCostOverviewDTO, unknown, GetActiveSpendQueryParams, void>
    path={`/active-spend`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetActiveSpendProps = Omit<
  UseGetProps<ResponseCostOverviewDTO, unknown, GetActiveSpendQueryParams, void>,
  'path'
>

/**
 * Get Active spend for given time period
 */
export const useGetActiveSpend = (props: UseGetActiveSpendProps) =>
  useGet<ResponseCostOverviewDTO, unknown, GetActiveSpendQueryParams, void>(`/active-spend`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetForecastedSpendQueryParams {
  accountIdentifier?: string
  startTime?: number
  endTime?: number
}

export type GetForecastedSpendProps = Omit<
  GetProps<ResponseCostOverviewDTO, unknown, GetForecastedSpendQueryParams, void>,
  'path'
>

/**
 * Get Forecasted spend for the next time period
 */
export const GetForecastedSpend = (props: GetForecastedSpendProps) => (
  <Get<ResponseCostOverviewDTO, unknown, GetForecastedSpendQueryParams, void>
    path={`/active-spend/forecast`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetForecastedSpendProps = Omit<
  UseGetProps<ResponseCostOverviewDTO, unknown, GetForecastedSpendQueryParams, void>,
  'path'
>

/**
 * Get Forecasted spend for the next time period
 */
export const useGetForecastedSpend = (props: UseGetForecastedSpendProps) =>
  useGet<ResponseCostOverviewDTO, unknown, GetForecastedSpendQueryParams, void>(`/active-spend/forecast`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface ListAnomaliesQueryParams {
  accountIdentifier: string
}

export type ListAnomaliesProps = Omit<
  MutateProps<ResponseListAnomalyData, unknown, ListAnomaliesQueryParams, AnomalyFilterPropertiesRequestBody, void>,
  'path' | 'verb'
>

/**
 * List Anomalies
 */
export const ListAnomalies = (props: ListAnomaliesProps) => (
  <Mutate<ResponseListAnomalyData, unknown, ListAnomaliesQueryParams, AnomalyFilterPropertiesRequestBody, void>
    verb="POST"
    path={`/anomaly`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListAnomaliesProps = Omit<
  UseMutateProps<ResponseListAnomalyData, unknown, ListAnomaliesQueryParams, AnomalyFilterPropertiesRequestBody, void>,
  'path' | 'verb'
>

/**
 * List Anomalies
 */
export const useListAnomalies = (props: UseListAnomaliesProps) =>
  useMutate<ResponseListAnomalyData, unknown, ListAnomaliesQueryParams, AnomalyFilterPropertiesRequestBody, void>(
    'POST',
    `/anomaly`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ReportAnomalyFeedbackQueryParams {
  accountIdentifier: string
  anomalyId?: string
}

export type ReportAnomalyFeedbackProps = Omit<
  MutateProps<ResponseBoolean, unknown, ReportAnomalyFeedbackQueryParams, AnomalyFeedbackDTO, void>,
  'path' | 'verb'
>

/**
 * Report Anomaly Feedback
 */
export const ReportAnomalyFeedback = (props: ReportAnomalyFeedbackProps) => (
  <Mutate<ResponseBoolean, unknown, ReportAnomalyFeedbackQueryParams, AnomalyFeedbackDTO, void>
    verb="PUT"
    path={`/anomaly/feedback`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseReportAnomalyFeedbackProps = Omit<
  UseMutateProps<ResponseBoolean, unknown, ReportAnomalyFeedbackQueryParams, AnomalyFeedbackDTO, void>,
  'path' | 'verb'
>

/**
 * Report Anomaly Feedback
 */
export const useReportAnomalyFeedback = (props: UseReportAnomalyFeedbackProps) =>
  useMutate<ResponseBoolean, unknown, ReportAnomalyFeedbackQueryParams, AnomalyFeedbackDTO, void>(
    'PUT',
    `/anomaly/feedback`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface AnomalyFilterValuesQueryParams {
  accountIdentifier: string
}

export type AnomalyFilterValuesProps = Omit<
  MutateProps<
    ResponseListFilterStatsDTO,
    unknown,
    AnomalyFilterValuesQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Filter Values available for given Anomaly-Filter fields
 */
export const AnomalyFilterValues = (props: AnomalyFilterValuesProps) => (
  <Mutate<ResponseListFilterStatsDTO, unknown, AnomalyFilterValuesQueryParams, AnomalyFilterValuesBodyRequestBody, void>
    verb="POST"
    path={`/anomaly/filter-values`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAnomalyFilterValuesProps = Omit<
  UseMutateProps<
    ResponseListFilterStatsDTO,
    unknown,
    AnomalyFilterValuesQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Filter Values available for given Anomaly-Filter fields
 */
export const useAnomalyFilterValues = (props: UseAnomalyFilterValuesProps) =>
  useMutate<
    ResponseListFilterStatsDTO,
    unknown,
    AnomalyFilterValuesQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >('POST', `/anomaly/filter-values`, { base: getConfig('ccm/api'), ...props })

export interface ListPerspectiveAnomaliesQueryParams {
  accountIdentifier: string
}

export interface ListPerspectiveAnomaliesPathParams {
  perspectiveId: string
}

export type ListPerspectiveAnomaliesProps = Omit<
  MutateProps<
    ResponseListPerspectiveAnomalyData,
    unknown,
    ListPerspectiveAnomaliesQueryParams,
    PerspectiveQueryDTO,
    ListPerspectiveAnomaliesPathParams
  >,
  'path' | 'verb'
> &
  ListPerspectiveAnomaliesPathParams

/**
 * List Anomalies for Perspective
 */
export const ListPerspectiveAnomalies = ({ perspectiveId, ...props }: ListPerspectiveAnomaliesProps) => (
  <Mutate<
    ResponseListPerspectiveAnomalyData,
    unknown,
    ListPerspectiveAnomaliesQueryParams,
    PerspectiveQueryDTO,
    ListPerspectiveAnomaliesPathParams
  >
    verb="POST"
    path={`/anomaly/perspective/${perspectiveId}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListPerspectiveAnomaliesProps = Omit<
  UseMutateProps<
    ResponseListPerspectiveAnomalyData,
    unknown,
    ListPerspectiveAnomaliesQueryParams,
    PerspectiveQueryDTO,
    ListPerspectiveAnomaliesPathParams
  >,
  'path' | 'verb'
> &
  ListPerspectiveAnomaliesPathParams

/**
 * List Anomalies for Perspective
 */
export const useListPerspectiveAnomalies = ({ perspectiveId, ...props }: UseListPerspectiveAnomaliesProps) =>
  useMutate<
    ResponseListPerspectiveAnomalyData,
    unknown,
    ListPerspectiveAnomaliesQueryParams,
    PerspectiveQueryDTO,
    ListPerspectiveAnomaliesPathParams
  >(
    'POST',
    (paramsInPath: ListPerspectiveAnomaliesPathParams) => `/anomaly/perspective/${paramsInPath.perspectiveId}`,
    { base: getConfig('ccm/api'), pathParams: { perspectiveId }, ...props }
  )

export interface GetAnomaliesSummaryQueryParams {
  accountIdentifier: string
}

export type GetAnomaliesSummaryProps = Omit<
  MutateProps<
    ResponseListAnomalySummary,
    unknown,
    GetAnomaliesSummaryQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get Anomalies Summary
 */
export const GetAnomaliesSummary = (props: GetAnomaliesSummaryProps) => (
  <Mutate<ResponseListAnomalySummary, unknown, GetAnomaliesSummaryQueryParams, AnomalyFilterPropertiesRequestBody, void>
    verb="POST"
    path={`/anomaly/summary`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetAnomaliesSummaryProps = Omit<
  UseMutateProps<
    ResponseListAnomalySummary,
    unknown,
    GetAnomaliesSummaryQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get Anomalies Summary
 */
export const useGetAnomaliesSummary = (props: UseGetAnomaliesSummaryProps) =>
  useMutate<
    ResponseListAnomalySummary,
    unknown,
    GetAnomaliesSummaryQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >('POST', `/anomaly/summary`, { base: getConfig('ccm/api'), ...props })

export interface GetAnomalyWidgetsDataQueryParams {
  accountIdentifier: string
}

export type GetAnomalyWidgetsDataProps = Omit<
  MutateProps<
    ResponseListAnomalyWidgetData,
    unknown,
    GetAnomalyWidgetsDataQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get Anomaly Widgets
 */
export const GetAnomalyWidgetsData = (props: GetAnomalyWidgetsDataProps) => (
  <Mutate<
    ResponseListAnomalyWidgetData,
    unknown,
    GetAnomalyWidgetsDataQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >
    verb="POST"
    path={`/anomaly/widgets`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetAnomalyWidgetsDataProps = Omit<
  UseMutateProps<
    ResponseListAnomalyWidgetData,
    unknown,
    GetAnomalyWidgetsDataQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get Anomaly Widgets
 */
export const useGetAnomalyWidgetsData = (props: UseGetAnomalyWidgetsDataProps) =>
  useMutate<
    ResponseListAnomalyWidgetData,
    unknown,
    GetAnomalyWidgetsDataQueryParams,
    AnomalyFilterPropertiesRequestBody,
    void
  >('POST', `/anomaly/widgets`, { base: getConfig('ccm/api'), ...props })

export interface ListBIDashboardsQueryParams {
  accountIdentifier: string
}

export type ListBIDashboardsProps = Omit<
  GetProps<ResponseListBIDashboardSummary, unknown, ListBIDashboardsQueryParams, void>,
  'path'
>

/**
 * List all CCM BI Dashboards
 */
export const ListBIDashboards = (props: ListBIDashboardsProps) => (
  <Get<ResponseListBIDashboardSummary, unknown, ListBIDashboardsQueryParams, void>
    path={`/bi-dashboards`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListBIDashboardsProps = Omit<
  UseGetProps<ResponseListBIDashboardSummary, unknown, ListBIDashboardsQueryParams, void>,
  'path'
>

/**
 * List all CCM BI Dashboards
 */
export const useListBIDashboards = (props: UseListBIDashboardsProps) =>
  useGet<ResponseListBIDashboardSummary, unknown, ListBIDashboardsQueryParams, void>(`/bi-dashboards`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface ListBudgetGroupsQueryParams {
  accountIdentifier: string
}

export type ListBudgetGroupsProps = Omit<
  GetProps<ResponseListBudgetGroup, unknown, ListBudgetGroupsQueryParams, void>,
  'path'
>

/**
 * List Budget groups for account
 */
export const ListBudgetGroups = (props: ListBudgetGroupsProps) => (
  <Get<ResponseListBudgetGroup, unknown, ListBudgetGroupsQueryParams, void>
    path={`/budgetGroups`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListBudgetGroupsProps = Omit<
  UseGetProps<ResponseListBudgetGroup, unknown, ListBudgetGroupsQueryParams, void>,
  'path'
>

/**
 * List Budget groups for account
 */
export const useListBudgetGroups = (props: UseListBudgetGroupsProps) =>
  useGet<ResponseListBudgetGroup, unknown, ListBudgetGroupsQueryParams, void>(`/budgetGroups`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CreateBudgetGroupQueryParams {
  accountIdentifier: string
}

export type CreateBudgetGroupProps = Omit<
  MutateProps<ResponseString, unknown, CreateBudgetGroupQueryParams, BudgetGroupRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create budget group
 */
export const CreateBudgetGroup = (props: CreateBudgetGroupProps) => (
  <Mutate<ResponseString, unknown, CreateBudgetGroupQueryParams, BudgetGroupRequestBody, void>
    verb="POST"
    path={`/budgetGroups`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateBudgetGroupProps = Omit<
  UseMutateProps<ResponseString, unknown, CreateBudgetGroupQueryParams, BudgetGroupRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create budget group
 */
export const useCreateBudgetGroup = (props: UseCreateBudgetGroupProps) =>
  useMutate<ResponseString, unknown, CreateBudgetGroupQueryParams, BudgetGroupRequestBody, void>(
    'POST',
    `/budgetGroups`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface AggregatedAmountQueryParams {
  accountIdentifier: string
  areChildEntitiesBudgets: boolean
}

export type AggregatedAmountProps = Omit<
  MutateProps<
    ResponseListValueDataPoint,
    unknown,
    AggregatedAmountQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get aggregated amount for given budget groups/budgets
 */
export const AggregatedAmount = (props: AggregatedAmountProps) => (
  <Mutate<ResponseListValueDataPoint, unknown, AggregatedAmountQueryParams, AnomalyFilterValuesBodyRequestBody, void>
    verb="POST"
    path={`/budgetGroups/aggregatedAmount`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAggregatedAmountProps = Omit<
  UseMutateProps<
    ResponseListValueDataPoint,
    unknown,
    AggregatedAmountQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get aggregated amount for given budget groups/budgets
 */
export const useAggregatedAmount = (props: UseAggregatedAmountProps) =>
  useMutate<ResponseListValueDataPoint, unknown, AggregatedAmountQueryParams, AnomalyFilterValuesBodyRequestBody, void>(
    'POST',
    `/budgetGroups/aggregatedAmount`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface BudgetAndBudgetGroupsListQueryParams {
  accountIdentifier: string
  budgetGroupId?: string
  showAllEntities: boolean
}

export type BudgetAndBudgetGroupsListProps = Omit<
  GetProps<ResponseListBudgetSummary, unknown, BudgetAndBudgetGroupsListQueryParams, void>,
  'path'
>

/**
 * Get list of budget and budget group summaries
 */
export const BudgetAndBudgetGroupsList = (props: BudgetAndBudgetGroupsListProps) => (
  <Get<ResponseListBudgetSummary, unknown, BudgetAndBudgetGroupsListQueryParams, void>
    path={`/budgetGroups/summary`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseBudgetAndBudgetGroupsListProps = Omit<
  UseGetProps<ResponseListBudgetSummary, unknown, BudgetAndBudgetGroupsListQueryParams, void>,
  'path'
>

/**
 * Get list of budget and budget group summaries
 */
export const useBudgetAndBudgetGroupsList = (props: UseBudgetAndBudgetGroupsListProps) =>
  useGet<ResponseListBudgetSummary, unknown, BudgetAndBudgetGroupsListQueryParams, void>(`/budgetGroups/summary`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface DeleteBudgetGroupQueryParams {
  accountIdentifier: string
}

export type DeleteBudgetGroupProps = Omit<
  MutateProps<ResponseBoolean, unknown, DeleteBudgetGroupQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete budget group
 */
export const DeleteBudgetGroup = (props: DeleteBudgetGroupProps) => (
  <Mutate<ResponseBoolean, unknown, DeleteBudgetGroupQueryParams, string, void>
    verb="DELETE"
    path={`/budgetGroups`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteBudgetGroupProps = Omit<
  UseMutateProps<ResponseBoolean, unknown, DeleteBudgetGroupQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete budget group
 */
export const useDeleteBudgetGroup = (props: UseDeleteBudgetGroupProps) =>
  useMutate<ResponseBoolean, unknown, DeleteBudgetGroupQueryParams, string, void>('DELETE', `/budgetGroups`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetBudgetGroupQueryParams {
  accountIdentifier: string
}

export interface GetBudgetGroupPathParams {
  id: string
}

export type GetBudgetGroupProps = Omit<
  GetProps<ResponseBudgetGroup, unknown, GetBudgetGroupQueryParams, GetBudgetGroupPathParams>,
  'path'
> &
  GetBudgetGroupPathParams

/**
 * Get budget group
 */
export const GetBudgetGroup = ({ id, ...props }: GetBudgetGroupProps) => (
  <Get<ResponseBudgetGroup, unknown, GetBudgetGroupQueryParams, GetBudgetGroupPathParams>
    path={`/budgetGroups/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetBudgetGroupProps = Omit<
  UseGetProps<ResponseBudgetGroup, unknown, GetBudgetGroupQueryParams, GetBudgetGroupPathParams>,
  'path'
> &
  GetBudgetGroupPathParams

/**
 * Get budget group
 */
export const useGetBudgetGroup = ({ id, ...props }: UseGetBudgetGroupProps) =>
  useGet<ResponseBudgetGroup, unknown, GetBudgetGroupQueryParams, GetBudgetGroupPathParams>(
    (paramsInPath: GetBudgetGroupPathParams) => `/budgetGroups/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface UpdateBudgetGroupQueryParams {
  accountIdentifier: string
}

export interface UpdateBudgetGroupPathParams {
  id: string
}

export type UpdateBudgetGroupProps = Omit<
  MutateProps<
    ResponseString,
    unknown,
    UpdateBudgetGroupQueryParams,
    BudgetGroupRequestBody,
    UpdateBudgetGroupPathParams
  >,
  'path' | 'verb'
> &
  UpdateBudgetGroupPathParams

/**
 * Update budget group
 */
export const UpdateBudgetGroup = ({ id, ...props }: UpdateBudgetGroupProps) => (
  <Mutate<ResponseString, unknown, UpdateBudgetGroupQueryParams, BudgetGroupRequestBody, UpdateBudgetGroupPathParams>
    verb="PUT"
    path={`/budgetGroups/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateBudgetGroupProps = Omit<
  UseMutateProps<
    ResponseString,
    unknown,
    UpdateBudgetGroupQueryParams,
    BudgetGroupRequestBody,
    UpdateBudgetGroupPathParams
  >,
  'path' | 'verb'
> &
  UpdateBudgetGroupPathParams

/**
 * Update budget group
 */
export const useUpdateBudgetGroup = ({ id, ...props }: UseUpdateBudgetGroupProps) =>
  useMutate<ResponseString, unknown, UpdateBudgetGroupQueryParams, BudgetGroupRequestBody, UpdateBudgetGroupPathParams>(
    'PUT',
    (paramsInPath: UpdateBudgetGroupPathParams) => `/budgetGroups/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface ListBudgetsForAccountQueryParams {
  accountIdentifier: string
}

export type ListBudgetsForAccountProps = Omit<
  GetProps<ResponseListBudget, unknown, ListBudgetsForAccountQueryParams, void>,
  'path'
>

/**
 * List Budgets for account
 */
export const ListBudgetsForAccount = (props: ListBudgetsForAccountProps) => (
  <Get<ResponseListBudget, unknown, ListBudgetsForAccountQueryParams, void>
    path={`/budgets`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListBudgetsForAccountProps = Omit<
  UseGetProps<ResponseListBudget, unknown, ListBudgetsForAccountQueryParams, void>,
  'path'
>

/**
 * List Budgets for account
 */
export const useListBudgetsForAccount = (props: UseListBudgetsForAccountProps) =>
  useGet<ResponseListBudget, unknown, ListBudgetsForAccountQueryParams, void>(`/budgets`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CreateBudgetQueryParams {
  accountIdentifier: string
}

export type CreateBudgetProps = Omit<
  MutateProps<ResponseString, unknown, CreateBudgetQueryParams, BudgetRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create budget
 */
export const CreateBudget = (props: CreateBudgetProps) => (
  <Mutate<ResponseString, unknown, CreateBudgetQueryParams, BudgetRequestBody, void>
    verb="POST"
    path={`/budgets`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateBudgetProps = Omit<
  UseMutateProps<ResponseString, unknown, CreateBudgetQueryParams, BudgetRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create budget
 */
export const useCreateBudget = (props: UseCreateBudgetProps) =>
  useMutate<ResponseString, unknown, CreateBudgetQueryParams, BudgetRequestBody, void>('POST', `/budgets`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetForecastCostQueryParams {
  accountIdentifier?: string
  perspectiveId?: string
}

export type GetForecastCostProps = Omit<GetProps<ResponseDouble, unknown, GetForecastCostQueryParams, void>, 'path'>

/**
 * Deprecated use /perspective/forecastCost instead, Get forecast cost for Perspective.
 */
export const GetForecastCost = (props: GetForecastCostProps) => (
  <Get<ResponseDouble, unknown, GetForecastCostQueryParams, void>
    path={`/budgets/forecastCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetForecastCostProps = Omit<
  UseGetProps<ResponseDouble, unknown, GetForecastCostQueryParams, void>,
  'path'
>

/**
 * Deprecated use /perspective/forecastCost instead, Get forecast cost for Perspective.
 */
export const useGetForecastCost = (props: UseGetForecastCostProps) =>
  useGet<ResponseDouble, unknown, GetForecastCostQueryParams, void>(`/budgets/forecastCost`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetLastMonthCostQueryParams {
  accountIdentifier: string
  perspectiveId?: string
}

export type GetLastMonthCostProps = Omit<GetProps<ResponseDouble, unknown, GetLastMonthCostQueryParams, void>, 'path'>

/**
 * Deprecated use /perspective/lastMonthCost instead, Get last month cost for Perspective.
 */
export const GetLastMonthCost = (props: GetLastMonthCostProps) => (
  <Get<ResponseDouble, unknown, GetLastMonthCostQueryParams, void>
    path={`/budgets/lastMonthCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetLastMonthCostProps = Omit<
  UseGetProps<ResponseDouble, unknown, GetLastMonthCostQueryParams, void>,
  'path'
>

/**
 * Deprecated use /perspective/lastMonthCost instead, Get last month cost for Perspective.
 */
export const useGetLastMonthCost = (props: UseGetLastMonthCostProps) =>
  useGet<ResponseDouble, unknown, GetLastMonthCostQueryParams, void>(`/budgets/lastMonthCost`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface ListBudgetsForPerspectiveQueryParams {
  accountIdentifier: string
  perspectiveId?: string
}

export type ListBudgetsForPerspectiveProps = Omit<
  GetProps<ResponseListBudget, unknown, ListBudgetsForPerspectiveQueryParams, void>,
  'path'
>

/**
 * List Budgets for Perspective
 */
export const ListBudgetsForPerspective = (props: ListBudgetsForPerspectiveProps) => (
  <Get<ResponseListBudget, unknown, ListBudgetsForPerspectiveQueryParams, void>
    path={`/budgets/perspectiveBudgets`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListBudgetsForPerspectiveProps = Omit<
  UseGetProps<ResponseListBudget, unknown, ListBudgetsForPerspectiveQueryParams, void>,
  'path'
>

/**
 * List Budgets for Perspective
 */
export const useListBudgetsForPerspective = (props: UseListBudgetsForPerspectiveProps) =>
  useGet<ResponseListBudget, unknown, ListBudgetsForPerspectiveQueryParams, void>(`/budgets/perspectiveBudgets`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface DeleteBudgetQueryParams {
  accountIdentifier: string
}

export type DeleteBudgetProps = Omit<
  MutateProps<ResponseString, unknown, DeleteBudgetQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete budget
 */
export const DeleteBudget = (props: DeleteBudgetProps) => (
  <Mutate<ResponseString, unknown, DeleteBudgetQueryParams, string, void>
    verb="DELETE"
    path={`/budgets`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteBudgetProps = Omit<
  UseMutateProps<ResponseString, unknown, DeleteBudgetQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete budget
 */
export const useDeleteBudget = (props: UseDeleteBudgetProps) =>
  useMutate<ResponseString, unknown, DeleteBudgetQueryParams, string, void>('DELETE', `/budgets`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetBudgetQueryParams {
  accountIdentifier: string
}

export interface GetBudgetPathParams {
  id: string
}

export type GetBudgetProps = Omit<
  GetProps<ResponseBudget, unknown, GetBudgetQueryParams, GetBudgetPathParams>,
  'path'
> &
  GetBudgetPathParams

/**
 * Get budget
 */
export const GetBudget = ({ id, ...props }: GetBudgetProps) => (
  <Get<ResponseBudget, unknown, GetBudgetQueryParams, GetBudgetPathParams>
    path={`/budgets/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetBudgetProps = Omit<
  UseGetProps<ResponseBudget, unknown, GetBudgetQueryParams, GetBudgetPathParams>,
  'path'
> &
  GetBudgetPathParams

/**
 * Get budget
 */
export const useGetBudget = ({ id, ...props }: UseGetBudgetProps) =>
  useGet<ResponseBudget, unknown, GetBudgetQueryParams, GetBudgetPathParams>(
    (paramsInPath: GetBudgetPathParams) => `/budgets/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface CloneBudgetQueryParams {
  accountIdentifier: string
  cloneName?: string
}

export interface CloneBudgetPathParams {
  id: string
}

export type CloneBudgetProps = Omit<
  MutateProps<ResponseString, unknown, CloneBudgetQueryParams, void, CloneBudgetPathParams>,
  'path' | 'verb'
> &
  CloneBudgetPathParams

/**
 * Clone budget
 */
export const CloneBudget = ({ id, ...props }: CloneBudgetProps) => (
  <Mutate<ResponseString, unknown, CloneBudgetQueryParams, void, CloneBudgetPathParams>
    verb="POST"
    path={`/budgets/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCloneBudgetProps = Omit<
  UseMutateProps<ResponseString, unknown, CloneBudgetQueryParams, void, CloneBudgetPathParams>,
  'path' | 'verb'
> &
  CloneBudgetPathParams

/**
 * Clone budget
 */
export const useCloneBudget = ({ id, ...props }: UseCloneBudgetProps) =>
  useMutate<ResponseString, unknown, CloneBudgetQueryParams, void, CloneBudgetPathParams>(
    'POST',
    (paramsInPath: CloneBudgetPathParams) => `/budgets/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface UpdateBudgetQueryParams {
  accountIdentifier: string
}

export interface UpdateBudgetPathParams {
  id: string
}

export type UpdateBudgetProps = Omit<
  MutateProps<ResponseString, unknown, UpdateBudgetQueryParams, BudgetRequestBody, UpdateBudgetPathParams>,
  'path' | 'verb'
> &
  UpdateBudgetPathParams

/**
 * Update budget
 */
export const UpdateBudget = ({ id, ...props }: UpdateBudgetProps) => (
  <Mutate<ResponseString, unknown, UpdateBudgetQueryParams, BudgetRequestBody, UpdateBudgetPathParams>
    verb="PUT"
    path={`/budgets/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateBudgetProps = Omit<
  UseMutateProps<ResponseString, unknown, UpdateBudgetQueryParams, BudgetRequestBody, UpdateBudgetPathParams>,
  'path' | 'verb'
> &
  UpdateBudgetPathParams

/**
 * Update budget
 */
export const useUpdateBudget = ({ id, ...props }: UseUpdateBudgetProps) =>
  useMutate<ResponseString, unknown, UpdateBudgetQueryParams, BudgetRequestBody, UpdateBudgetPathParams>(
    'PUT',
    (paramsInPath: UpdateBudgetPathParams) => `/budgets/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface GetCostDetailsQueryParams {
  accountIdentifier: string
  breakdown?: 'YEARLY' | 'MONTHLY'
}

export interface GetCostDetailsPathParams {
  id: string
}

export type GetCostDetailsProps = Omit<
  GetProps<ResponseBudgetData, unknown, GetCostDetailsQueryParams, GetCostDetailsPathParams>,
  'path'
> &
  GetCostDetailsPathParams

/**
 * Get cost details for budget
 */
export const GetCostDetails = ({ id, ...props }: GetCostDetailsProps) => (
  <Get<ResponseBudgetData, unknown, GetCostDetailsQueryParams, GetCostDetailsPathParams>
    path={`/budgets/${id}/costDetails`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCostDetailsProps = Omit<
  UseGetProps<ResponseBudgetData, unknown, GetCostDetailsQueryParams, GetCostDetailsPathParams>,
  'path'
> &
  GetCostDetailsPathParams

/**
 * Get cost details for budget
 */
export const useGetCostDetails = ({ id, ...props }: UseGetCostDetailsProps) =>
  useGet<ResponseBudgetData, unknown, GetCostDetailsQueryParams, GetCostDetailsPathParams>(
    (paramsInPath: GetCostDetailsPathParams) => `/budgets/${paramsInPath.id}/costDetails`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface GetBusinessMappingListQueryParams {
  accountIdentifier?: string
  searchKey?: string
  sortType?: 'NAME' | 'LAST_EDIT'
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  limit?: number
  offset?: number
}

export type GetBusinessMappingListProps = Omit<
  GetProps<RestResponseBusinessMappingListDTO, unknown, GetBusinessMappingListQueryParams, void>,
  'path'
>

/**
 * Get List Of Business Mappings
 */
export const GetBusinessMappingList = (props: GetBusinessMappingListProps) => (
  <Get<RestResponseBusinessMappingListDTO, unknown, GetBusinessMappingListQueryParams, void>
    path={`/business-mapping`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetBusinessMappingListProps = Omit<
  UseGetProps<RestResponseBusinessMappingListDTO, unknown, GetBusinessMappingListQueryParams, void>,
  'path'
>

/**
 * Get List Of Business Mappings
 */
export const useGetBusinessMappingList = (props: UseGetBusinessMappingListProps) =>
  useGet<RestResponseBusinessMappingListDTO, unknown, GetBusinessMappingListQueryParams, void>(`/business-mapping`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CreateBusinessMappingQueryParams {
  accountIdentifier?: string
}

export type CreateBusinessMappingProps = Omit<
  MutateProps<RestResponseBusinessMapping, unknown, CreateBusinessMappingQueryParams, BusinessMappingRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create Business Mapping
 */
export const CreateBusinessMapping = (props: CreateBusinessMappingProps) => (
  <Mutate<RestResponseBusinessMapping, unknown, CreateBusinessMappingQueryParams, BusinessMappingRequestBody, void>
    verb="POST"
    path={`/business-mapping`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateBusinessMappingProps = Omit<
  UseMutateProps<
    RestResponseBusinessMapping,
    unknown,
    CreateBusinessMappingQueryParams,
    BusinessMappingRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Business Mapping
 */
export const useCreateBusinessMapping = (props: UseCreateBusinessMappingProps) =>
  useMutate<RestResponseBusinessMapping, unknown, CreateBusinessMappingQueryParams, BusinessMappingRequestBody, void>(
    'POST',
    `/business-mapping`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface UpdateBusinessMappingQueryParams {
  accountIdentifier?: string
}

export type UpdateBusinessMappingProps = Omit<
  MutateProps<RestResponseString, unknown, UpdateBusinessMappingQueryParams, BusinessMappingRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update Business Mapping
 */
export const UpdateBusinessMapping = (props: UpdateBusinessMappingProps) => (
  <Mutate<RestResponseString, unknown, UpdateBusinessMappingQueryParams, BusinessMappingRequestBody, void>
    verb="PUT"
    path={`/business-mapping`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateBusinessMappingProps = Omit<
  UseMutateProps<RestResponseString, unknown, UpdateBusinessMappingQueryParams, BusinessMappingRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update Business Mapping
 */
export const useUpdateBusinessMapping = (props: UseUpdateBusinessMappingProps) =>
  useMutate<RestResponseString, unknown, UpdateBusinessMappingQueryParams, BusinessMappingRequestBody, void>(
    'PUT',
    `/business-mapping`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetPerspectivesGivenBusinessMappingIdsQueryParams {
  accountIdentifier?: string
}

export type GetPerspectivesGivenBusinessMappingIdsProps = Omit<
  MutateProps<
    RestResponseListLinkedPerspectives,
    unknown,
    GetPerspectivesGivenBusinessMappingIdsQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get related Perspectives given Business Mapping Ids
 */
export const GetPerspectivesGivenBusinessMappingIds = (props: GetPerspectivesGivenBusinessMappingIdsProps) => (
  <Mutate<
    RestResponseListLinkedPerspectives,
    unknown,
    GetPerspectivesGivenBusinessMappingIdsQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >
    verb="POST"
    path={`/business-mapping/linkedPerspectives`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetPerspectivesGivenBusinessMappingIdsProps = Omit<
  UseMutateProps<
    RestResponseListLinkedPerspectives,
    unknown,
    GetPerspectivesGivenBusinessMappingIdsQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get related Perspectives given Business Mapping Ids
 */
export const useGetPerspectivesGivenBusinessMappingIds = (props: UseGetPerspectivesGivenBusinessMappingIdsProps) =>
  useMutate<
    RestResponseListLinkedPerspectives,
    unknown,
    GetPerspectivesGivenBusinessMappingIdsQueryParams,
    AnomalyFilterValuesBodyRequestBody,
    void
  >('POST', `/business-mapping/linkedPerspectives`, { base: getConfig('ccm/api'), ...props })

export interface DeleteBusinessMappingQueryParams {
  accountIdentifier?: string
}

export type DeleteBusinessMappingProps = Omit<
  MutateProps<RestResponseCostCategoryDeleteDTO, unknown, DeleteBusinessMappingQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Business Mapping
 */
export const DeleteBusinessMapping = (props: DeleteBusinessMappingProps) => (
  <Mutate<RestResponseCostCategoryDeleteDTO, unknown, DeleteBusinessMappingQueryParams, string, void>
    verb="DELETE"
    path={`/business-mapping`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteBusinessMappingProps = Omit<
  UseMutateProps<RestResponseCostCategoryDeleteDTO, unknown, DeleteBusinessMappingQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Business Mapping
 */
export const useDeleteBusinessMapping = (props: UseDeleteBusinessMappingProps) =>
  useMutate<RestResponseCostCategoryDeleteDTO, unknown, DeleteBusinessMappingQueryParams, string, void>(
    'DELETE',
    `/business-mapping`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetBusinessMappingQueryParams {
  accountIdentifier?: string
}

export interface GetBusinessMappingPathParams {
  id: string
}

export type GetBusinessMappingProps = Omit<
  GetProps<RestResponseBusinessMapping, unknown, GetBusinessMappingQueryParams, GetBusinessMappingPathParams>,
  'path'
> &
  GetBusinessMappingPathParams

/**
 * Get Business Mapping
 */
export const GetBusinessMapping = ({ id, ...props }: GetBusinessMappingProps) => (
  <Get<RestResponseBusinessMapping, unknown, GetBusinessMappingQueryParams, GetBusinessMappingPathParams>
    path={`/business-mapping/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetBusinessMappingProps = Omit<
  UseGetProps<RestResponseBusinessMapping, unknown, GetBusinessMappingQueryParams, GetBusinessMappingPathParams>,
  'path'
> &
  GetBusinessMappingPathParams

/**
 * Get Business Mapping
 */
export const useGetBusinessMapping = ({ id, ...props }: UseGetBusinessMappingProps) =>
  useGet<RestResponseBusinessMapping, unknown, GetBusinessMappingQueryParams, GetBusinessMappingPathParams>(
    (paramsInPath: GetBusinessMappingPathParams) => `/business-mapping/${paramsInPath.id}`,
    { base: getConfig('ccm/api'), pathParams: { id }, ...props }
  )

export interface CCMK8SMetadataQueryParams {
  accountIdentifier: string
}

export type CCMK8SMetadataProps = Omit<
  MutateProps<ResponseCcmK8sMetaInfoResponseDTO, unknown, CCMK8SMetadataQueryParams, CcmK8sMetaDTO, void>,
  'path' | 'verb'
>

/**
 * CCM K8S Metadata
 */
export const CCMK8SMetadata = (props: CCMK8SMetadataProps) => (
  <Mutate<ResponseCcmK8sMetaInfoResponseDTO, unknown, CCMK8SMetadataQueryParams, CcmK8sMetaDTO, void>
    verb="POST"
    path={`/ccmK8sMeta`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCCMK8SMetadataProps = Omit<
  UseMutateProps<ResponseCcmK8sMetaInfoResponseDTO, unknown, CCMK8SMetadataQueryParams, CcmK8sMetaDTO, void>,
  'path' | 'verb'
>

/**
 * CCM K8S Metadata
 */
export const useCCMK8SMetadata = (props: UseCCMK8SMetadataProps) =>
  useMutate<ResponseCcmK8sMetaInfoResponseDTO, unknown, CCMK8SMetadataQueryParams, CcmK8sMetaDTO, void>(
    'POST',
    `/ccmK8sMeta`,
    { base: getConfig('ccm/api'), ...props }
  )

export type GetCENGMicroserviceVersionProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get CE-NG Manager version
 */
export const GetCENGMicroserviceVersion = (props: GetCENGMicroserviceVersionProps) => (
  <Get<ResponseString, unknown, void, void> path={`/cenghealth`} base={getConfig('ccm/api')} {...props} />
)

export type UseGetCENGMicroserviceVersionProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get CE-NG Manager version
 */
export const useGetCENGMicroserviceVersion = (props: UseGetCENGMicroserviceVersionProps) =>
  useGet<ResponseString, unknown, void, void>(`/cenghealth`, { base: getConfig('ccm/api'), ...props })

export interface AwsaccountconnectiondetailQueryParams {
  accountIdentifier?: string
  is_gov?: boolean
}

export type AwsaccountconnectiondetailProps = Omit<
  GetProps<ResponseAwsAccountConnectionDetail, unknown, AwsaccountconnectiondetailQueryParams, void>,
  'path'
>

/**
 * Get Aws account connection details
 */
export const Awsaccountconnectiondetail = (props: AwsaccountconnectiondetailProps) => (
  <Get<ResponseAwsAccountConnectionDetail, unknown, AwsaccountconnectiondetailQueryParams, void>
    path={`/connector/awsaccountconnectiondetail`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAwsaccountconnectiondetailProps = Omit<
  UseGetProps<ResponseAwsAccountConnectionDetail, unknown, AwsaccountconnectiondetailQueryParams, void>,
  'path'
>

/**
 * Get Aws account connection details
 */
export const useAwsaccountconnectiondetail = (props: UseAwsaccountconnectiondetailProps) =>
  useGet<ResponseAwsAccountConnectionDetail, unknown, AwsaccountconnectiondetailQueryParams, void>(
    `/connector/awsaccountconnectiondetail`,
    { base: getConfig('ccm/api'), ...props }
  )

export type AzureappclientidProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get Azure application client Id
 */
export const Azureappclientid = (props: AzureappclientidProps) => (
  <Get<ResponseString, unknown, void, void>
    path={`/connector/azureappclientid`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAzureappclientidProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get Azure application client Id
 */
export const useAzureappclientid = (props: UseAzureappclientidProps) =>
  useGet<ResponseString, unknown, void, void>(`/connector/azureappclientid`, { base: getConfig('ccm/api'), ...props })

export interface GcpserviceaccountQueryParams {
  accountIdentifier?: string
}

export type GcpserviceaccountProps = Omit<GetProps<ResponseString, unknown, GcpserviceaccountQueryParams, void>, 'path'>

/**
 * Provision and Get GCP Service Account
 */
export const Gcpserviceaccount = (props: GcpserviceaccountProps) => (
  <Get<ResponseString, unknown, GcpserviceaccountQueryParams, void>
    path={`/connector/gcpserviceaccount`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGcpserviceaccountProps = Omit<
  UseGetProps<ResponseString, unknown, GcpserviceaccountQueryParams, void>,
  'path'
>

/**
 * Provision and Get GCP Service Account
 */
export const useGcpserviceaccount = (props: UseGcpserviceaccountProps) =>
  useGet<ResponseString, unknown, GcpserviceaccountQueryParams, void>(`/connector/gcpserviceaccount`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface ClusterDataQueryParams {
  accountIdentifier: string
  startTime?: string
  endTime?: string
}

export type ClusterDataProps = Omit<
  MutateProps<ResponseListClusterCostDetails, unknown, ClusterDataQueryParams, ClusterCostDetailsQueryParamsDTO, void>,
  'path' | 'verb'
>

/**
 * Return cluster data
 */
export const ClusterData = (props: ClusterDataProps) => (
  <Mutate<ResponseListClusterCostDetails, unknown, ClusterDataQueryParams, ClusterCostDetailsQueryParamsDTO, void>
    verb="POST"
    path={`/costdetails/clusterData`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseClusterDataProps = Omit<
  UseMutateProps<
    ResponseListClusterCostDetails,
    unknown,
    ClusterDataQueryParams,
    ClusterCostDetailsQueryParamsDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Return cluster data
 */
export const useClusterData = (props: UseClusterDataProps) =>
  useMutate<ResponseListClusterCostDetails, unknown, ClusterDataQueryParams, ClusterCostDetailsQueryParamsDTO, void>(
    'POST',
    `/costdetails/clusterData`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface CostdetailoverviewQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime?: string
  endTime?: string
}

export type CostdetailoverviewProps = Omit<
  MutateProps<ResponseStatsInfo, unknown, CostdetailoverviewQueryParams, CostDetailsQueryParamsDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Returns an overview of the cost
 */
export const Costdetailoverview = (props: CostdetailoverviewProps) => (
  <Mutate<ResponseStatsInfo, unknown, CostdetailoverviewQueryParams, CostDetailsQueryParamsDTORequestBody, void>
    verb="POST"
    path={`/costdetails/overview`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCostdetailoverviewProps = Omit<
  UseMutateProps<ResponseStatsInfo, unknown, CostdetailoverviewQueryParams, CostDetailsQueryParamsDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Returns an overview of the cost
 */
export const useCostdetailoverview = (props: UseCostdetailoverviewProps) =>
  useMutate<ResponseStatsInfo, unknown, CostdetailoverviewQueryParams, CostDetailsQueryParamsDTORequestBody, void>(
    'POST',
    `/costdetails/overview`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface CostdetailtabularQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime?: string
  endTime?: string
}

export type CostdetailtabularProps = Omit<
  MutateProps<
    ResponsePerspectiveEntityStatsData,
    unknown,
    CostdetailtabularQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Return cost detail in tabular format
 */
export const Costdetailtabular = (props: CostdetailtabularProps) => (
  <Mutate<
    ResponsePerspectiveEntityStatsData,
    unknown,
    CostdetailtabularQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >
    verb="POST"
    path={`/costdetails/tabularformat`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCostdetailtabularProps = Omit<
  UseMutateProps<
    ResponsePerspectiveEntityStatsData,
    unknown,
    CostdetailtabularQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Return cost detail in tabular format
 */
export const useCostdetailtabular = (props: UseCostdetailtabularProps) =>
  useMutate<
    ResponsePerspectiveEntityStatsData,
    unknown,
    CostdetailtabularQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >('POST', `/costdetails/tabularformat`, { base: getConfig('ccm/api'), ...props })

export interface CostdetailttimeseriesQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime?: string
  endTime?: string
}

export type CostdetailttimeseriesProps = Omit<
  MutateProps<
    ResponsePerspectiveTimeSeriesData,
    unknown,
    CostdetailttimeseriesQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Return cost detail in time series format
 */
export const Costdetailttimeseries = (props: CostdetailttimeseriesProps) => (
  <Mutate<
    ResponsePerspectiveTimeSeriesData,
    unknown,
    CostdetailttimeseriesQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >
    verb="POST"
    path={`/costdetails/timeseriesformat`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCostdetailttimeseriesProps = Omit<
  UseMutateProps<
    ResponsePerspectiveTimeSeriesData,
    unknown,
    CostdetailttimeseriesQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Return cost detail in time series format
 */
export const useCostdetailttimeseries = (props: UseCostdetailttimeseriesProps) =>
  useMutate<
    ResponsePerspectiveTimeSeriesData,
    unknown,
    CostdetailttimeseriesQueryParams,
    CostDetailsQueryParamsDTORequestBody,
    void
  >('POST', `/costdetails/timeseriesformat`, { base: getConfig('ccm/api'), ...props })

export interface GetCurrencyConversionFactorsQueryParams {
  accountIdentifier: string
  destinationCurrency:
    | 'AED'
    | 'ARS'
    | 'AUD'
    | 'BRL'
    | 'CAD'
    | 'CNY'
    | 'EUR'
    | 'GBP'
    | 'INR'
    | 'JPY'
    | 'MXN'
    | 'NOK'
    | 'NZD'
    | 'RUB'
    | 'SGD'
    | 'USD'
    | 'NONE'
}

export type GetCurrencyConversionFactorsProps = Omit<
  GetProps<ResponseCurrencyConversionFactorDTO, unknown, GetCurrencyConversionFactorsQueryParams, void>,
  'path'
>

/**
 * Get conversion factors for an account
 */
export const GetCurrencyConversionFactors = (props: GetCurrencyConversionFactorsProps) => (
  <Get<ResponseCurrencyConversionFactorDTO, unknown, GetCurrencyConversionFactorsQueryParams, void>
    path={`/currency-preference/conversion-factors`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCurrencyConversionFactorsProps = Omit<
  UseGetProps<ResponseCurrencyConversionFactorDTO, unknown, GetCurrencyConversionFactorsQueryParams, void>,
  'path'
>

/**
 * Get conversion factors for an account
 */
export const useGetCurrencyConversionFactors = (props: UseGetCurrencyConversionFactorsProps) =>
  useGet<ResponseCurrencyConversionFactorDTO, unknown, GetCurrencyConversionFactorsQueryParams, void>(
    `/currency-preference/conversion-factors`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface CreateCurrencyConversionFactorsQueryParams {
  accountIdentifier: string
  destinationCurrency:
    | 'AED'
    | 'ARS'
    | 'AUD'
    | 'BRL'
    | 'CAD'
    | 'CNY'
    | 'EUR'
    | 'GBP'
    | 'INR'
    | 'JPY'
    | 'MXN'
    | 'NOK'
    | 'NZD'
    | 'RUB'
    | 'SGD'
    | 'USD'
    | 'NONE'
}

export type CreateCurrencyConversionFactorsProps = Omit<
  MutateProps<ResponseBoolean, unknown, CreateCurrencyConversionFactorsQueryParams, CurrencyConversionFactorDTO, void>,
  'path' | 'verb'
>

/**
 * Create conversion factors for an account
 */
export const CreateCurrencyConversionFactors = (props: CreateCurrencyConversionFactorsProps) => (
  <Mutate<ResponseBoolean, unknown, CreateCurrencyConversionFactorsQueryParams, CurrencyConversionFactorDTO, void>
    verb="POST"
    path={`/currency-preference/conversion-factors`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateCurrencyConversionFactorsProps = Omit<
  UseMutateProps<
    ResponseBoolean,
    unknown,
    CreateCurrencyConversionFactorsQueryParams,
    CurrencyConversionFactorDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Create conversion factors for an account
 */
export const useCreateCurrencyConversionFactors = (props: UseCreateCurrencyConversionFactorsProps) =>
  useMutate<ResponseBoolean, unknown, CreateCurrencyConversionFactorsQueryParams, CurrencyConversionFactorDTO, void>(
    'POST',
    `/currency-preference/conversion-factors`,
    { base: getConfig('ccm/api'), ...props }
  )

export type GetAllCurrenciesProps = Omit<GetProps<ResponseCurrencyDTO, unknown, void, void>, 'path'>

/**
 * Get all destination currencies
 */
export const GetAllCurrencies = (props: GetAllCurrenciesProps) => (
  <Get<ResponseCurrencyDTO, unknown, void, void>
    path={`/currency-preference/currencies`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetAllCurrenciesProps = Omit<UseGetProps<ResponseCurrencyDTO, unknown, void, void>, 'path'>

/**
 * Get all destination currencies
 */
export const useGetAllCurrencies = (props: UseGetAllCurrenciesProps) =>
  useGet<ResponseCurrencyDTO, unknown, void, void>(`/currency-preference/currencies`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetDestinationCurrencyConversionFactorQueryParams {
  accountIdentifier: string
  cloudServiceProvider: 'AWS' | 'GCP' | 'AZURE' | 'K8S'
  sourceCurrency:
    | 'AED'
    | 'ARS'
    | 'AUD'
    | 'BRL'
    | 'CAD'
    | 'CNY'
    | 'EUR'
    | 'GBP'
    | 'INR'
    | 'JPY'
    | 'MXN'
    | 'NOK'
    | 'NZD'
    | 'RUB'
    | 'SGD'
    | 'USD'
    | 'NONE'
}

export type GetDestinationCurrencyConversionFactorProps = Omit<
  GetProps<ResponseDouble, unknown, GetDestinationCurrencyConversionFactorQueryParams, void>,
  'path'
>

/**
 * Get destination currency conversion factor for an account
 */
export const GetDestinationCurrencyConversionFactor = (props: GetDestinationCurrencyConversionFactorProps) => (
  <Get<ResponseDouble, unknown, GetDestinationCurrencyConversionFactorQueryParams, void>
    path={`/currency-preference/destination-conversion-factor`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetDestinationCurrencyConversionFactorProps = Omit<
  UseGetProps<ResponseDouble, unknown, GetDestinationCurrencyConversionFactorQueryParams, void>,
  'path'
>

/**
 * Get destination currency conversion factor for an account
 */
export const useGetDestinationCurrencyConversionFactor = (props: UseGetDestinationCurrencyConversionFactorProps) =>
  useGet<ResponseDouble, unknown, GetDestinationCurrencyConversionFactorQueryParams, void>(
    `/currency-preference/destination-conversion-factor`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetFilterListQueryParams {
  pageIndex?: number
  pageSize?: number
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
}

export type GetFilterListProps = Omit<
  GetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const GetFilterList = (props: GetFilterListProps) => (
  <Get<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>
    path={`/filters`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetFilterListProps = Omit<
  UseGetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const useGetFilterList = (props: UseGetFilterListProps) =>
  useGet<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>(`/filters`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface PostFilterQueryParams {
  accountIdentifier: string
}

export type PostFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const PostFilter = (props: PostFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>
    verb="POST"
    path={`/filters`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UsePostFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const usePostFilter = (props: UsePostFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>('POST', `/filters`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface UpdateFilterQueryParams {
  accountIdentifier: string
}

export type UpdateFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const UpdateFilter = (props: UpdateFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>
    verb="PUT"
    path={`/filters`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const useUpdateFilter = (props: UseUpdateFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>(
    'PUT',
    `/filters`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface DeleteFilterQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
}

export type DeleteFilterProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const DeleteFilter = (props: DeleteFilterProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>
    verb="DELETE"
    path={`/filters`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteFilterProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const useDeleteFilter = (props: UseDeleteFilterProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>('DELETE', `/filters`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetFilterQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
    | 'EnvironmentGroup'
    | 'FileStore'
    | 'CCMRecommendation'
    | 'Anomaly'
    | 'Environment'
    | 'RuleExecution'
}

export interface GetFilterPathParams {
  identifier: string
}

export type GetFilterProps = Omit<
  GetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const GetFilter = ({ identifier, ...props }: GetFilterProps) => (
  <Get<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>
    path={`/filters/${identifier}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetFilterProps = Omit<
  UseGetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const useGetFilter = ({ identifier, ...props }: UseGetFilterProps) =>
  useGet<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>(
    (paramsInPath: GetFilterPathParams) => `/filters/${paramsInPath.identifier}`,
    { base: getConfig('ccm/api'), pathParams: { identifier }, ...props }
  )

export interface AddRuleEnforcementQueryParams {
  accountIdentifier: string
}

export type AddRuleEnforcementProps = Omit<
  MutateProps<
    ResponseRuleEnforcement,
    Failure | Error,
    AddRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add a new rule Enforcement api
 */
export const AddRuleEnforcement = (props: AddRuleEnforcementProps) => (
  <Mutate<
    ResponseRuleEnforcement,
    Failure | Error,
    AddRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >
    verb="POST"
    path={`/governance/enforcement`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAddRuleEnforcementProps = Omit<
  UseMutateProps<
    ResponseRuleEnforcement,
    Failure | Error,
    AddRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add a new rule Enforcement api
 */
export const useAddRuleEnforcement = (props: UseAddRuleEnforcementProps) =>
  useMutate<
    ResponseRuleEnforcement,
    Failure | Error,
    AddRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >('POST', `/governance/enforcement`, { base: getConfig('ccm/api'), ...props })

export interface UpdateEnforcementQueryParams {
  accountIdentifier: string
}

export type UpdateEnforcementProps = Omit<
  MutateProps<
    ResponseRuleEnforcement,
    Failure | Error,
    UpdateEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update a Rule enforcement
 */
export const UpdateEnforcement = (props: UpdateEnforcementProps) => (
  <Mutate<
    ResponseRuleEnforcement,
    Failure | Error,
    UpdateEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >
    verb="PUT"
    path={`/governance/enforcement`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateEnforcementProps = Omit<
  UseMutateProps<
    ResponseRuleEnforcement,
    Failure | Error,
    UpdateEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update a Rule enforcement
 */
export const useUpdateEnforcement = (props: UseUpdateEnforcementProps) =>
  useMutate<
    ResponseRuleEnforcement,
    Failure | Error,
    UpdateEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >('PUT', `/governance/enforcement`, { base: getConfig('ccm/api'), ...props })

export interface GetRuleEnforcementCountQueryParams {
  accountIdentifier: string
}

export type GetRuleEnforcementCountProps = Omit<
  MutateProps<ResponseEnforcementCount, Failure | Error, GetRuleEnforcementCountQueryParams, EnforcementCountDTO, void>,
  'path' | 'verb'
>

/**
 * Get enforcement count
 */
export const GetRuleEnforcementCount = (props: GetRuleEnforcementCountProps) => (
  <Mutate<ResponseEnforcementCount, Failure | Error, GetRuleEnforcementCountQueryParams, EnforcementCountDTO, void>
    verb="POST"
    path={`/governance/enforcement/count`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleEnforcementCountProps = Omit<
  UseMutateProps<
    ResponseEnforcementCount,
    Failure | Error,
    GetRuleEnforcementCountQueryParams,
    EnforcementCountDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Get enforcement count
 */
export const useGetRuleEnforcementCount = (props: UseGetRuleEnforcementCountProps) =>
  useMutate<ResponseEnforcementCount, Failure | Error, GetRuleEnforcementCountQueryParams, EnforcementCountDTO, void>(
    'POST',
    `/governance/enforcement/count`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRuleEnforcementQueryParams {
  accountIdentifier: string
}

export type GetRuleEnforcementProps = Omit<
  MutateProps<
    ResponseListRuleEnforcement,
    Failure | Error,
    GetRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get enforcement list
 */
export const GetRuleEnforcement = (props: GetRuleEnforcementProps) => (
  <Mutate<
    ResponseListRuleEnforcement,
    Failure | Error,
    GetRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >
    verb="POST"
    path={`/governance/enforcement/list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleEnforcementProps = Omit<
  UseMutateProps<
    ResponseListRuleEnforcement,
    Failure | Error,
    GetRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Get enforcement list
 */
export const useGetRuleEnforcement = (props: UseGetRuleEnforcementProps) =>
  useMutate<
    ResponseListRuleEnforcement,
    Failure | Error,
    GetRuleEnforcementQueryParams,
    CreateRuleEnforcementDTORequestBody,
    void
  >('POST', `/governance/enforcement/list`, { base: getConfig('ccm/api'), ...props })

export interface DeleteRuleEnforcementQueryParams {
  accountIdentifier: string
}

export type DeleteRuleEnforcementProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteRuleEnforcementQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule
 */
export const DeleteRuleEnforcement = (props: DeleteRuleEnforcementProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteRuleEnforcementQueryParams, string, void>
    verb="DELETE"
    path={`/governance/enforcement`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteRuleEnforcementProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteRuleEnforcementQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule
 */
export const useDeleteRuleEnforcement = (props: UseDeleteRuleEnforcementProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteRuleEnforcementQueryParams, string, void>(
    'DELETE',
    `/governance/enforcement`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface EnqueueAdhocGovernanceJobQueryParams {
  accountIdentifier?: string
}

export type EnqueueAdhocGovernanceJobProps = Omit<
  MutateProps<
    ResponseGovernanceEnqueueResponseDTO,
    Failure | Error,
    EnqueueAdhocGovernanceJobQueryParams,
    GovernanceJobEnqueueDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Enqueues job for execution
 */
export const EnqueueAdhocGovernanceJob = (props: EnqueueAdhocGovernanceJobProps) => (
  <Mutate<
    ResponseGovernanceEnqueueResponseDTO,
    Failure | Error,
    EnqueueAdhocGovernanceJobQueryParams,
    GovernanceJobEnqueueDTO,
    void
  >
    verb="POST"
    path={`/governance/enqueueAdhoc`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseEnqueueAdhocGovernanceJobProps = Omit<
  UseMutateProps<
    ResponseGovernanceEnqueueResponseDTO,
    Failure | Error,
    EnqueueAdhocGovernanceJobQueryParams,
    GovernanceJobEnqueueDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Enqueues job for execution
 */
export const useEnqueueAdhocGovernanceJob = (props: UseEnqueueAdhocGovernanceJobProps) =>
  useMutate<
    ResponseGovernanceEnqueueResponseDTO,
    Failure | Error,
    EnqueueAdhocGovernanceJobQueryParams,
    GovernanceJobEnqueueDTO,
    void
  >('POST', `/governance/enqueueAdhoc`, { base: getConfig('ccm/api'), ...props })

export interface GetSchemaForEntityQueryParams {
  accountIdentifier: string
  projectIdentifier?: string
  orgIdentifier?: string
  entityType?:
    | 'CreatePR'
    | 'GITOPS_MERGE_PR'
    | 'Projects'
    | 'Pipelines'
    | 'PipelineSteps'
    | 'Http'
    | 'Email'
    | 'JiraCreate'
    | 'JiraUpdate'
    | 'JiraApproval'
    | 'HarnessApproval'
    | 'CustomApproval'
    | 'Barrier'
    | 'Queue'
    | 'FlagConfiguration'
    | 'ShellScript'
    | 'K8sCanaryDeploy'
    | 'K8sApply'
    | 'K8sBlueGreenDeploy'
    | 'K8sRollingDeploy'
    | 'K8sRollingRollback'
    | 'K8sScale'
    | 'K8sDelete'
    | 'K8sBGSwapServices'
    | 'K8sCanaryDelete'
    | 'TerraformApply'
    | 'TerraformPlan'
    | 'TerraformDestroy'
    | 'TerraformRollback'
    | 'HelmDeploy'
    | 'HelmRollback'
    | 'Connectors'
    | 'Secrets'
    | 'Files'
    | 'Service'
    | 'Environment'
    | 'EnvironmentGroup'
    | 'InputSets'
    | 'CvConfig'
    | 'Verify'
    | 'Delegates'
    | 'DelegateConfigurations'
    | 'CvVerificationJob'
    | 'IntegrationStage'
    | 'IntegrationSteps'
    | 'SecurityStage'
    | 'SecuritySteps'
    | 'CvKubernetesActivitySource'
    | 'DeploymentSteps'
    | 'DeploymentStage'
    | 'ApprovalStage'
    | 'PipelineStage'
    | 'FeatureFlagStage'
    | 'Template'
    | 'TemplateStage'
    | 'CustomDeployment'
    | 'Triggers'
    | 'MonitoredService'
    | 'GitRepositories'
    | 'FeatureFlags'
    | 'ServiceNowApproval'
    | 'ServiceNowCreate'
    | 'ServiceNowUpdate'
    | 'ServiceNowImportSet'
    | 'GovernancePolicies'
    | 'POLICY_STEP'
    | 'Run'
    | 'RunTests'
    | 'Plugin'
    | 'RestoreCacheGCS'
    | 'RestoreCacheS3'
    | 'SaveCacheGCS'
    | 'SaveCacheS3'
    | 'Security'
    | 'AquaTrivy'
    | 'AWSECR'
    | 'Bandit'
    | 'BlackDuck'
    | 'Brakeman'
    | 'Burp'
    | 'Checkmarx'
    | 'Clair'
    | 'DataTheorem'
    | 'DockerContentTrust'
    | 'External'
    | 'FortifyOnDemand'
    | 'Grype'
    | 'JfrogXray'
    | 'Mend'
    | 'Metasploit'
    | 'Nessus'
    | 'NexusIQ'
    | 'Nikto'
    | 'Nmap'
    | 'Openvas'
    | 'Owasp'
    | 'PrismaCloud'
    | 'Prowler'
    | 'Qualys'
    | 'Reapsaw'
    | 'ShiftLeft'
    | 'Sniper'
    | 'Snyk'
    | 'Sonarqube'
    | 'Sysdig'
    | 'Tenable'
    | 'Veracode'
    | 'Zap'
    | 'GitClone'
    | 'ArtifactoryUpload'
    | 'GCSUpload'
    | 'S3Upload'
    | 'BuildAndPushGCR'
    | 'BuildAndPushECR'
    | 'BuildAndPushDockerRegistry'
    | 'CreateStack'
    | 'DeleteStack'
    | 'ServerlessAwsLambdaDeploy'
    | 'ServerlessAwsLambdaRollback'
    | 'CustomStage'
    | 'RollbackStack'
    | 'Infrastructure'
    | 'Command'
    | 'StrategyNode'
    | 'AZURE_SLOT_DEPLOYMENT_STEP'
    | 'AzureTrafficShift'
    | 'FetchInstanceScript'
    | 'AzureSwapSlot'
    | 'AzureWebAppRollback'
    | 'JenkinsBuild'
    | 'EcsRollingDeploy'
    | 'EcsRollingRollback'
    | 'EcsCanaryDeploy'
    | 'EcsCanaryDelete'
    | 'AzureCreateARMResource'
    | 'BuildAndPushACR'
    | 'AzureCreateBPResource'
    | 'AzureARMRollback'
    | 'Background'
    | 'Wait'
    | 'ArtifactSource'
    | 'EcsBlueGreenCreateService'
    | 'EcsBlueGreenSwapTargetGroups'
    | 'EcsBlueGreenRollback'
    | 'ShellScriptProvision'
    | 'Freeze'
    | 'GitOpsUpdateReleaseRepo'
    | 'GitOpsFetchLinkedApps'
    | 'EcsRunTask'
    | 'Chaos'
    | 'ElastigroupDeploy'
    | 'ElastigroupRollback'
    | 'Action'
    | 'ElastigroupSetup'
    | 'Bitrise'
    | 'TerraformPlan'
    | 'TerraformApply'
    | 'TerraformDestroy'
    | 'TerraformRollback'
    | 'IACMStage'
    | 'IACMStep'
    | 'IACM'
    | 'Container'
    | 'IACM'
    | 'IACM'
    | 'ElastigroupBGStageSetup'
    | 'ElastigroupSwapRoute'
    | 'AsgCanaryDeploy'
    | 'AsgCanaryDelete'
    | 'SwapRoutes'
    | 'SwapRollback'
    | 'AppResize'
    | 'AppRollback'
    | 'CanaryAppSetup'
    | 'BGAppSetup'
    | 'BasicAppSetup'
    | 'TanzuCommand'
    | 'AsgRollingDeploy'
    | 'AsgRollingRollback'
    | 'GovernanceRuleAWS'
    | 'TasRollingDeploy'
    | 'TasRollingRollback'
    | 'K8sDryRun'
    | 'AsgBlueGreenSwapService'
    | 'AsgBlueGreenDeploy'
    | 'AsgBlueGreenRollback'
    | 'TerraformCloudRun'
    | 'TerraformCloudRollback'
    | 'DeployCloudFunction'
    | 'DeployCloudFunctionWithNoTraffic'
    | 'CloudFunctionTrafficShift'
    | 'CloudFunctionRollback'
    | 'AwsLambdaDeploy'
    | 'AwsSamDeploy'
    | 'AwsSamRollback'
    | 'SscaOrchestration'
    | 'AwsLambdaRollback'
    | 'GITOPS_SYNC'
    | 'BambooBuild'
    | 'CdSscaOrchestration'
    | 'TasRouteMapping'
    | 'AWSSecurityHub'
    | 'CustomIngest'
    | 'BackstageEnvironmentVariable'
    | 'Fossa'
    | 'CodeQL'
    | 'Gitleaks'
    | 'DeployCloudFunctionGenOne'
    | 'RollbackCloudFunctionGenOne'
}

export type GetSchemaForEntityProps = Omit<
  GetProps<ResponseJsonNode, Failure | Error, GetSchemaForEntityQueryParams, void>,
  'path'
>

/**
 * Get Schema for entity
 */
export const GetSchemaForEntity = (props: GetSchemaForEntityProps) => (
  <Get<ResponseJsonNode, Failure | Error, GetSchemaForEntityQueryParams, void>
    path={`/governance/entitySchema`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetSchemaForEntityProps = Omit<
  UseGetProps<ResponseJsonNode, Failure | Error, GetSchemaForEntityQueryParams, void>,
  'path'
>

/**
 * Get Schema for entity
 */
export const useGetSchemaForEntity = (props: UseGetSchemaForEntityProps) =>
  useGet<ResponseJsonNode, Failure | Error, GetSchemaForEntityQueryParams, void>(`/governance/entitySchema`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface AddRuleExecutionQueryParams {
  accountIdentifier: string
}

export type AddRuleExecutionProps = Omit<
  MutateProps<ResponseRuleExecution, Failure | Error, AddRuleExecutionQueryParams, CreateRuleExecutionDTO, void>,
  'path' | 'verb'
>

/**
 * Add a new rule execution api
 */
export const AddRuleExecution = (props: AddRuleExecutionProps) => (
  <Mutate<ResponseRuleExecution, Failure | Error, AddRuleExecutionQueryParams, CreateRuleExecutionDTO, void>
    verb="POST"
    path={`/governance/execution`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAddRuleExecutionProps = Omit<
  UseMutateProps<ResponseRuleExecution, Failure | Error, AddRuleExecutionQueryParams, CreateRuleExecutionDTO, void>,
  'path' | 'verb'
>

/**
 * Add a new rule execution api
 */
export const useAddRuleExecution = (props: UseAddRuleExecutionProps) =>
  useMutate<ResponseRuleExecution, Failure | Error, AddRuleExecutionQueryParams, CreateRuleExecutionDTO, void>(
    'POST',
    `/governance/execution`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetExecutionDetailQueryParams {
  accountIdentifier: string
}

export type GetExecutionDetailProps = Omit<
  MutateProps<ResponseExecutionDetails, Failure | Error, GetExecutionDetailQueryParams, ExecutionDetailDTO, void>,
  'path' | 'verb'
>

/**
 * execution Detail
 */
export const GetExecutionDetail = (props: GetExecutionDetailProps) => (
  <Mutate<ResponseExecutionDetails, Failure | Error, GetExecutionDetailQueryParams, ExecutionDetailDTO, void>
    verb="POST"
    path={`/governance/execution/details`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetExecutionDetailProps = Omit<
  UseMutateProps<ResponseExecutionDetails, Failure | Error, GetExecutionDetailQueryParams, ExecutionDetailDTO, void>,
  'path' | 'verb'
>

/**
 * execution Detail
 */
export const useGetExecutionDetail = (props: UseGetExecutionDetailProps) =>
  useMutate<ResponseExecutionDetails, Failure | Error, GetExecutionDetailQueryParams, ExecutionDetailDTO, void>(
    'POST',
    `/governance/execution/details`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRuleExecutionsFilterValuesQueryParams {
  accountIdentifier: string
}

export type GetRuleExecutionsFilterValuesProps = Omit<
  GetProps<ResponseFilterValues, Failure | Error, GetRuleExecutionsFilterValuesQueryParams, void>,
  'path'
>

/**
 * get Rule Execution Filter Values
 */
export const GetRuleExecutionsFilterValues = (props: GetRuleExecutionsFilterValuesProps) => (
  <Get<ResponseFilterValues, Failure | Error, GetRuleExecutionsFilterValuesQueryParams, void>
    path={`/governance/execution/filter-value`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleExecutionsFilterValuesProps = Omit<
  UseGetProps<ResponseFilterValues, Failure | Error, GetRuleExecutionsFilterValuesQueryParams, void>,
  'path'
>

/**
 * get Rule Execution Filter Values
 */
export const useGetRuleExecutionsFilterValues = (props: UseGetRuleExecutionsFilterValuesProps) =>
  useGet<ResponseFilterValues, Failure | Error, GetRuleExecutionsFilterValuesQueryParams, void>(
    `/governance/execution/filter-value`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRuleExecutionsQueryParams {
  accountIdentifier: string
}

export type GetRuleExecutionsProps = Omit<
  MutateProps<
    ResponseRuleExecutionList,
    Failure | Error,
    GetRuleExecutionsQueryParams,
    CreateRuleExecutionFilterDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Get execution for account
 */
export const GetRuleExecutions = (props: GetRuleExecutionsProps) => (
  <Mutate<ResponseRuleExecutionList, Failure | Error, GetRuleExecutionsQueryParams, CreateRuleExecutionFilterDTO, void>
    verb="POST"
    path={`/governance/execution/list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleExecutionsProps = Omit<
  UseMutateProps<
    ResponseRuleExecutionList,
    Failure | Error,
    GetRuleExecutionsQueryParams,
    CreateRuleExecutionFilterDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * Get execution for account
 */
export const useGetRuleExecutions = (props: UseGetRuleExecutionsProps) =>
  useMutate<
    ResponseRuleExecutionList,
    Failure | Error,
    GetRuleExecutionsQueryParams,
    CreateRuleExecutionFilterDTO,
    void
  >('POST', `/governance/execution/list`, { base: getConfig('ccm/api'), ...props })

export interface GetRuleExecutionDetailsQueryParams {
  accountIdentifier: string
}

export interface GetRuleExecutionDetailsPathParams {
  ruleExecutionId: string
}

export type GetRuleExecutionDetailsProps = Omit<
  GetProps<void, Failure | Error, GetRuleExecutionDetailsQueryParams, GetRuleExecutionDetailsPathParams>,
  'path'
> &
  GetRuleExecutionDetailsPathParams

/**
 * Return logs for a rule execution
 */
export const GetRuleExecutionDetails = ({ ruleExecutionId, ...props }: GetRuleExecutionDetailsProps) => (
  <Get<void, Failure | Error, GetRuleExecutionDetailsQueryParams, GetRuleExecutionDetailsPathParams>
    path={`/governance/execution/${ruleExecutionId}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleExecutionDetailsProps = Omit<
  UseGetProps<void, Failure | Error, GetRuleExecutionDetailsQueryParams, GetRuleExecutionDetailsPathParams>,
  'path'
> &
  GetRuleExecutionDetailsPathParams

/**
 * Return logs for a rule execution
 */
export const useGetRuleExecutionDetails = ({ ruleExecutionId, ...props }: UseGetRuleExecutionDetailsProps) =>
  useGet<void, Failure | Error, GetRuleExecutionDetailsQueryParams, GetRuleExecutionDetailsPathParams>(
    (paramsInPath: GetRuleExecutionDetailsPathParams) => `/governance/execution/${paramsInPath.ruleExecutionId}`,
    { base: getConfig('ccm/api'), pathParams: { ruleExecutionId }, ...props }
  )

export interface CreateNewRuleQueryParams {
  accountIdentifier: string
}

export type CreateNewRuleProps = Omit<
  MutateProps<ResponseRule, Failure | Error, CreateNewRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Add a new rule
 */
export const CreateNewRule = (props: CreateNewRuleProps) => (
  <Mutate<ResponseRule, Failure | Error, CreateNewRuleQueryParams, CreateRuleDTORequestBody, void>
    verb="POST"
    path={`/governance/rule`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateNewRuleProps = Omit<
  UseMutateProps<ResponseRule, Failure | Error, CreateNewRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Add a new rule
 */
export const useCreateNewRule = (props: UseCreateNewRuleProps) =>
  useMutate<ResponseRule, Failure | Error, CreateNewRuleQueryParams, CreateRuleDTORequestBody, void>(
    'POST',
    `/governance/rule`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface UpdateRuleQueryParams {
  accountIdentifier: string
}

export type UpdateRuleProps = Omit<
  MutateProps<ResponseRule, Failure | Error, UpdateRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a existing Rule
 */
export const UpdateRule = (props: UpdateRuleProps) => (
  <Mutate<ResponseRule, Failure | Error, UpdateRuleQueryParams, CreateRuleDTORequestBody, void>
    verb="PUT"
    path={`/governance/rule`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateRuleProps = Omit<
  UseMutateProps<ResponseRule, Failure | Error, UpdateRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a existing Rule
 */
export const useUpdateRule = (props: UseUpdateRuleProps) =>
  useMutate<ResponseRule, Failure | Error, UpdateRuleQueryParams, CreateRuleDTORequestBody, void>(
    'PUT',
    `/governance/rule`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetPoliciesQueryParams {
  accountIdentifier: string
  RuleNamePattern?: string
}

export type GetPoliciesProps = Omit<
  MutateProps<ResponseRuleList, Failure | Error, GetPoliciesQueryParams, ListDTO, void>,
  'path' | 'verb'
>

/**
 * Get rules for given account
 */
export const GetPolicies = (props: GetPoliciesProps) => (
  <Mutate<ResponseRuleList, Failure | Error, GetPoliciesQueryParams, ListDTO, void>
    verb="POST"
    path={`/governance/rule/list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetPoliciesProps = Omit<
  UseMutateProps<ResponseRuleList, Failure | Error, GetPoliciesQueryParams, ListDTO, void>,
  'path' | 'verb'
>

/**
 * Get rules for given account
 */
export const useGetPolicies = (props: UseGetPoliciesProps) =>
  useMutate<ResponseRuleList, Failure | Error, GetPoliciesQueryParams, ListDTO, void>('POST', `/governance/rule/list`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface DeleteRuleQueryParams {
  accountIdentifier: string
}

export type DeleteRuleProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteRuleQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule
 */
export const DeleteRule = (props: DeleteRuleProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteRuleQueryParams, string, void>
    verb="DELETE"
    path={`/governance/rule`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteRuleProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteRuleQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule
 */
export const useDeleteRule = (props: UseDeleteRuleProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteRuleQueryParams, string, void>('DELETE', `/governance/rule`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CloneRuleQueryParams {
  accountIdentifier: string
}

export type CloneRuleProps = Omit<
  MutateProps<ResponseRule, Failure | Error, CloneRuleQueryParams, CloneRuleDTO, void>,
  'path' | 'verb'
>

/**
 * Clone a rule
 */
export const CloneRule = (props: CloneRuleProps) => (
  <Mutate<ResponseRule, Failure | Error, CloneRuleQueryParams, CloneRuleDTO, void>
    verb="POST"
    path={`/governance/ruleClone`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCloneRuleProps = Omit<
  UseMutateProps<ResponseRule, Failure | Error, CloneRuleQueryParams, CloneRuleDTO, void>,
  'path' | 'verb'
>

/**
 * Clone a rule
 */
export const useCloneRule = (props: UseCloneRuleProps) =>
  useMutate<ResponseRule, Failure | Error, CloneRuleQueryParams, CloneRuleDTO, void>('POST', `/governance/ruleClone`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface AddRuleSetQueryParams {
  accountIdentifier: string
}

export type AddRuleSetProps = Omit<
  MutateProps<ResponseRuleSet, Failure | Error, AddRuleSetQueryParams, CreateRuleSetDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Add a new rule Set
 */
export const AddRuleSet = (props: AddRuleSetProps) => (
  <Mutate<ResponseRuleSet, Failure | Error, AddRuleSetQueryParams, CreateRuleSetDTORequestBody, void>
    verb="POST"
    path={`/governance/ruleSet`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAddRuleSetProps = Omit<
  UseMutateProps<ResponseRuleSet, Failure | Error, AddRuleSetQueryParams, CreateRuleSetDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Add a new rule Set
 */
export const useAddRuleSet = (props: UseAddRuleSetProps) =>
  useMutate<ResponseRuleSet, Failure | Error, AddRuleSetQueryParams, CreateRuleSetDTORequestBody, void>(
    'POST',
    `/governance/ruleSet`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface UpdateRuleSetQueryParams {
  accountIdentifier: string
}

export type UpdateRuleSetProps = Omit<
  MutateProps<ResponseRuleSet, Failure | Error, UpdateRuleSetQueryParams, CreateRuleSetDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update an existing rule pack
 */
export const UpdateRuleSet = (props: UpdateRuleSetProps) => (
  <Mutate<ResponseRuleSet, Failure | Error, UpdateRuleSetQueryParams, CreateRuleSetDTORequestBody, void>
    verb="PUT"
    path={`/governance/ruleSet`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateRuleSetProps = Omit<
  UseMutateProps<ResponseRuleSet, Failure | Error, UpdateRuleSetQueryParams, CreateRuleSetDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update an existing rule pack
 */
export const useUpdateRuleSet = (props: UseUpdateRuleSetProps) =>
  useMutate<ResponseRuleSet, Failure | Error, UpdateRuleSetQueryParams, CreateRuleSetDTORequestBody, void>(
    'PUT',
    `/governance/ruleSet`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ListRuleSetsQueryParams {
  accountIdentifier: string
}

export type ListRuleSetsProps = Omit<
  MutateProps<ResponseRuleSetList, Failure | Error, ListRuleSetsQueryParams, CreateRuleSetFilterDTO, void>,
  'path' | 'verb'
>

/**
 * list all rule packs
 */
export const ListRuleSets = (props: ListRuleSetsProps) => (
  <Mutate<ResponseRuleSetList, Failure | Error, ListRuleSetsQueryParams, CreateRuleSetFilterDTO, void>
    verb="POST"
    path={`/governance/ruleSet/list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListRuleSetsProps = Omit<
  UseMutateProps<ResponseRuleSetList, Failure | Error, ListRuleSetsQueryParams, CreateRuleSetFilterDTO, void>,
  'path' | 'verb'
>

/**
 * list all rule packs
 */
export const useListRuleSets = (props: UseListRuleSetsProps) =>
  useMutate<ResponseRuleSetList, Failure | Error, ListRuleSetsQueryParams, CreateRuleSetFilterDTO, void>(
    'POST',
    `/governance/ruleSet/list`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRuleSetQueryParams {
  accountIdentifier: string
}

export interface GetRuleSetPathParams {
  id: string
}

export type GetRuleSetProps = Omit<
  MutateProps<
    ResponseListRule,
    Failure | Error,
    GetRuleSetQueryParams,
    CreateRuleSetDTORequestBody,
    GetRuleSetPathParams
  >,
  'path' | 'verb'
> &
  GetRuleSetPathParams

/**
 * Get rules for pack
 */
export const GetRuleSet = ({ id, ...props }: GetRuleSetProps) => (
  <Mutate<ResponseListRule, Failure | Error, GetRuleSetQueryParams, CreateRuleSetDTORequestBody, GetRuleSetPathParams>
    verb="POST"
    path={`/governance/ruleSet/list/${id}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleSetProps = Omit<
  UseMutateProps<
    ResponseListRule,
    Failure | Error,
    GetRuleSetQueryParams,
    CreateRuleSetDTORequestBody,
    GetRuleSetPathParams
  >,
  'path' | 'verb'
> &
  GetRuleSetPathParams

/**
 * Get rules for pack
 */
export const useGetRuleSet = ({ id, ...props }: UseGetRuleSetProps) =>
  useMutate<
    ResponseListRule,
    Failure | Error,
    GetRuleSetQueryParams,
    CreateRuleSetDTORequestBody,
    GetRuleSetPathParams
  >('POST', (paramsInPath: GetRuleSetPathParams) => `/governance/ruleSet/list/${paramsInPath.id}`, {
    base: getConfig('ccm/api'),
    pathParams: { id },
    ...props
  })

export interface DeleteRuleSetQueryParams {
  accountIdentifier: string
}

export type DeleteRuleSetProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteRuleSetQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule set
 */
export const DeleteRuleSet = (props: DeleteRuleSetProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteRuleSetQueryParams, string, void>
    verb="DELETE"
    path={`/governance/ruleSet`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteRuleSetProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteRuleSetQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a rule set
 */
export const useDeleteRuleSet = (props: UseDeleteRuleSetProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteRuleSetQueryParams, string, void>('DELETE', `/governance/ruleSet`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface ValidateRuleQueryParams {
  accountIdentifier: string
}

export type ValidateRuleProps = Omit<
  MutateProps<void, Failure | Error, ValidateRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Validate a rule
 */
export const ValidateRule = (props: ValidateRuleProps) => (
  <Mutate<void, Failure | Error, ValidateRuleQueryParams, CreateRuleDTORequestBody, void>
    verb="POST"
    path={`/governance/ruleValidate`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseValidateRuleProps = Omit<
  UseMutateProps<void, Failure | Error, ValidateRuleQueryParams, CreateRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Validate a rule
 */
export const useValidateRule = (props: UseValidateRuleProps) =>
  useMutate<void, Failure | Error, ValidateRuleQueryParams, CreateRuleDTORequestBody, void>(
    'POST',
    `/governance/ruleValidate`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRuleExecutionStatusQueryParams {
  accountIdentifier: string
}

export interface GetRuleExecutionStatusPathParams {
  ruleExecutionId: string
}

export type GetRuleExecutionStatusProps = Omit<
  GetProps<void, Failure | Error, GetRuleExecutionStatusQueryParams, GetRuleExecutionStatusPathParams>,
  'path'
> &
  GetRuleExecutionStatusPathParams

/**
 * Return logs for a rule execution status
 */
export const GetRuleExecutionStatus = ({ ruleExecutionId, ...props }: GetRuleExecutionStatusProps) => (
  <Get<void, Failure | Error, GetRuleExecutionStatusQueryParams, GetRuleExecutionStatusPathParams>
    path={`/governance/status/${ruleExecutionId}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRuleExecutionStatusProps = Omit<
  UseGetProps<void, Failure | Error, GetRuleExecutionStatusQueryParams, GetRuleExecutionStatusPathParams>,
  'path'
> &
  GetRuleExecutionStatusPathParams

/**
 * Return logs for a rule execution status
 */
export const useGetRuleExecutionStatus = ({ ruleExecutionId, ...props }: UseGetRuleExecutionStatusProps) =>
  useGet<void, Failure | Error, GetRuleExecutionStatusQueryParams, GetRuleExecutionStatusPathParams>(
    (paramsInPath: GetRuleExecutionStatusPathParams) => `/governance/status/${paramsInPath.ruleExecutionId}`,
    { base: getConfig('ccm/api'), pathParams: { ruleExecutionId }, ...props }
  )

export interface Execute1Response {
  [key: string]: { [key: string]: any }
}

export interface Execute1QueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type Execute1Props = Omit<
  MutateProps<Execute1Response, unknown, Execute1QueryParams, GraphQLQuery, void>,
  'path' | 'verb'
>

export const Execute1 = (props: Execute1Props) => (
  <Mutate<Execute1Response, unknown, Execute1QueryParams, GraphQLQuery, void>
    verb="POST"
    path={`/graphql`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseExecute1Props = Omit<
  UseMutateProps<Execute1Response, unknown, Execute1QueryParams, GraphQLQuery, void>,
  'path' | 'verb'
>

export const useExecute1 = (props: UseExecute1Props) =>
  useMutate<Execute1Response, unknown, Execute1QueryParams, GraphQLQuery, void>('POST', `/graphql`, {
    base: getConfig('ccm/api'),
    ...props
  })

export type GetSchemaProps = Omit<GetProps<void, void, void, void>, 'path'>

export const GetSchema = (props: GetSchemaProps) => (
  <Get<void, void, void, void> path={`/graphql/schema`} base={getConfig('ccm/api')} {...props} />
)

export type UseGetSchemaProps = Omit<UseGetProps<void, void, void, void>, 'path'>

export const useGetSchema = (props: UseGetSchemaProps) =>
  useGet<void, void, void, void>(`/graphql/schema`, { base: getConfig('ccm/api'), ...props })

export type GetCENGMicroserviceHealthStatusProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get CE-NG Manager health
 */
export const GetCENGMicroserviceHealthStatus = (props: GetCENGMicroserviceHealthStatusProps) => (
  <Get<ResponseString, unknown, void, void> path={`/health`} base={getConfig('ccm/api')} {...props} />
)

export type UseGetCENGMicroserviceHealthStatusProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * Get CE-NG Manager health
 */
export const useGetCENGMicroserviceHealthStatus = (props: UseGetCENGMicroserviceHealthStatusProps) =>
  useGet<ResponseString, unknown, void, void>(`/health`, { base: getConfig('ccm/api'), ...props })

export interface GetCCMLicenseUsageQueryParams {
  accountIdentifier?: string
  timestamp?: number
}

export type GetCCMLicenseUsageProps = Omit<
  GetProps<ResponseCELicenseUsageDTO, unknown, GetCCMLicenseUsageQueryParams, void>,
  'path'
>

/**
 * Gets License Usage from a Particular Timestamp
 */
export const GetCCMLicenseUsage = (props: GetCCMLicenseUsageProps) => (
  <Get<ResponseCELicenseUsageDTO, unknown, GetCCMLicenseUsageQueryParams, void>
    path={`/license-util`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCCMLicenseUsageProps = Omit<
  UseGetProps<ResponseCELicenseUsageDTO, unknown, GetCCMLicenseUsageQueryParams, void>,
  'path'
>

/**
 * Gets License Usage from a Particular Timestamp
 */
export const useGetCCMLicenseUsage = (props: UseGetCCMLicenseUsageProps) =>
  useGet<ResponseCELicenseUsageDTO, unknown, GetCCMLicenseUsageQueryParams, void>(`/license-util`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface TimescaleSqlQueriesStatsQueryParams {
  accountIdentifier?: string
}

export type TimescaleSqlQueriesStatsProps = Omit<
  GetProps<ResponseMapStringQueryStat, unknown, TimescaleSqlQueriesStatsQueryParams, void>,
  'path'
>

/**
 * timescale
 */
export const TimescaleSqlQueriesStats = (props: TimescaleSqlQueriesStatsProps) => (
  <Get<ResponseMapStringQueryStat, unknown, TimescaleSqlQueriesStatsQueryParams, void>
    path={`/metrics/timescale`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseTimescaleSqlQueriesStatsProps = Omit<
  UseGetProps<ResponseMapStringQueryStat, unknown, TimescaleSqlQueriesStatsQueryParams, void>,
  'path'
>

/**
 * timescale
 */
export const useTimescaleSqlQueriesStats = (props: UseTimescaleSqlQueriesStatsProps) =>
  useGet<ResponseMapStringQueryStat, unknown, TimescaleSqlQueriesStatsQueryParams, void>(`/metrics/timescale`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface SendNotificationQueryParams {
  accountIdentifier: string
}

export type SendNotificationProps = Omit<
  MutateProps<ResponseNotificationResult, unknown, SendNotificationQueryParams, NotificationChannelDTO, void>,
  'path' | 'verb'
>

/**
 * Send Notification
 */
export const SendNotification = (props: SendNotificationProps) => (
  <Mutate<ResponseNotificationResult, unknown, SendNotificationQueryParams, NotificationChannelDTO, void>
    verb="POST"
    path={`/notification`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseSendNotificationProps = Omit<
  UseMutateProps<ResponseNotificationResult, unknown, SendNotificationQueryParams, NotificationChannelDTO, void>,
  'path' | 'verb'
>

/**
 * Send Notification
 */
export const useSendNotification = (props: UseSendNotificationProps) =>
  useMutate<ResponseNotificationResult, unknown, SendNotificationQueryParams, NotificationChannelDTO, void>(
    'POST',
    `/notification`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface DeleteNotificationSettingsQueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type DeleteNotificationSettingsProps = Omit<
  MutateProps<ResponseBoolean, unknown, DeleteNotificationSettingsQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Delete Notification Settings for a Perspective
 */
export const DeleteNotificationSettings = (props: DeleteNotificationSettingsProps) => (
  <Mutate<ResponseBoolean, unknown, DeleteNotificationSettingsQueryParams, void, void>
    verb="DELETE"
    path={`/notificationSetting`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteNotificationSettingsProps = Omit<
  UseMutateProps<ResponseBoolean, unknown, DeleteNotificationSettingsQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Delete Notification Settings for a Perspective
 */
export const useDeleteNotificationSettings = (props: UseDeleteNotificationSettingsProps) =>
  useMutate<ResponseBoolean, unknown, DeleteNotificationSettingsQueryParams, void, void>(
    'DELETE',
    `/notificationSetting`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ListNotificationSettingsQueryParams {
  accountIdentifier: string
}

export type ListNotificationSettingsProps = Omit<
  GetProps<ResponseListCCMPerspectiveNotificationChannelsDTO, unknown, ListNotificationSettingsQueryParams, void>,
  'path'
>

/**
 * List Notification Settings for an account
 */
export const ListNotificationSettings = (props: ListNotificationSettingsProps) => (
  <Get<ResponseListCCMPerspectiveNotificationChannelsDTO, unknown, ListNotificationSettingsQueryParams, void>
    path={`/notificationSetting`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListNotificationSettingsProps = Omit<
  UseGetProps<ResponseListCCMPerspectiveNotificationChannelsDTO, unknown, ListNotificationSettingsQueryParams, void>,
  'path'
>

/**
 * List Notification Settings for an account
 */
export const useListNotificationSettings = (props: UseListNotificationSettingsProps) =>
  useGet<ResponseListCCMPerspectiveNotificationChannelsDTO, unknown, ListNotificationSettingsQueryParams, void>(
    `/notificationSetting`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface CreateNotificationSettingQueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type CreateNotificationSettingProps = Omit<
  MutateProps<
    ResponseCCMNotificationSetting,
    unknown,
    CreateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Notification Setting
 */
export const CreateNotificationSetting = (props: CreateNotificationSettingProps) => (
  <Mutate<
    ResponseCCMNotificationSetting,
    unknown,
    CreateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >
    verb="POST"
    path={`/notificationSetting`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateNotificationSettingProps = Omit<
  UseMutateProps<
    ResponseCCMNotificationSetting,
    unknown,
    CreateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Notification Setting
 */
export const useCreateNotificationSetting = (props: UseCreateNotificationSettingProps) =>
  useMutate<
    ResponseCCMNotificationSetting,
    unknown,
    CreateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >('POST', `/notificationSetting`, { base: getConfig('ccm/api'), ...props })

export interface UpdateNotificationSettingQueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type UpdateNotificationSettingProps = Omit<
  MutateProps<
    ResponseCCMNotificationSetting,
    unknown,
    UpdateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update Notification Setting
 */
export const UpdateNotificationSetting = (props: UpdateNotificationSettingProps) => (
  <Mutate<
    ResponseCCMNotificationSetting,
    unknown,
    UpdateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >
    verb="PUT"
    path={`/notificationSetting`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateNotificationSettingProps = Omit<
  UseMutateProps<
    ResponseCCMNotificationSetting,
    unknown,
    UpdateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update Notification Setting
 */
export const useUpdateNotificationSetting = (props: UseUpdateNotificationSettingProps) =>
  useMutate<
    ResponseCCMNotificationSetting,
    unknown,
    UpdateNotificationSettingQueryParams,
    CCMNotificationSettingRequestBody,
    void
  >('PUT', `/notificationSetting`, { base: getConfig('ccm/api'), ...props })

export interface GetNotificationSettingsQueryParams {
  accountIdentifier: string
}

export interface GetNotificationSettingsPathParams {
  perspectiveId: string
}

export type GetNotificationSettingsProps = Omit<
  GetProps<
    ResponseCCMNotificationSetting,
    unknown,
    GetNotificationSettingsQueryParams,
    GetNotificationSettingsPathParams
  >,
  'path'
> &
  GetNotificationSettingsPathParams

/**
 * Get Notification Settings for a Perspective
 */
export const GetNotificationSettings = ({ perspectiveId, ...props }: GetNotificationSettingsProps) => (
  <Get<ResponseCCMNotificationSetting, unknown, GetNotificationSettingsQueryParams, GetNotificationSettingsPathParams>
    path={`/notificationSetting/perspective/${perspectiveId}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetNotificationSettingsProps = Omit<
  UseGetProps<
    ResponseCCMNotificationSetting,
    unknown,
    GetNotificationSettingsQueryParams,
    GetNotificationSettingsPathParams
  >,
  'path'
> &
  GetNotificationSettingsPathParams

/**
 * Get Notification Settings for a Perspective
 */
export const useGetNotificationSettings = ({ perspectiveId, ...props }: UseGetNotificationSettingsProps) =>
  useGet<
    ResponseCCMNotificationSetting,
    unknown,
    GetNotificationSettingsQueryParams,
    GetNotificationSettingsPathParams
  >(
    (paramsInPath: GetNotificationSettingsPathParams) =>
      `/notificationSetting/perspective/${paramsInPath.perspectiveId}`,
    { base: getConfig('ccm/api'), pathParams: { perspectiveId }, ...props }
  )

export interface GetCCMOverviewQueryParams {
  accountIdentifier: string
  startTime?: number
  endTime?: number
  groupBy?: 'HOUR' | 'DAY' | 'MONTH' | 'WEEK' | 'QUARTER' | 'YEAR'
}

export type GetCCMOverviewProps = Omit<
  GetProps<ResponseCcmOverviewDTO, unknown, GetCCMOverviewQueryParams, void>,
  'path'
>

/**
 * Get CCM Overview
 */
export const GetCCMOverview = (props: GetCCMOverviewProps) => (
  <Get<ResponseCcmOverviewDTO, unknown, GetCCMOverviewQueryParams, void>
    path={`/overview`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCCMOverviewProps = Omit<
  UseGetProps<ResponseCcmOverviewDTO, unknown, GetCCMOverviewQueryParams, void>,
  'path'
>

/**
 * Get CCM Overview
 */
export const useGetCCMOverview = (props: UseGetCCMOverviewProps) =>
  useGet<ResponseCcmOverviewDTO, unknown, GetCCMOverviewQueryParams, void>(`/overview`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface DeletePerspectiveQueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type DeletePerspectiveProps = Omit<
  MutateProps<ResponseString, unknown, DeletePerspectiveQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Delete perspective
 */
export const DeletePerspective = (props: DeletePerspectiveProps) => (
  <Mutate<ResponseString, unknown, DeletePerspectiveQueryParams, void, void>
    verb="DELETE"
    path={`/perspective`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeletePerspectiveProps = Omit<
  UseMutateProps<ResponseString, unknown, DeletePerspectiveQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Delete perspective
 */
export const useDeletePerspective = (props: UseDeletePerspectiveProps) =>
  useMutate<ResponseString, unknown, DeletePerspectiveQueryParams, void, void>('DELETE', `/perspective`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetPerspectiveQueryParams {
  accountIdentifier: string
  perspectiveId?: string
}

export type GetPerspectiveProps = Omit<GetProps<ResponseCEView, unknown, GetPerspectiveQueryParams, void>, 'path'>

/**
 * Get perspective
 */
export const GetPerspective = (props: GetPerspectiveProps) => (
  <Get<ResponseCEView, unknown, GetPerspectiveQueryParams, void>
    path={`/perspective`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetPerspectiveProps = Omit<UseGetProps<ResponseCEView, unknown, GetPerspectiveQueryParams, void>, 'path'>

/**
 * Get perspective
 */
export const useGetPerspective = (props: UseGetPerspectiveProps) =>
  useGet<ResponseCEView, unknown, GetPerspectiveQueryParams, void>(`/perspective`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CreatePerspectiveQueryParams {
  accountIdentifier: string
  clone?: boolean
}

export type CreatePerspectiveProps = Omit<
  MutateProps<ResponseCEView, unknown, CreatePerspectiveQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create perspective
 */
export const CreatePerspective = (props: CreatePerspectiveProps) => (
  <Mutate<ResponseCEView, unknown, CreatePerspectiveQueryParams, CEViewRequestBody, void>
    verb="POST"
    path={`/perspective`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreatePerspectiveProps = Omit<
  UseMutateProps<ResponseCEView, unknown, CreatePerspectiveQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create perspective
 */
export const useCreatePerspective = (props: UseCreatePerspectiveProps) =>
  useMutate<ResponseCEView, unknown, CreatePerspectiveQueryParams, CEViewRequestBody, void>('POST', `/perspective`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface UpdatePerspectiveQueryParams {
  accountIdentifier: string
}

export type UpdatePerspectiveProps = Omit<
  MutateProps<ResponseCEView, unknown, UpdatePerspectiveQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update perspective
 */
export const UpdatePerspective = (props: UpdatePerspectiveProps) => (
  <Mutate<ResponseCEView, unknown, UpdatePerspectiveQueryParams, CEViewRequestBody, void>
    verb="PUT"
    path={`/perspective`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdatePerspectiveProps = Omit<
  UseMutateProps<ResponseCEView, unknown, UpdatePerspectiveQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update perspective
 */
export const useUpdatePerspective = (props: UseUpdatePerspectiveProps) =>
  useMutate<ResponseCEView, unknown, UpdatePerspectiveQueryParams, CEViewRequestBody, void>('PUT', `/perspective`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface DeleteCustomFieldQueryParams {
  accountIdentifier?: string
  customFieldId?: string
}

export type DeleteCustomFieldProps = Omit<
  MutateProps<RestResponseString, unknown, DeleteCustomFieldQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Delete customField
 */
export const DeleteCustomField = (props: DeleteCustomFieldProps) => (
  <Mutate<RestResponseString, unknown, DeleteCustomFieldQueryParams, CEViewRequestBody, void>
    verb="DELETE"
    path={`/perspective-custom-field`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteCustomFieldProps = Omit<
  UseMutateProps<RestResponseString, unknown, DeleteCustomFieldQueryParams, CEViewRequestBody, void>,
  'path' | 'verb'
>

/**
 * Delete customField
 */
export const useDeleteCustomField = (props: UseDeleteCustomFieldProps) =>
  useMutate<RestResponseString, unknown, DeleteCustomFieldQueryParams, CEViewRequestBody, void>(
    'DELETE',
    `/perspective-custom-field`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetCustomFieldQueryParams {
  accountIdentifier?: string
  customFieldId?: string
}

export type GetCustomFieldProps = Omit<
  GetProps<RestResponseViewCustomField, unknown, GetCustomFieldQueryParams, void>,
  'path'
>

/**
 * Get customField
 */
export const GetCustomField = (props: GetCustomFieldProps) => (
  <Get<RestResponseViewCustomField, unknown, GetCustomFieldQueryParams, void>
    path={`/perspective-custom-field`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCustomFieldProps = Omit<
  UseGetProps<RestResponseViewCustomField, unknown, GetCustomFieldQueryParams, void>,
  'path'
>

/**
 * Get customField
 */
export const useGetCustomField = (props: UseGetCustomFieldProps) =>
  useGet<RestResponseViewCustomField, unknown, GetCustomFieldQueryParams, void>(`/perspective-custom-field`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface SaveCustomFieldQueryParams {
  accountIdentifier?: string
}

export type SaveCustomFieldProps = Omit<
  MutateProps<RestResponseViewCustomField, unknown, SaveCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Save customField
 */
export const SaveCustomField = (props: SaveCustomFieldProps) => (
  <Mutate<RestResponseViewCustomField, unknown, SaveCustomFieldQueryParams, ViewCustomFieldRequestBody, void>
    verb="POST"
    path={`/perspective-custom-field`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseSaveCustomFieldProps = Omit<
  UseMutateProps<RestResponseViewCustomField, unknown, SaveCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Save customField
 */
export const useSaveCustomField = (props: UseSaveCustomFieldProps) =>
  useMutate<RestResponseViewCustomField, unknown, SaveCustomFieldQueryParams, ViewCustomFieldRequestBody, void>(
    'POST',
    `/perspective-custom-field`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface UpdateCustomFieldQueryParams {
  accountIdentifier?: string
}

export type UpdateCustomFieldProps = Omit<
  MutateProps<RestResponseViewCustomField, unknown, UpdateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update customField
 */
export const UpdateCustomField = (props: UpdateCustomFieldProps) => (
  <Mutate<RestResponseViewCustomField, unknown, UpdateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>
    verb="PUT"
    path={`/perspective-custom-field`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateCustomFieldProps = Omit<
  UseMutateProps<RestResponseViewCustomField, unknown, UpdateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update customField
 */
export const useUpdateCustomField = (props: UseUpdateCustomFieldProps) =>
  useMutate<RestResponseViewCustomField, unknown, UpdateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>(
    'PUT',
    `/perspective-custom-field`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ValidateCustomFieldQueryParams {
  accountIdentifier?: string
}

export type ValidateCustomFieldProps = Omit<
  MutateProps<RestResponseString, unknown, ValidateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Validate customField
 */
export const ValidateCustomField = (props: ValidateCustomFieldProps) => (
  <Mutate<RestResponseString, unknown, ValidateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>
    verb="POST"
    path={`/perspective-custom-field/validate`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseValidateCustomFieldProps = Omit<
  UseMutateProps<RestResponseString, unknown, ValidateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>,
  'path' | 'verb'
>

/**
 * Validate customField
 */
export const useValidateCustomField = (props: UseValidateCustomFieldProps) =>
  useMutate<RestResponseString, unknown, ValidateCustomFieldQueryParams, ViewCustomFieldRequestBody, void>(
    'POST',
    `/perspective-custom-field/validate`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ClonePerspectiveQueryParams {
  accountIdentifier: string
  cloneName: string
}

export interface ClonePerspectivePathParams {
  perspectiveId: string
}

export type ClonePerspectiveProps = Omit<
  MutateProps<ResponseCEView, unknown, ClonePerspectiveQueryParams, void, ClonePerspectivePathParams>,
  'path' | 'verb'
> &
  ClonePerspectivePathParams

/**
 * Clone perspective
 */
export const ClonePerspective = ({ perspectiveId, ...props }: ClonePerspectiveProps) => (
  <Mutate<ResponseCEView, unknown, ClonePerspectiveQueryParams, void, ClonePerspectivePathParams>
    verb="POST"
    path={`/perspective/clone/${perspectiveId}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseClonePerspectiveProps = Omit<
  UseMutateProps<ResponseCEView, unknown, ClonePerspectiveQueryParams, void, ClonePerspectivePathParams>,
  'path' | 'verb'
> &
  ClonePerspectivePathParams

/**
 * Clone perspective
 */
export const useClonePerspective = ({ perspectiveId, ...props }: UseClonePerspectiveProps) =>
  useMutate<ResponseCEView, unknown, ClonePerspectiveQueryParams, void, ClonePerspectivePathParams>(
    'POST',
    (paramsInPath: ClonePerspectivePathParams) => `/perspective/clone/${paramsInPath.perspectiveId}`,
    { base: getConfig('ccm/api'), pathParams: { perspectiveId }, ...props }
  )

export interface GetForecastCostV2QueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type GetForecastCostV2Props = Omit<GetProps<ResponseDouble, unknown, GetForecastCostV2QueryParams, void>, 'path'>

/**
 * Get forecast cost for perspective
 */
export const GetForecastCostV2 = (props: GetForecastCostV2Props) => (
  <Get<ResponseDouble, unknown, GetForecastCostV2QueryParams, void>
    path={`/perspective/forecastCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetForecastCostV2Props = Omit<
  UseGetProps<ResponseDouble, unknown, GetForecastCostV2QueryParams, void>,
  'path'
>

/**
 * Get forecast cost for perspective
 */
export const useGetForecastCostV2 = (props: UseGetForecastCostV2Props) =>
  useGet<ResponseDouble, unknown, GetForecastCostV2QueryParams, void>(`/perspective/forecastCost`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetForecastCostForPeriodQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime: number
  period: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
}

export type GetForecastCostForPeriodProps = Omit<
  GetProps<ResponseDouble, unknown, GetForecastCostForPeriodQueryParams, void>,
  'path'
>

/**
 * Get forecast cost for perspective for given period
 */
export const GetForecastCostForPeriod = (props: GetForecastCostForPeriodProps) => (
  <Get<ResponseDouble, unknown, GetForecastCostForPeriodQueryParams, void>
    path={`/perspective/forecastCostForPeriod`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetForecastCostForPeriodProps = Omit<
  UseGetProps<ResponseDouble, unknown, GetForecastCostForPeriodQueryParams, void>,
  'path'
>

/**
 * Get forecast cost for perspective for given period
 */
export const useGetForecastCostForPeriod = (props: UseGetForecastCostForPeriodProps) =>
  useGet<ResponseDouble, unknown, GetForecastCostForPeriodQueryParams, void>(`/perspective/forecastCostForPeriod`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetAllPerspectivesQueryParams {
  accountIdentifier: string
}

export type GetAllPerspectivesProps = Omit<
  GetProps<ResponseListQLCEView, unknown, GetAllPerspectivesQueryParams, void>,
  'path'
>

/**
 * Get All perspectives
 */
export const GetAllPerspectives = (props: GetAllPerspectivesProps) => (
  <Get<ResponseListQLCEView, unknown, GetAllPerspectivesQueryParams, void>
    path={`/perspective/getAllPerspectives`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetAllPerspectivesProps = Omit<
  UseGetProps<ResponseListQLCEView, unknown, GetAllPerspectivesQueryParams, void>,
  'path'
>

/**
 * Get All perspectives
 */
export const useGetAllPerspectives = (props: UseGetAllPerspectivesProps) =>
  useGet<ResponseListQLCEView, unknown, GetAllPerspectivesQueryParams, void>(`/perspective/getAllPerspectives`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetLastMonthCostV2QueryParams {
  accountIdentifier: string
  perspectiveId: string
}

export type GetLastMonthCostV2Props = Omit<
  GetProps<ResponseDouble, unknown, GetLastMonthCostV2QueryParams, void>,
  'path'
>

/**
 * Get last month cost for perspective
 */
export const GetLastMonthCostV2 = (props: GetLastMonthCostV2Props) => (
  <Get<ResponseDouble, unknown, GetLastMonthCostV2QueryParams, void>
    path={`/perspective/lastMonthCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetLastMonthCostV2Props = Omit<
  UseGetProps<ResponseDouble, unknown, GetLastMonthCostV2QueryParams, void>,
  'path'
>

/**
 * Get last month cost for perspective
 */
export const useGetLastMonthCostV2 = (props: UseGetLastMonthCostV2Props) =>
  useGet<ResponseDouble, unknown, GetLastMonthCostV2QueryParams, void>(`/perspective/lastMonthCost`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetLastPeriodCostQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime: number
  period: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
}

export type GetLastPeriodCostProps = Omit<GetProps<ResponseDouble, unknown, GetLastPeriodCostQueryParams, void>, 'path'>

/**
 * Get last period cost for perspective
 */
export const GetLastPeriodCost = (props: GetLastPeriodCostProps) => (
  <Get<ResponseDouble, unknown, GetLastPeriodCostQueryParams, void>
    path={`/perspective/lastPeriodCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetLastPeriodCostProps = Omit<
  UseGetProps<ResponseDouble, unknown, GetLastPeriodCostQueryParams, void>,
  'path'
>

/**
 * Get last period cost for perspective
 */
export const useGetLastPeriodCost = (props: UseGetLastPeriodCostProps) =>
  useGet<ResponseDouble, unknown, GetLastPeriodCostQueryParams, void>(`/perspective/lastPeriodCost`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface LastYearMonthlyCostQueryParams {
  accountIdentifier: string
  perspectiveId: string
  startTime: number
  period: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY'
  type: 'SPECIFIED_AMOUNT' | 'PREVIOUS_MONTH_SPEND' | 'PREVIOUS_PERIOD_SPEND'
  breakdown: 'YEARLY' | 'MONTHLY'
}

export type LastYearMonthlyCostProps = Omit<
  GetProps<ResponseListValueDataPoint, unknown, LastYearMonthlyCostQueryParams, void>,
  'path'
>

/**
 * Get last twelve month cost for perspective
 */
export const LastYearMonthlyCost = (props: LastYearMonthlyCostProps) => (
  <Get<ResponseListValueDataPoint, unknown, LastYearMonthlyCostQueryParams, void>
    path={`/perspective/lastYearMonthlyCost`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseLastYearMonthlyCostProps = Omit<
  UseGetProps<ResponseListValueDataPoint, unknown, LastYearMonthlyCostQueryParams, void>,
  'path'
>

/**
 * Get last twelve month cost for perspective
 */
export const useLastYearMonthlyCost = (props: UseLastYearMonthlyCostProps) =>
  useGet<ResponseListValueDataPoint, unknown, LastYearMonthlyCostQueryParams, void>(
    `/perspective/lastYearMonthlyCost`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetFoldersQueryParams {
  accountIdentifier: string
  folderNamePattern?: string
}

export type GetFoldersProps = Omit<GetProps<ResponseListCEViewFolder, unknown, GetFoldersQueryParams, void>, 'path'>

/**
 * Get folders for account
 */
export const GetFolders = (props: GetFoldersProps) => (
  <Get<ResponseListCEViewFolder, unknown, GetFoldersQueryParams, void>
    path={`/perspectiveFolders`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetFoldersProps = Omit<
  UseGetProps<ResponseListCEViewFolder, unknown, GetFoldersQueryParams, void>,
  'path'
>

/**
 * Get folders for account
 */
export const useGetFolders = (props: UseGetFoldersProps) =>
  useGet<ResponseListCEViewFolder, unknown, GetFoldersQueryParams, void>(`/perspectiveFolders`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface UpdateFolderQueryParams {
  accountIdentifier: string
}

export type UpdateFolderProps = Omit<
  MutateProps<ResponseCEViewFolder, unknown, UpdateFolderQueryParams, CEViewFolder, void>,
  'path' | 'verb'
>

/**
 * Update a folder
 */
export const UpdateFolder = (props: UpdateFolderProps) => (
  <Mutate<ResponseCEViewFolder, unknown, UpdateFolderQueryParams, CEViewFolder, void>
    verb="PUT"
    path={`/perspectiveFolders`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateFolderProps = Omit<
  UseMutateProps<ResponseCEViewFolder, unknown, UpdateFolderQueryParams, CEViewFolder, void>,
  'path' | 'verb'
>

/**
 * Update a folder
 */
export const useUpdateFolder = (props: UseUpdateFolderProps) =>
  useMutate<ResponseCEViewFolder, unknown, UpdateFolderQueryParams, CEViewFolder, void>('PUT', `/perspectiveFolders`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface CreatePerspectiveFolderQueryParams {
  accountIdentifier: string
}

export type CreatePerspectiveFolderProps = Omit<
  MutateProps<ResponseCEViewFolder, unknown, CreatePerspectiveFolderQueryParams, CreatePerspectiveFolderDTO, void>,
  'path' | 'verb'
>

/**
 * Create perspective folder
 */
export const CreatePerspectiveFolder = (props: CreatePerspectiveFolderProps) => (
  <Mutate<ResponseCEViewFolder, unknown, CreatePerspectiveFolderQueryParams, CreatePerspectiveFolderDTO, void>
    verb="POST"
    path={`/perspectiveFolders/create`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreatePerspectiveFolderProps = Omit<
  UseMutateProps<ResponseCEViewFolder, unknown, CreatePerspectiveFolderQueryParams, CreatePerspectiveFolderDTO, void>,
  'path' | 'verb'
>

/**
 * Create perspective folder
 */
export const useCreatePerspectiveFolder = (props: UseCreatePerspectiveFolderProps) =>
  useMutate<ResponseCEViewFolder, unknown, CreatePerspectiveFolderQueryParams, CreatePerspectiveFolderDTO, void>(
    'POST',
    `/perspectiveFolders/create`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface MovePerspectivesQueryParams {
  accountIdentifier: string
}

export type MovePerspectivesProps = Omit<
  MutateProps<ResponseListCEView, unknown, MovePerspectivesQueryParams, MovePerspectiveDTO, void>,
  'path' | 'verb'
>

/**
 * Move perspectives
 */
export const MovePerspectives = (props: MovePerspectivesProps) => (
  <Mutate<ResponseListCEView, unknown, MovePerspectivesQueryParams, MovePerspectiveDTO, void>
    verb="POST"
    path={`/perspectiveFolders/movePerspectives`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseMovePerspectivesProps = Omit<
  UseMutateProps<ResponseListCEView, unknown, MovePerspectivesQueryParams, MovePerspectiveDTO, void>,
  'path' | 'verb'
>

/**
 * Move perspectives
 */
export const useMovePerspectives = (props: UseMovePerspectivesProps) =>
  useMutate<ResponseListCEView, unknown, MovePerspectivesQueryParams, MovePerspectiveDTO, void>(
    'POST',
    `/perspectiveFolders/movePerspectives`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface DeleteFolderQueryParams {
  accountIdentifier: string
}

export type DeleteFolderProps = Omit<
  MutateProps<ResponseBoolean, unknown, DeleteFolderQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete folder
 */
export const DeleteFolder = (props: DeleteFolderProps) => (
  <Mutate<ResponseBoolean, unknown, DeleteFolderQueryParams, string, void>
    verb="DELETE"
    path={`/perspectiveFolders`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteFolderProps = Omit<
  UseMutateProps<ResponseBoolean, unknown, DeleteFolderQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete folder
 */
export const useDeleteFolder = (props: UseDeleteFolderProps) =>
  useMutate<ResponseBoolean, unknown, DeleteFolderQueryParams, string, void>('DELETE', `/perspectiveFolders`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetAllFolderPerspectivesQueryParams {
  accountIdentifier: string
}

export interface GetAllFolderPerspectivesPathParams {
  folderId: string
}

export type GetAllFolderPerspectivesProps = Omit<
  GetProps<ResponseListQLCEView, unknown, GetAllFolderPerspectivesQueryParams, GetAllFolderPerspectivesPathParams>,
  'path'
> &
  GetAllFolderPerspectivesPathParams

/**
 * Get All perspectives in a folder
 */
export const GetAllFolderPerspectives = ({ folderId, ...props }: GetAllFolderPerspectivesProps) => (
  <Get<ResponseListQLCEView, unknown, GetAllFolderPerspectivesQueryParams, GetAllFolderPerspectivesPathParams>
    path={`/perspectiveFolders/${folderId}/perspectives`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetAllFolderPerspectivesProps = Omit<
  UseGetProps<ResponseListQLCEView, unknown, GetAllFolderPerspectivesQueryParams, GetAllFolderPerspectivesPathParams>,
  'path'
> &
  GetAllFolderPerspectivesPathParams

/**
 * Get All perspectives in a folder
 */
export const useGetAllFolderPerspectives = ({ folderId, ...props }: UseGetAllFolderPerspectivesProps) =>
  useGet<ResponseListQLCEView, unknown, GetAllFolderPerspectivesQueryParams, GetAllFolderPerspectivesPathParams>(
    (paramsInPath: GetAllFolderPerspectivesPathParams) => `/perspectiveFolders/${paramsInPath.folderId}/perspectives`,
    { base: getConfig('ccm/api'), pathParams: { folderId }, ...props }
  )

export interface DeleteReportSettingQueryParams {
  reportId?: string
  perspectiveId?: string
}

export type DeleteReportSettingProps = Omit<
  MutateProps<ResponseString, unknown, DeleteReportSettingQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete perspective reports
 */
export const DeleteReportSetting = (props: DeleteReportSettingProps) => (
  <Mutate<ResponseString, unknown, DeleteReportSettingQueryParams, string, void>
    verb="DELETE"
    path={`/perspectiveReport`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDeleteReportSettingProps = Omit<
  UseMutateProps<ResponseString, unknown, DeleteReportSettingQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete perspective reports
 */
export const useDeleteReportSetting = (props: UseDeleteReportSettingProps) =>
  useMutate<ResponseString, unknown, DeleteReportSettingQueryParams, string, void>('DELETE', `/perspectiveReport`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetReportSettingQueryParams {
  perspectiveId?: string
  reportId?: string
}

export interface GetReportSettingPathParams {
  accountIdentifier: string
}

export type GetReportSettingProps = Omit<
  GetProps<ResponseListCEReportSchedule, unknown, GetReportSettingQueryParams, GetReportSettingPathParams>,
  'path'
> &
  GetReportSettingPathParams

/**
 * Get perspective reports
 */
export const GetReportSetting = ({ accountIdentifier, ...props }: GetReportSettingProps) => (
  <Get<ResponseListCEReportSchedule, unknown, GetReportSettingQueryParams, GetReportSettingPathParams>
    path={`/perspectiveReport/${accountIdentifier}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetReportSettingProps = Omit<
  UseGetProps<ResponseListCEReportSchedule, unknown, GetReportSettingQueryParams, GetReportSettingPathParams>,
  'path'
> &
  GetReportSettingPathParams

/**
 * Get perspective reports
 */
export const useGetReportSetting = ({ accountIdentifier, ...props }: UseGetReportSettingProps) =>
  useGet<ResponseListCEReportSchedule, unknown, GetReportSettingQueryParams, GetReportSettingPathParams>(
    (paramsInPath: GetReportSettingPathParams) => `/perspectiveReport/${paramsInPath.accountIdentifier}`,
    { base: getConfig('ccm/api'), pathParams: { accountIdentifier }, ...props }
  )

export interface CreateReportSettingPathParams {
  accountIdentifier: string
}

export type CreateReportSettingProps = Omit<
  MutateProps<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, CreateReportSettingPathParams>,
  'path' | 'verb'
> &
  CreateReportSettingPathParams

/**
 * Create perspective reports
 */
export const CreateReportSetting = ({ accountIdentifier, ...props }: CreateReportSettingProps) => (
  <Mutate<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, CreateReportSettingPathParams>
    verb="POST"
    path={`/perspectiveReport/${accountIdentifier}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateReportSettingProps = Omit<
  UseMutateProps<
    ResponseListCEReportSchedule,
    unknown,
    void,
    CEReportScheduleRequestBody,
    CreateReportSettingPathParams
  >,
  'path' | 'verb'
> &
  CreateReportSettingPathParams

/**
 * Create perspective reports
 */
export const useCreateReportSetting = ({ accountIdentifier, ...props }: UseCreateReportSettingProps) =>
  useMutate<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, CreateReportSettingPathParams>(
    'POST',
    (paramsInPath: CreateReportSettingPathParams) => `/perspectiveReport/${paramsInPath.accountIdentifier}`,
    { base: getConfig('ccm/api'), pathParams: { accountIdentifier }, ...props }
  )

export interface UpdateReportSettingPathParams {
  accountIdentifier: string
}

export type UpdateReportSettingProps = Omit<
  MutateProps<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, UpdateReportSettingPathParams>,
  'path' | 'verb'
> &
  UpdateReportSettingPathParams

/**
 * Update perspective reports
 */
export const UpdateReportSetting = ({ accountIdentifier, ...props }: UpdateReportSettingProps) => (
  <Mutate<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, UpdateReportSettingPathParams>
    verb="PUT"
    path={`/perspectiveReport/${accountIdentifier}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseUpdateReportSettingProps = Omit<
  UseMutateProps<
    ResponseListCEReportSchedule,
    unknown,
    void,
    CEReportScheduleRequestBody,
    UpdateReportSettingPathParams
  >,
  'path' | 'verb'
> &
  UpdateReportSettingPathParams

/**
 * Update perspective reports
 */
export const useUpdateReportSetting = ({ accountIdentifier, ...props }: UseUpdateReportSettingProps) =>
  useMutate<ResponseListCEReportSchedule, unknown, void, CEReportScheduleRequestBody, UpdateReportSettingPathParams>(
    'PUT',
    (paramsInPath: UpdateReportSettingPathParams) => `/perspectiveReport/${paramsInPath.accountIdentifier}`,
    { base: getConfig('ccm/api'), pathParams: { accountIdentifier }, ...props }
  )

export interface Ec2RecommendationDetailQueryParams {
  accountIdentifier: string
  id: string
}

export type Ec2RecommendationDetailProps = Omit<
  GetProps<ResponseEC2RecommendationDTO, unknown, Ec2RecommendationDetailQueryParams, void>,
  'path'
>

/**
 * EC2 Recommendation Details
 */
export const Ec2RecommendationDetail = (props: Ec2RecommendationDetailProps) => (
  <Get<ResponseEC2RecommendationDTO, unknown, Ec2RecommendationDetailQueryParams, void>
    path={`/recommendation/details/ec2-instance`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseEc2RecommendationDetailProps = Omit<
  UseGetProps<ResponseEC2RecommendationDTO, unknown, Ec2RecommendationDetailQueryParams, void>,
  'path'
>

/**
 * EC2 Recommendation Details
 */
export const useEc2RecommendationDetail = (props: UseEc2RecommendationDetailProps) =>
  useGet<ResponseEC2RecommendationDTO, unknown, Ec2RecommendationDetailQueryParams, void>(
    `/recommendation/details/ec2-instance`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface EcsRecommendationDetailQueryParams {
  accountIdentifier: string
  id: string
  from?: string
  to?: string
  bufferPercentage?: number
}

export type EcsRecommendationDetailProps = Omit<
  GetProps<ResponseECSRecommendationDTO, unknown, EcsRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * ECS Recommendation Details
 */
export const EcsRecommendationDetail = (props: EcsRecommendationDetailProps) => (
  <Get<ResponseECSRecommendationDTO, unknown, EcsRecommendationDetailQueryParams, void>
    path={`/recommendation/details/ecs-service`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseEcsRecommendationDetailProps = Omit<
  UseGetProps<ResponseECSRecommendationDTO, unknown, EcsRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * ECS Recommendation Details
 */
export const useEcsRecommendationDetail = (props: UseEcsRecommendationDetailProps) =>
  useGet<ResponseECSRecommendationDTO, unknown, EcsRecommendationDetailQueryParams, void>(
    `/recommendation/details/ecs-service`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface NodeRecommendationDetailQueryParams {
  accountIdentifier: string
  id: string
}

export type NodeRecommendationDetailProps = Omit<
  GetProps<ResponseNodeRecommendationDTO, unknown, NodeRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * Node pool Recommendation Details
 */
export const NodeRecommendationDetail = (props: NodeRecommendationDetailProps) => (
  <Get<ResponseNodeRecommendationDTO, unknown, NodeRecommendationDetailQueryParams, void>
    path={`/recommendation/details/node-pool`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseNodeRecommendationDetailProps = Omit<
  UseGetProps<ResponseNodeRecommendationDTO, unknown, NodeRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * Node pool Recommendation Details
 */
export const useNodeRecommendationDetail = (props: UseNodeRecommendationDetailProps) =>
  useGet<ResponseNodeRecommendationDTO, unknown, NodeRecommendationDetailQueryParams, void>(
    `/recommendation/details/node-pool`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface WorkloadRecommendationDetailQueryParams {
  accountIdentifier: string
  id: string
  from?: string
  to?: string
}

export type WorkloadRecommendationDetailProps = Omit<
  GetProps<ResponseWorkloadRecommendationDTO, unknown, WorkloadRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * Workload Recommendation Details
 */
export const WorkloadRecommendationDetail = (props: WorkloadRecommendationDetailProps) => (
  <Get<ResponseWorkloadRecommendationDTO, unknown, WorkloadRecommendationDetailQueryParams, void>
    path={`/recommendation/details/workload`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseWorkloadRecommendationDetailProps = Omit<
  UseGetProps<ResponseWorkloadRecommendationDTO, unknown, WorkloadRecommendationDetailQueryParams, void>,
  'path'
>

/**
 * Workload Recommendation Details
 */
export const useWorkloadRecommendationDetail = (props: UseWorkloadRecommendationDetailProps) =>
  useGet<ResponseWorkloadRecommendationDTO, unknown, WorkloadRecommendationDetailQueryParams, void>(
    `/recommendation/details/workload`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetRecommendationsIgnoreListQueryParams {
  accountIdentifier: string
}

export type GetRecommendationsIgnoreListProps = Omit<
  GetProps<ResponseRecommendationsIgnoreList, unknown, GetRecommendationsIgnoreListQueryParams, void>,
  'path'
>

/**
 * Get resources in ignoreList
 */
export const GetRecommendationsIgnoreList = (props: GetRecommendationsIgnoreListProps) => (
  <Get<ResponseRecommendationsIgnoreList, unknown, GetRecommendationsIgnoreListQueryParams, void>
    path={`/recommendation/ignore-list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetRecommendationsIgnoreListProps = Omit<
  UseGetProps<ResponseRecommendationsIgnoreList, unknown, GetRecommendationsIgnoreListQueryParams, void>,
  'path'
>

/**
 * Get resources in ignoreList
 */
export const useGetRecommendationsIgnoreList = (props: UseGetRecommendationsIgnoreListProps) =>
  useGet<ResponseRecommendationsIgnoreList, unknown, GetRecommendationsIgnoreListQueryParams, void>(
    `/recommendation/ignore-list`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface AddRecommendationsIgnoreListQueryParams {
  accountIdentifier: string
}

export type AddRecommendationsIgnoreListProps = Omit<
  MutateProps<
    ResponseRecommendationsIgnoreList,
    unknown,
    AddRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add resources to ignoreList
 */
export const AddRecommendationsIgnoreList = (props: AddRecommendationsIgnoreListProps) => (
  <Mutate<
    ResponseRecommendationsIgnoreList,
    unknown,
    AddRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >
    verb="POST"
    path={`/recommendation/ignore-list/add`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseAddRecommendationsIgnoreListProps = Omit<
  UseMutateProps<
    ResponseRecommendationsIgnoreList,
    unknown,
    AddRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add resources to ignoreList
 */
export const useAddRecommendationsIgnoreList = (props: UseAddRecommendationsIgnoreListProps) =>
  useMutate<
    ResponseRecommendationsIgnoreList,
    unknown,
    AddRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >('POST', `/recommendation/ignore-list/add`, { base: getConfig('ccm/api'), ...props })

export interface RemoveRecommendationsIgnoreListQueryParams {
  accountIdentifier: string
}

export type RemoveRecommendationsIgnoreListProps = Omit<
  MutateProps<
    ResponseRecommendationsIgnoreList,
    unknown,
    RemoveRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Remove resources from ignoreList
 */
export const RemoveRecommendationsIgnoreList = (props: RemoveRecommendationsIgnoreListProps) => (
  <Mutate<
    ResponseRecommendationsIgnoreList,
    unknown,
    RemoveRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >
    verb="POST"
    path={`/recommendation/ignore-list/remove`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseRemoveRecommendationsIgnoreListProps = Omit<
  UseMutateProps<
    ResponseRecommendationsIgnoreList,
    unknown,
    RemoveRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Remove resources from ignoreList
 */
export const useRemoveRecommendationsIgnoreList = (props: UseRemoveRecommendationsIgnoreListProps) =>
  useMutate<
    ResponseRecommendationsIgnoreList,
    unknown,
    RemoveRecommendationsIgnoreListQueryParams,
    RecommendationsIgnoreResourcesDTORequestBody,
    void
  >('POST', `/recommendation/ignore-list/remove`, { base: getConfig('ccm/api'), ...props })

export interface CreateRecommendationJiraQueryParams {
  accountIdentifier: string
}

export type CreateRecommendationJiraProps = Omit<
  MutateProps<ResponseCCMJiraDetails, unknown, CreateRecommendationJiraQueryParams, CCMJiraCreateDTO, void>,
  'path' | 'verb'
>

/**
 * Create jira for recommendation
 */
export const CreateRecommendationJira = (props: CreateRecommendationJiraProps) => (
  <Mutate<ResponseCCMJiraDetails, unknown, CreateRecommendationJiraQueryParams, CCMJiraCreateDTO, void>
    verb="POST"
    path={`/recommendation/jira/create`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCreateRecommendationJiraProps = Omit<
  UseMutateProps<ResponseCCMJiraDetails, unknown, CreateRecommendationJiraQueryParams, CCMJiraCreateDTO, void>,
  'path' | 'verb'
>

/**
 * Create jira for recommendation
 */
export const useCreateRecommendationJira = (props: UseCreateRecommendationJiraProps) =>
  useMutate<ResponseCCMJiraDetails, unknown, CreateRecommendationJiraQueryParams, CCMJiraCreateDTO, void>(
    'POST',
    `/recommendation/jira/create`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface RecommendationsCountQueryParams {
  accountIdentifier: string
}

export type RecommendationsCountProps = Omit<
  MutateProps<
    ResponseInteger,
    unknown,
    RecommendationsCountQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Recommendations count
 */
export const RecommendationsCount = (props: RecommendationsCountProps) => (
  <Mutate<ResponseInteger, unknown, RecommendationsCountQueryParams, CCMRecommendationFilterPropertiesRequestBody, void>
    verb="POST"
    path={`/recommendation/overview/count`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseRecommendationsCountProps = Omit<
  UseMutateProps<
    ResponseInteger,
    unknown,
    RecommendationsCountQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Recommendations count
 */
export const useRecommendationsCount = (props: UseRecommendationsCountProps) =>
  useMutate<
    ResponseInteger,
    unknown,
    RecommendationsCountQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >('POST', `/recommendation/overview/count`, { base: getConfig('ccm/api'), ...props })

export interface RecommendationFilterValuesQueryParams {
  accountIdentifier: string
}

export type RecommendationFilterValuesProps = Omit<
  MutateProps<ResponseListFilterStatsDTO, unknown, RecommendationFilterValuesQueryParams, FilterValuesDTO, void>,
  'path' | 'verb'
>

/**
 * Filter values available for Recommendations
 */
export const RecommendationFilterValues = (props: RecommendationFilterValuesProps) => (
  <Mutate<ResponseListFilterStatsDTO, unknown, RecommendationFilterValuesQueryParams, FilterValuesDTO, void>
    verb="POST"
    path={`/recommendation/overview/filter-values`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseRecommendationFilterValuesProps = Omit<
  UseMutateProps<ResponseListFilterStatsDTO, unknown, RecommendationFilterValuesQueryParams, FilterValuesDTO, void>,
  'path' | 'verb'
>

/**
 * Filter values available for Recommendations
 */
export const useRecommendationFilterValues = (props: UseRecommendationFilterValuesProps) =>
  useMutate<ResponseListFilterStatsDTO, unknown, RecommendationFilterValuesQueryParams, FilterValuesDTO, void>(
    'POST',
    `/recommendation/overview/filter-values`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface ListRecommendationsQueryParams {
  accountIdentifier: string
}

export type ListRecommendationsProps = Omit<
  MutateProps<
    ResponseRecommendationsDTO,
    unknown,
    ListRecommendationsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * List Recommendations
 */
export const ListRecommendations = (props: ListRecommendationsProps) => (
  <Mutate<
    ResponseRecommendationsDTO,
    unknown,
    ListRecommendationsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >
    verb="POST"
    path={`/recommendation/overview/list`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseListRecommendationsProps = Omit<
  UseMutateProps<
    ResponseRecommendationsDTO,
    unknown,
    ListRecommendationsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * List Recommendations
 */
export const useListRecommendations = (props: UseListRecommendationsProps) =>
  useMutate<
    ResponseRecommendationsDTO,
    unknown,
    ListRecommendationsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >('POST', `/recommendation/overview/list`, { base: getConfig('ccm/api'), ...props })

export interface MarkAppliedQueryParams {
  accountIdentifier: string
  recommendationId: string
}

export type MarkAppliedProps = Omit<
  MutateProps<ResponseVoid, unknown, MarkAppliedQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Mark recommendation as applied
 */
export const MarkApplied = (props: MarkAppliedProps) => (
  <Mutate<ResponseVoid, unknown, MarkAppliedQueryParams, void, void>
    verb="POST"
    path={`/recommendation/overview/mark-applied`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseMarkAppliedProps = Omit<
  UseMutateProps<ResponseVoid, unknown, MarkAppliedQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Mark recommendation as applied
 */
export const useMarkApplied = (props: UseMarkAppliedProps) =>
  useMutate<ResponseVoid, unknown, MarkAppliedQueryParams, void, void>(
    'POST',
    `/recommendation/overview/mark-applied`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface RecommendationStatsQueryParams {
  accountIdentifier: string
}

export type RecommendationStatsProps = Omit<
  MutateProps<
    ResponseRecommendationOverviewStats,
    unknown,
    RecommendationStatsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Recommendations Statistics
 */
export const RecommendationStats = (props: RecommendationStatsProps) => (
  <Mutate<
    ResponseRecommendationOverviewStats,
    unknown,
    RecommendationStatsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >
    verb="POST"
    path={`/recommendation/overview/stats`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseRecommendationStatsProps = Omit<
  UseMutateProps<
    ResponseRecommendationOverviewStats,
    unknown,
    RecommendationStatsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Recommendations Statistics
 */
export const useRecommendationStats = (props: UseRecommendationStatsProps) =>
  useMutate<
    ResponseRecommendationOverviewStats,
    unknown,
    RecommendationStatsQueryParams,
    CCMRecommendationFilterPropertiesRequestBody,
    void
  >('POST', `/recommendation/overview/stats`, { base: getConfig('ccm/api'), ...props })

export interface ValidateConnectorQueryParams {
  accountIdentifier?: string
}

export type ValidateConnectorProps = Omit<
  MutateProps<ResponseConnectorValidationResult, unknown, ValidateConnectorQueryParams, ConnectorResponse, void>,
  'path' | 'verb'
>

/**
 * Validate connector
 */
export const ValidateConnector = (props: ValidateConnectorProps) => (
  <Mutate<ResponseConnectorValidationResult, unknown, ValidateConnectorQueryParams, ConnectorResponse, void>
    verb="POST"
    path={`/testconnection`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseValidateConnectorProps = Omit<
  UseMutateProps<ResponseConnectorValidationResult, unknown, ValidateConnectorQueryParams, ConnectorResponse, void>,
  'path' | 'verb'
>

/**
 * Validate connector
 */
export const useValidateConnector = (props: UseValidateConnectorProps) =>
  useMutate<ResponseConnectorValidationResult, unknown, ValidateConnectorQueryParams, ConnectorResponse, void>(
    'POST',
    `/testconnection`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetConnectorDetailsQueryParams {
  accountIdentifier?: string
}

export type GetConnectorDetailsProps = Omit<
  GetProps<ResponseCCMConnectorDetails, unknown, GetConnectorDetailsQueryParams, void>,
  'path'
>

/**
 * Get connector details
 */
export const GetConnectorDetails = (props: GetConnectorDetailsProps) => (
  <Get<ResponseCCMConnectorDetails, unknown, GetConnectorDetailsQueryParams, void>
    path={`/testconnection/firstConnector`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetConnectorDetailsProps = Omit<
  UseGetProps<ResponseCCMConnectorDetails, unknown, GetConnectorDetailsQueryParams, void>,
  'path'
>

/**
 * Get connector details
 */
export const useGetConnectorDetails = (props: UseGetConnectorDetailsProps) =>
  useGet<ResponseCCMConnectorDetails, unknown, GetConnectorDetailsQueryParams, void>(`/testconnection/firstConnector`, {
    base: getConfig('ccm/api'),
    ...props
  })

export interface GetCDLicenseUsageForServiceInstancesQueryParams {
  accountIdentifier?: string
  timestamp?: number
}

export type GetCDLicenseUsageForServiceInstancesProps = Omit<
  GetProps<ResponseServiceInstanceUsageDTO, Failure | Error, GetCDLicenseUsageForServiceInstancesQueryParams, void>,
  'path'
>

/**
 * Gets License Usage By Timestamp for Service Instances in CD Module
 */
export const GetCDLicenseUsageForServiceInstances = (props: GetCDLicenseUsageForServiceInstancesProps) => (
  <Get<ResponseServiceInstanceUsageDTO, Failure | Error, GetCDLicenseUsageForServiceInstancesQueryParams, void>
    path={`/usage/CD/serviceInstancesLicense`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCDLicenseUsageForServiceInstancesProps = Omit<
  UseGetProps<ResponseServiceInstanceUsageDTO, Failure | Error, GetCDLicenseUsageForServiceInstancesQueryParams, void>,
  'path'
>

/**
 * Gets License Usage By Timestamp for Service Instances in CD Module
 */
export const useGetCDLicenseUsageForServiceInstances = (props: UseGetCDLicenseUsageForServiceInstancesProps) =>
  useGet<ResponseServiceInstanceUsageDTO, Failure | Error, GetCDLicenseUsageForServiceInstancesQueryParams, void>(
    `/usage/CD/serviceInstancesLicense`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetCDLicenseUsageForServicesQueryParams {
  accountIdentifier?: string
  timestamp?: number
}

export type GetCDLicenseUsageForServicesProps = Omit<
  GetProps<ResponseServiceUsageDTO, Failure | Error, GetCDLicenseUsageForServicesQueryParams, void>,
  'path'
>

/**
 * Gets License Usage By Timestamp for Services in CD Module
 */
export const GetCDLicenseUsageForServices = (props: GetCDLicenseUsageForServicesProps) => (
  <Get<ResponseServiceUsageDTO, Failure | Error, GetCDLicenseUsageForServicesQueryParams, void>
    path={`/usage/CD/servicesLicense`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCDLicenseUsageForServicesProps = Omit<
  UseGetProps<ResponseServiceUsageDTO, Failure | Error, GetCDLicenseUsageForServicesQueryParams, void>,
  'path'
>

/**
 * Gets License Usage By Timestamp for Services in CD Module
 */
export const useGetCDLicenseUsageForServices = (props: UseGetCDLicenseUsageForServicesProps) =>
  useGet<ResponseServiceUsageDTO, Failure | Error, GetCDLicenseUsageForServicesQueryParams, void>(
    `/usage/CD/servicesLicense`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface LisCDActiveServicesQueryParams {
  accountIdentifier?: string
  page?: number
  size?: number
  sort?: string[]
  timestamp?: number
}

export type LisCDActiveServicesProps = Omit<
  MutateProps<
    ResponsePageActiveServiceDTO,
    Failure | Error,
    LisCDActiveServicesQueryParams,
    ActiveServicesFilterParams,
    void
  >,
  'path' | 'verb'
>

/**
 * List Active Services in CD Module
 */
export const LisCDActiveServices = (props: LisCDActiveServicesProps) => (
  <Mutate<
    ResponsePageActiveServiceDTO,
    Failure | Error,
    LisCDActiveServicesQueryParams,
    ActiveServicesFilterParams,
    void
  >
    verb="POST"
    path={`/usage/cd/active-services`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseLisCDActiveServicesProps = Omit<
  UseMutateProps<
    ResponsePageActiveServiceDTO,
    Failure | Error,
    LisCDActiveServicesQueryParams,
    ActiveServicesFilterParams,
    void
  >,
  'path' | 'verb'
>

/**
 * List Active Services in CD Module
 */
export const useLisCDActiveServices = (props: UseLisCDActiveServicesProps) =>
  useMutate<
    ResponsePageActiveServiceDTO,
    Failure | Error,
    LisCDActiveServicesQueryParams,
    ActiveServicesFilterParams,
    void
  >('POST', `/usage/cd/active-services`, { base: getConfig('ccm/api'), ...props })

export interface DownloadActiveServiceCSVReportQueryParams {
  accountIdentifier?: string
  timestamp?: number
}

export type DownloadActiveServiceCSVReportProps = Omit<
  GetProps<void, Failure | Error, DownloadActiveServiceCSVReportQueryParams, void>,
  'path'
>

/**
 * Download CSV Active Services report
 */
export const DownloadActiveServiceCSVReport = (props: DownloadActiveServiceCSVReportProps) => (
  <Get<void, Failure | Error, DownloadActiveServiceCSVReportQueryParams, void>
    path={`/usage/cd/active-services/csv/download`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseDownloadActiveServiceCSVReportProps = Omit<
  UseGetProps<void, Failure | Error, DownloadActiveServiceCSVReportQueryParams, void>,
  'path'
>

/**
 * Download CSV Active Services report
 */
export const useDownloadActiveServiceCSVReport = (props: UseDownloadActiveServiceCSVReportProps) =>
  useGet<void, Failure | Error, DownloadActiveServiceCSVReportQueryParams, void>(
    `/usage/cd/active-services/csv/download`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetLicenseUsageQueryParams {
  accountIdentifier?: string
  timestamp?: number
  CDLicenseType?: string
}

export interface GetLicenseUsagePathParams {
  module: string
}

export type GetLicenseUsageProps = Omit<
  GetProps<ResponseLicenseUsageDTO, Failure | Error, GetLicenseUsageQueryParams, GetLicenseUsagePathParams>,
  'path'
> &
  GetLicenseUsagePathParams

/**
 * Gets License Usage By Module and Timestamp
 */
export const GetLicenseUsage = ({ module, ...props }: GetLicenseUsageProps) => (
  <Get<ResponseLicenseUsageDTO, Failure | Error, GetLicenseUsageQueryParams, GetLicenseUsagePathParams>
    path={`/usage/${module}`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetLicenseUsageProps = Omit<
  UseGetProps<ResponseLicenseUsageDTO, Failure | Error, GetLicenseUsageQueryParams, GetLicenseUsagePathParams>,
  'path'
> &
  GetLicenseUsagePathParams

/**
 * Gets License Usage By Module and Timestamp
 */
export const useGetLicenseUsage = ({ module, ...props }: UseGetLicenseUsageProps) =>
  useGet<ResponseLicenseUsageDTO, Failure | Error, GetLicenseUsageQueryParams, GetLicenseUsagePathParams>(
    (paramsInPath: GetLicenseUsagePathParams) => `/usage/${paramsInPath.module}`,
    { base: getConfig('ccm/api'), pathParams: { module }, ...props }
  )

export interface CloudCostCapabilityCheckQueryParams {
  accountIdentifier?: string
}

export type CloudCostCapabilityCheckProps = Omit<
  MutateProps<
    ResponseConnectorValidationResult,
    Failure | Error,
    CloudCostCapabilityCheckQueryParams,
    K8sClusterSetupRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * check if the existing k8s cloud provider have necessary permissions to enable Cloud Cost Visibility
 */
export const CloudCostCapabilityCheck = (props: CloudCostCapabilityCheckProps) => (
  <Mutate<
    ResponseConnectorValidationResult,
    Failure | Error,
    CloudCostCapabilityCheckQueryParams,
    K8sClusterSetupRequestRequestBody,
    void
  >
    verb="POST"
    path={`/yaml/cloudCostCapabilityCheck`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCloudCostCapabilityCheckProps = Omit<
  UseMutateProps<
    ResponseConnectorValidationResult,
    Failure | Error,
    CloudCostCapabilityCheckQueryParams,
    K8sClusterSetupRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * check if the existing k8s cloud provider have necessary permissions to enable Cloud Cost Visibility
 */
export const useCloudCostCapabilityCheck = (props: UseCloudCostCapabilityCheckProps) =>
  useMutate<
    ResponseConnectorValidationResult,
    Failure | Error,
    CloudCostCapabilityCheckQueryParams,
    K8sClusterSetupRequestRequestBody,
    void
  >('POST', `/yaml/cloudCostCapabilityCheck`, { base: getConfig('ccm/api'), ...props })

export interface CloudCostK8sClusterSetupQueryParams {
  accountIdentifier?: string
}

export type CloudCostK8sClusterSetupProps = Omit<
  MutateProps<void, Failure | Error, CloudCostK8sClusterSetupQueryParams, K8sClusterSetupRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * get k8s cluster setup yaml based on features enabled
 */
export const CloudCostK8sClusterSetup = (props: CloudCostK8sClusterSetupProps) => (
  <Mutate<void, Failure | Error, CloudCostK8sClusterSetupQueryParams, K8sClusterSetupRequestRequestBody, void>
    verb="POST"
    path={`/yaml/cloudCostK8sClusterSetup`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCloudCostK8sClusterSetupProps = Omit<
  UseMutateProps<void, Failure | Error, CloudCostK8sClusterSetupQueryParams, K8sClusterSetupRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * get k8s cluster setup yaml based on features enabled
 */
export const useCloudCostK8sClusterSetup = (props: UseCloudCostK8sClusterSetupProps) =>
  useMutate<void, Failure | Error, CloudCostK8sClusterSetupQueryParams, K8sClusterSetupRequestRequestBody, void>(
    'POST',
    `/yaml/cloudCostK8sClusterSetup`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface CloudCostK8sClusterSetupV2QueryParams {
  accountIdentifier?: string
  includeVisibility?: boolean
  includeOptimization?: boolean
}

export type CloudCostK8sClusterSetupV2Props = Omit<
  MutateProps<void, Failure | Error, CloudCostK8sClusterSetupV2QueryParams, K8sClusterSetupRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * get k8s cluster setup yaml based on requirement
 */
export const CloudCostK8sClusterSetupV2 = (props: CloudCostK8sClusterSetupV2Props) => (
  <Mutate<void, Failure | Error, CloudCostK8sClusterSetupV2QueryParams, K8sClusterSetupRequestRequestBody, void>
    verb="POST"
    path={`/yaml/cloudCostK8sClusterSetupV2`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseCloudCostK8sClusterSetupV2Props = Omit<
  UseMutateProps<void, Failure | Error, CloudCostK8sClusterSetupV2QueryParams, K8sClusterSetupRequestRequestBody, void>,
  'path' | 'verb'
>

/**
 * get k8s cluster setup yaml based on requirement
 */
export const useCloudCostK8sClusterSetupV2 = (props: UseCloudCostK8sClusterSetupV2Props) =>
  useMutate<void, Failure | Error, CloudCostK8sClusterSetupV2QueryParams, K8sClusterSetupRequestRequestBody, void>(
    'POST',
    `/yaml/cloudCostK8sClusterSetupV2`,
    { base: getConfig('ccm/api'), ...props }
  )

export interface GetCostOptimisationYamlTemplateQueryParams {
  accountIdentifier?: string
  connectorIdentifier?: string
}

export type GetCostOptimisationYamlTemplateProps = Omit<
  MutateProps<void, Failure | Error, GetCostOptimisationYamlTemplateQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Get Cost Optimisation Yaml
 */
export const GetCostOptimisationYamlTemplate = (props: GetCostOptimisationYamlTemplateProps) => (
  <Mutate<void, Failure | Error, GetCostOptimisationYamlTemplateQueryParams, void, void>
    verb="POST"
    path={`/yaml/generate-cost-optimisation-yaml`}
    base={getConfig('ccm/api')}
    {...props}
  />
)

export type UseGetCostOptimisationYamlTemplateProps = Omit<
  UseMutateProps<void, Failure | Error, GetCostOptimisationYamlTemplateQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Get Cost Optimisation Yaml
 */
export const useGetCostOptimisationYamlTemplate = (props: UseGetCostOptimisationYamlTemplateProps) =>
  useMutate<void, Failure | Error, GetCostOptimisationYamlTemplateQueryParams, void, void>(
    'POST',
    `/yaml/generate-cost-optimisation-yaml`,
    { base: getConfig('ccm/api'), ...props }
  )
