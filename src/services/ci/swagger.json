{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "CI API Reference",
    "contact": {}
  },
  "host": "localhost",
  "tags": [
    {
      "name": "ci"
    },
    {
      "name": "execution-config"
    },
    {
      "name": "health"
    },
    {
      "name": "partial-yaml-schema"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/ci/buildHealth": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build health",
        "description": "",
        "operationId": "getBuildHealth",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildsHealthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/buildExecution": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build execution",
        "description": "",
        "operationId": "getBuildExecution",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/repositoryBuild": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build getRepositoryBuild",
        "description": "",
        "operationId": "getRepositoryBuild",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildRepositoryInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/getBuilds": {
      "get": {
        "tags": ["ci"],
        "summary": "Get builds",
        "description": "",
        "operationId": "getBuilds",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildsActiveAndFailedInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/usage/ci": {
      "get": {
        "tags": ["ci"],
        "summary": "Get usage",
        "description": "",
        "operationId": "getUsage",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIUsageResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/execution-config": {
      "get": {
        "tags": ["execution-config"],
        "summary": "Get execution config",
        "description": "",
        "operationId": "getExecutionConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListDeprecatedImageInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["execution-config"],
        "summary": "Delete execution config",
        "description": "",
        "operationId": "deleteExecutionConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/execution-config/get-default-config": {
      "get": {
        "tags": ["execution-config"],
        "summary": "Get default execution config",
        "description": "",
        "operationId": "getDefaultConfig",
        "parameters": [
          {
            "name": "infra",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["K8", "VM", "DLITE_VM", "DOCKER"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIExecutionImages"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/execution-config/reset-config": {
      "post": {
        "tags": ["execution-config"],
        "summary": "Reset execution config",
        "description": "",
        "operationId": "resetExecutionConfig",
        "parameters": [
          {
            "name": "infra",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["K8", "VM", "DLITE_VM", "DOCKER"]
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Operation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/execution-config/get-customer-config": {
      "get": {
        "tags": ["execution-config"],
        "summary": "Get customer's execution config",
        "description": "",
        "operationId": "getCustomerConfig",
        "parameters": [
          {
            "name": "infra",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["K8", "VM", "DLITE_VM", "DOCKER"]
          },
          {
            "name": "overridesOnly",
            "in": "query",
            "required": true,
            "type": "boolean",
            "default": true
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIExecutionImages"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/execution-config/update-config": {
      "post": {
        "tags": ["execution-config"],
        "summary": "Update execution config",
        "description": "",
        "operationId": "updateExecutionConfig",
        "parameters": [
          {
            "name": "infra",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["K8", "VM", "DLITE_VM", "DOCKER"]
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Operation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerStageSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking integration stage",
        "description": "",
        "operationId": "dummyApiForSwaggerStageSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStageElementConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerStepSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking integration stage",
        "description": "",
        "operationId": "dummyApiForSwaggerStepSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStepElementConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema",
        "description": "",
        "operationId": "getPartialYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListPartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get step YAML schema",
        "description": "",
        "operationId": "getStepYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "name": "entityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatePR",
              "GITOPS_MERGE_PR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "GovernancePolicies",
              "POLICY_STEP",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AZURE_SLOT_DEPLOYMENT_STEP",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback"
            ]
          },
          {
            "name": "yamlGroup",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/YamlSchemaDetailsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJsonNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/details": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema with details",
        "description": "",
        "operationId": "getPartialYamlSchemaWithDetails",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseYamlSchemaDetailsWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/merged": {
      "post": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Merged Partial Yaml Schema",
        "description": "",
        "operationId": "getMergedPartialYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/YamlSchemaDetailsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListPartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerCIPipelineModuleInfoSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking CIPipelineModuleInfo",
        "description": "",
        "operationId": "dummyApiForSwaggerCIPipelineModuleInfoSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIPipelineModuleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BuildHealth": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "BuildInfo": {
      "type": "object",
      "properties": {
        "total": {
          "$ref": "#/definitions/BuildHealth"
        },
        "success": {
          "$ref": "#/definitions/BuildHealth"
        },
        "failed": {
          "$ref": "#/definitions/BuildHealth"
        }
      }
    },
    "DashboardBuildsHealthInfo": {
      "type": "object",
      "properties": {
        "builds": {
          "$ref": "#/definitions/BuildInfo"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseDashboardBuildsHealthInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildsHealthInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Failure": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "EntityGitDetails": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "repoIdentifier": {
          "type": "string"
        },
        "rootFolder": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "commitId": {
          "type": "string"
        },
        "fileUrl": {
          "type": "string"
        },
        "repoUrl": {
          "type": "string"
        }
      }
    },
    "EntityValidityDetails": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "invalidYaml": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "detailedMessage": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        },
        "metadata": {
          "$ref": "#/definitions/ErrorMetadataDTO"
        }
      }
    },
    "ErrorMetadata": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED"
          ]
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ErrorMetadataDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ErrorNodeSummary": {
      "type": "object",
      "properties": {
        "nodeInfo": {
          "$ref": "#/definitions/NodeInfo"
        },
        "templateInfo": {
          "$ref": "#/definitions/TemplateInfo"
        },
        "templateResponse": {
          "$ref": "#/definitions/TemplateResponse"
        },
        "childrenErrorNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorNodeSummary"
          }
        }
      }
    },
    "FilterCreatorErrorResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorMetadataList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ErrorMetadata"
              }
            }
          }
        }
      ]
    },
    "InputSetError": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "InputSetErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputSetError"
          }
        }
      }
    },
    "InputSetErrorWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorPipelineYaml": {
              "type": "string"
            },
            "uuidToErrorResponseMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/InputSetErrorResponse"
              }
            },
            "invalidInputSetReferences": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "InvalidFieldsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "NodeErrorInfo": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "fqn": {
          "type": "string"
        }
      }
    },
    "NodeInfo": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "localFqn": {
          "type": "string"
        }
      }
    },
    "OverlayInputSetErrorWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "invalidReferences": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED"
          ]
        },
        "level": {
          "type": "string",
          "enum": ["INFO", "ERROR"]
        },
        "message": {
          "type": "string"
        },
        "exception": {
          "$ref": "#/definitions/Throwable"
        },
        "failureTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR",
              "POLICY_EVALUATION_FAILURE",
              "EXECUTION_INPUT_TIMEOUT_FAILURE"
            ]
          }
        }
      }
    },
    "SampleErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "sampleMap": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ScmErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "conflictCommitId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "classLoaderName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "moduleVersion": {
          "type": "string"
        },
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "TemplateInfo": {
      "type": "object",
      "properties": {
        "templateIdentifier": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        },
        "templateEntityType": {
          "type": "string",
          "enum": [
            "Step",
            "Stage",
            "Pipeline",
            "CustomDeployment",
            "MonitoredService",
            "SecretManager",
            "ArtifactSource"
          ]
        }
      }
    },
    "TemplateInputsErrorDTO": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "TemplateInputsErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorYaml": {
              "type": "string"
            },
            "errorMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/TemplateInputsErrorDTO"
              }
            }
          }
        }
      ]
    },
    "TemplateResponse": {
      "type": "object",
      "required": ["accountId", "identifier", "name"],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "yaml": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        },
        "templateEntityType": {
          "type": "string",
          "enum": [
            "Step",
            "Stage",
            "Pipeline",
            "CustomDeployment",
            "MonitoredService",
            "SecretManager",
            "ArtifactSource"
          ]
        },
        "childType": {
          "type": "string"
        },
        "templateScope": {
          "type": "string",
          "enum": ["account", "org", "project", "unknown"]
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "stableTemplate": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "ValidateTemplateInputsResponseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "validYaml": {
              "type": "boolean"
            },
            "errorNodeSummary": {
              "$ref": "#/definitions/ErrorNodeSummary"
            }
          }
        }
      ]
    },
    "YamlSchemaErrorDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageWithFQN": {
          "type": "string"
        },
        "stageInfo": {
          "$ref": "#/definitions/NodeErrorInfo"
        },
        "stepInfo": {
          "$ref": "#/definitions/NodeErrorInfo"
        },
        "fqn": {
          "type": "string"
        },
        "hintMessage": {
          "type": "string"
        }
      }
    },
    "YamlSchemaErrorWrapperDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "schemaErrors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/YamlSchemaErrorDTO"
              }
            }
          }
        }
      ]
    },
    "BuildCount": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "success": {
          "type": "integer",
          "format": "int64"
        },
        "failed": {
          "type": "integer",
          "format": "int64"
        },
        "aborted": {
          "type": "integer",
          "format": "int64"
        },
        "expired": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BuildExecutionInfo": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "builds": {
          "$ref": "#/definitions/BuildCount"
        }
      }
    },
    "DashboardBuildExecutionInfo": {
      "type": "object",
      "properties": {
        "buildExecutionInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildExecutionInfo"
          }
        }
      }
    },
    "ResponseDashboardBuildExecutionInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildExecutionInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AuthorInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BuildRepositoryCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DashboardBuildRepositoryInfo": {
      "type": "object",
      "properties": {
        "repositoryInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryInfo"
          }
        }
      }
    },
    "LastRepositoryInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "commit": {
          "type": "string"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RepositoryBuildInfo": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "builds": {
          "$ref": "#/definitions/BuildRepositoryCount"
        }
      }
    },
    "RepositoryInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "buildCount": {
          "type": "integer",
          "format": "int64"
        },
        "percentSuccess": {
          "type": "number",
          "format": "double"
        },
        "successRate": {
          "type": "number",
          "format": "double"
        },
        "lastRepository": {
          "$ref": "#/definitions/LastRepositoryInfo"
        },
        "countList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryBuildInfo"
          }
        }
      }
    },
    "ResponseDashboardBuildRepositoryInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildRepositoryInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "BuildActiveInfo": {
      "type": "object",
      "properties": {
        "piplineName": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "triggerType": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "gitInfo": {
          "$ref": "#/definitions/GitInfo"
        },
        "serviceInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDeploymentInfo"
          }
        }
      }
    },
    "BuildFailureInfo": {
      "type": "object",
      "properties": {
        "piplineName": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "gitInfo": {
          "$ref": "#/definitions/GitInfo"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "triggerType": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "serviceInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDeploymentInfo"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "DashboardBuildsActiveAndFailedInfo": {
      "type": "object",
      "properties": {
        "failed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildFailureInfo"
          }
        },
        "active": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildActiveInfo"
          }
        }
      }
    },
    "GitInfo": {
      "type": "object",
      "properties": {
        "sourceBranch": {
          "type": "string"
        },
        "targetBranch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        }
      }
    },
    "ResponseDashboardBuildsActiveAndFailedInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildsActiveAndFailedInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceDeploymentInfo": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "serviceTag": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      }
    },
    "CIUsageResult": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "activeCommitters": {
          "$ref": "#/definitions/UsageDataDTO"
        }
      }
    },
    "ReferenceDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseCIUsageResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CIUsageResult"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UsageDataDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "displayName": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDTO"
          }
        }
      }
    },
    "ResponseBoolean": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "boolean"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CIExecutionImages": {
      "type": "object",
      "properties": {
        "addonTag": {
          "type": "string"
        },
        "liteEngineTag": {
          "type": "string"
        },
        "gitCloneTag": {
          "type": "string"
        },
        "buildAndPushDockerRegistryTag": {
          "type": "string"
        },
        "buildAndPushECRTag": {
          "type": "string"
        },
        "buildAndPushACRTag": {
          "type": "string"
        },
        "buildAndPushGCRTag": {
          "type": "string"
        },
        "gcsUploadTag": {
          "type": "string"
        },
        "s3UploadTag": {
          "type": "string"
        },
        "artifactoryUploadTag": {
          "type": "string"
        },
        "cacheGCSTag": {
          "type": "string"
        },
        "cacheS3Tag": {
          "type": "string"
        },
        "securityTag": {
          "type": "string"
        }
      }
    },
    "ResponseCIExecutionImages": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CIExecutionImages"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Operation": {
      "type": "object",
      "required": ["field"],
      "properties": {
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DeprecatedImageInfo": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ResponseListDeprecatedImageInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeprecatedImageInfo"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ACRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "repository", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "repository": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Abort"]
            }
          }
        }
      ]
    },
    "BackgroundStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "command": {
              "type": "string"
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "shell": {
              "type": "string",
              "enum": ["Sh", "Bash", "Powershell", "Pwsh"]
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "portBindings": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["branch"],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BranchWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "branchName": {
              "type": "string"
            },
            "link": {
              "type": "string"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommitDetails"
              }
            },
            "repository": {
              "$ref": "#/definitions/Repository"
            },
            "baseAttributes": {
              "$ref": "#/definitions/WebhookBaseAttributes"
            }
          }
        }
      ]
    },
    "Build": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["branch", "tag", "PR"]
        },
        "spec": {
          "$ref": "#/definitions/BuildSpec"
        }
      }
    },
    "BuildJobEnvInfo": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["K8", "VM", "DOCKER"]
        }
      }
    },
    "BuildSpec": {
      "type": "object"
    },
    "CIExecutionArgs": {
      "type": "object",
      "properties": {
        "executionSource": {
          "$ref": "#/definitions/ExecutionSource"
        },
        "runSequence": {
          "type": "string"
        }
      }
    },
    "CIServiceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/DependencySpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "image"],
          "properties": {
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "portBindings": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "CIVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["EmptyDir", "PersistentVolumeClaim", "HostPath"]
        }
      }
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "drop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CleanupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["infrastructure", "podName"],
          "properties": {
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            },
            "podName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CloudRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/Runtime"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Cloud"]
            },
            "spec": {
              "$ref": "#/definitions/CloudRuntimeSpec"
            }
          }
        }
      ]
    },
    "CloudRuntimeSpec": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string"
        }
      }
    },
    "CodeBase": {
      "type": "object",
      "required": ["build", "connectorRef"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/Build"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "sslVerify": {
          "type": "boolean"
        },
        "prCloneStrategy": {
          "type": "string",
          "enum": ["MergeCommit", "SourceBranch"]
        },
        "resources": {
          "$ref": "#/definitions/ContainerResource"
        }
      }
    },
    "CommitDetails": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerEmail": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConnectorConversionInfo": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "envToSecretsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ContainerDefinitionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "containerImageDetails": {
          "$ref": "#/definitions/ContainerImageDetails"
        },
        "containerType": {
          "type": "string",
          "enum": [
            "STEP_EXECUTOR",
            "ADD_ON",
            "RUN",
            "PLUGIN",
            "SERVICE",
            "LITE_ENGINE",
            "TEST_INTELLIGENCE",
            "BACKGROUND"
          ]
        },
        "containerResourceParams": {
          "$ref": "#/definitions/ContainerResourceParams"
        },
        "stepIdentifier": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "envVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "envVarsWithSecretRef": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secretVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretNGVariable"
          }
        },
        "privileged": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "harnessManagedImage": {
          "type": "boolean"
        },
        "mainLiteEngine": {
          "type": "boolean"
        }
      }
    },
    "ContainerImageDetails": {
      "type": "object",
      "properties": {
        "imageDetails": {
          "$ref": "#/definitions/ImageDetails"
        },
        "connectorIdentifier": {
          "type": "string"
        }
      }
    },
    "ContainerResource": {
      "type": "object",
      "required": ["limits"],
      "properties": {
        "limits": {
          "$ref": "#/definitions/Limits"
        }
      }
    },
    "ContainerResourceParams": {
      "type": "object",
      "properties": {
        "resourceRequestMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMilliCpu": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMilliCpu": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CustomExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DependencyElement": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Service"]
        },
        "spec": {
          "$ref": "#/definitions/DependencySpecType"
        }
      }
    },
    "DependencySpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "DockerInfraSpec": {
      "type": "object",
      "required": ["platform"],
      "properties": {
        "platform": {
          "$ref": "#/definitions/ParameterFieldPlatform"
        }
      }
    },
    "DockerInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
            },
            "spec": {
              "$ref": "#/definitions/DockerInfraSpec"
            }
          }
        }
      ]
    },
    "DockerRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/Runtime"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Docker"]
            },
            "spec": {
              "$ref": "#/definitions/DockerRuntimeSpec"
            }
          }
        }
      ]
    },
    "DockerRuntimeSpec": {
      "type": "object"
    },
    "DockerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "repo", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "repo": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheRepo": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "ECRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["account", "connectorRef", "imageName", "region", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "account": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "EmptyDirVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/PodVolume"
        },
        {
          "type": "object",
          "required": ["mountPath", "name"],
          "properties": {
            "name": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "medium": {
              "type": "string"
            },
            "sizeMib": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/CIVolume"
        },
        {
          "type": "object",
          "required": ["mountPath", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["EmptyDir", "PersistentVolumeClaim", "HostPath"]
            },
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/EmptyDirYamlSpec"
            }
          }
        }
      ]
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      }
    },
    "ExcludeConfig": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": ["steps"],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ExecutionSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["WEBHOOK", "MANUAL", "CUSTOM"]
        }
      }
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValue"
          ]
        }
      }
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": ["onFailure"],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      }
    },
    "GCRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "host", "imageName", "projectID", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "host": {
              "type": "string"
            },
            "projectID": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "GitCloneStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["build", "connectorRef"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "repoName": {
              "type": "string"
            },
            "build": {
              "$ref": "#/definitions/Build"
            },
            "projectName": {
              "type": "string"
            },
            "depth": {
              "type": "integer",
              "format": "int32"
            },
            "sslVerify": {
              "type": "boolean"
            },
            "cloneDirectory": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "times": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "maxConcurrency": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partitionSize": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "unit": {
          "type": "string",
          "enum": ["Percentage", "Count"]
        }
      }
    },
    "HostPathVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/PodVolume"
        },
        {
          "type": "object",
          "required": ["mountPath", "name", "path"],
          "properties": {
            "name": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "hostPathType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/CIVolume"
        },
        {
          "type": "object",
          "required": ["mountPath", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["EmptyDir", "PersistentVolumeClaim", "HostPath"]
            },
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/HostPathYamlSpec"
            }
          }
        }
      ]
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "HostedVmInfraSpec": {
      "type": "object",
      "required": ["platform"],
      "properties": {
        "platform": {
          "$ref": "#/definitions/ParameterFieldPlatform"
        }
      }
    },
    "HostedVmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
            },
            "spec": {
              "$ref": "#/definitions/HostedVmInfraSpec"
            }
          }
        }
      ]
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Ignore"]
            }
          }
        }
      ]
    },
    "ImageDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "usernameRef": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
        }
      }
    },
    "InitializeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["accountId", "executionElementConfig", "infrastructure", "skipGitClone"],
          "properties": {
            "accountId": {
              "type": "string"
            },
            "buildJobEnvInfo": {
              "$ref": "#/definitions/BuildJobEnvInfo"
            },
            "executionElementConfig": {
              "$ref": "#/definitions/ExecutionElementConfig"
            },
            "ciCodebase": {
              "$ref": "#/definitions/CodeBase"
            },
            "skipGitClone": {
              "type": "boolean"
            },
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            },
            "executionSource": {
              "$ref": "#/definitions/ExecutionSource"
            },
            "stageElementConfig": {
              "$ref": "#/definitions/IntegrationStageConfig"
            },
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "stageIdentifier": {
              "type": "string"
            },
            "strategyExpansionMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/StrategyExpansionData"
              }
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "validatorType": {
          "type": "string",
          "enum": ["ALLOWED_VALUES", "REGEX"]
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "IntegrationStageConfig": {
      "type": "object",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        },
        "infrastructure": {
          "$ref": "#/definitions/Infrastructure"
        },
        "platform": {
          "$ref": "#/definitions/ParameterFieldPlatform"
        },
        "serviceDependencies": {
          "$ref": "#/definitions/ParameterFieldListDependencyElement"
        },
        "sharedPaths": {
          "$ref": "#/definitions/ParameterFieldListString"
        },
        "cloneCodebase": {
          "$ref": "#/definitions/ParameterFieldBoolean"
        },
        "runtime": {
          "$ref": "#/definitions/Runtime"
        }
      }
    },
    "IntegrationStageConfigImpl": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "properties": {
            "sharedPaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            },
            "runtime": {
              "$ref": "#/definitions/Runtime"
            },
            "platform": {
              "$ref": "#/definitions/Platform"
            },
            "serviceDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependencyElement"
              }
            },
            "cloneCodebase": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "JUnitTestReport": {
      "allOf": [
        {
          "$ref": "#/definitions/UnitTestReportSpec"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JsonNode": {
      "type": "object"
    },
    "K8BuildJobEnvInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "podsSetupInfo": {
              "$ref": "#/definitions/PodsSetupInfo"
            },
            "workDir": {
              "type": "string"
            },
            "stepConnectorRefs": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ConnectorConversionInfo"
                }
              }
            }
          }
        }
      ]
    },
    "K8sDirectInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
            },
            "spec": {
              "$ref": "#/definitions/K8sDirectInfraYamlSpec"
            }
          }
        }
      ]
    },
    "K8sDirectInfraYamlSpec": {
      "type": "object",
      "required": ["connectorRef", "namespace"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "serviceAccountName": {
          "type": "string"
        },
        "initTimeout": {
          "type": "string"
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tolerations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Toleration"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIVolume"
          }
        },
        "automountServiceAccountToken": {
          "type": "boolean"
        },
        "containerSecurityContext": {
          "$ref": "#/definitions/SecurityContext"
        },
        "priorityClassName": {
          "type": "string"
        },
        "os": {
          "type": "string",
          "enum": ["Linux", "MacOS", "Windows"]
        },
        "harnessImageConnectorRef": {
          "type": "string"
        }
      }
    },
    "K8sHostedInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
            },
            "spec": {
              "$ref": "#/definitions/K8sHostedInfraYamlSpec"
            }
          }
        }
      ]
    },
    "K8sHostedInfraYamlSpec": {
      "type": "object",
      "required": ["identifier"],
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "Limits": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      }
    },
    "ManualExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "prNumber": {
              "type": "string"
            },
            "commitSha": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": ["onTimeout", "timeout"],
      "properties": {
        "timeout": {
          "type": "string"
        },
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        }
      }
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["ManualIntervention"]
            }
          }
        }
      ]
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["MarkAsSuccess"]
            }
          }
        }
      ]
    },
    "MatrixConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/MatrixConfigInterface"
        },
        {
          "type": "object",
          "properties": {
            "exclude": {
              "$ref": "#/definitions/ParameterFieldListExcludeConfig"
            },
            "maxConcurrency": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        }
      ]
    },
    "MatrixConfigInterface": {
      "type": "object",
      "discriminator": "type"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["String", "Number", "Secret"]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Number"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "default": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "OnFailureConfig": {
      "type": "object",
      "required": ["action", "errors"],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "ExecutionInputTimeoutError"
            ]
          }
        },
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "PRBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["number"],
          "properties": {
            "number": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PRWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "pullRequestId": {
              "type": "integer",
              "format": "int64"
            },
            "pullRequestLink": {
              "type": "string"
            },
            "pullRequestBody": {
              "type": "string"
            },
            "sourceBranch": {
              "type": "string"
            },
            "targetBranch": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "closed": {
              "type": "boolean"
            },
            "merged": {
              "type": "boolean"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommitDetails"
              }
            },
            "repository": {
              "$ref": "#/definitions/Repository"
            },
            "baseAttributes": {
              "$ref": "#/definitions/WebhookBaseAttributes"
            }
          }
        }
      ]
    },
    "PVCParams": {
      "type": "object",
      "properties": {
        "volumeName": {
          "type": "string"
        },
        "claimName": {
          "type": "string"
        },
        "storageClass": {
          "type": "string"
        },
        "sizeMib": {
          "type": "integer",
          "format": "int32"
        },
        "present": {
          "type": "boolean"
        }
      }
    },
    "PVCVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/PodVolume"
        },
        {
          "type": "object",
          "required": ["claimName", "mountPath", "name"],
          "properties": {
            "name": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "claimName": {
              "type": "string"
            },
            "readOnly": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        },
        "defaultValue": {
          "type": "object"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "boolean"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldListDependencyElement": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyElement"
          }
        },
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyElement"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldListExcludeConfig": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExcludeConfig"
          }
        },
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExcludeConfig"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldListString": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldPlatform": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/Platform"
        },
        "defaultValue": {
          "$ref": "#/definitions/Platform"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/CIVolume"
        },
        {
          "type": "object",
          "required": ["mountPath", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["EmptyDir", "PersistentVolumeClaim", "HostPath"]
            },
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/PersistentVolumeClaimYamlSpec"
            }
          }
        }
      ]
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": ["claimName"],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["PipelineRollback"]
            }
          }
        }
      ]
    },
    "Platform": {
      "type": "object",
      "properties": {
        "os": {
          "type": "string",
          "enum": ["Linux", "MacOS", "Windows"]
        },
        "arch": {
          "type": "string",
          "enum": ["Amd64"]
        }
      }
    },
    "PluginStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "image"],
          "properties": {
            "settings": {
              "$ref": "#/definitions/ParameterFieldMapStringJsonNode"
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "PodSetupInfo": {
      "type": "object",
      "required": ["stageCpuRequest", "stageMemoryRequest", "volumeToMountPath"],
      "properties": {
        "podSetupParams": {
          "$ref": "#/definitions/PodSetupParams"
        },
        "pvcParamsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PVCParams"
          }
        },
        "volumeToMountPath": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "stageMemoryRequest": {
          "type": "integer",
          "format": "int32"
        },
        "stageCpuRequest": {
          "type": "integer",
          "format": "int32"
        },
        "serviceIdList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceGrpcPortList": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "workDirPath": {
          "type": "string"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodVolume"
          }
        }
      }
    },
    "PodSetupParams": {
      "type": "object",
      "properties": {
        "containerDefinitionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerDefinitionInfo"
          }
        }
      }
    },
    "PodVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["EmptyDir", "PersistentVolumeClaim", "HostPath"]
        }
      }
    },
    "PodsSetupInfo": {
      "type": "object",
      "properties": {
        "podSetupInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodSetupInfo"
          }
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["ProceedWithDefaultValue"]
            }
          }
        }
      ]
    },
    "Repository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "httpURL": {
          "type": "string"
        },
        "sshURL": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        }
      }
    },
    "ResponseStageElementConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StageElementConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestoreCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "RestoreCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "pathStyle": {
              "type": "boolean"
            },
            "failIfKeyNotFound": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["Retry"]
            }
          }
        }
      ]
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": ["onRetryFailure", "retryCount", "retryIntervals"],
      "properties": {
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        }
      }
    },
    "RunStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["command"],
          "properties": {
            "command": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputNGVariable"
              }
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "shell": {
              "type": "string",
              "enum": ["Sh", "Bash", "Powershell", "Pwsh"]
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "RunTestsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["args", "buildTool", "language"],
          "properties": {
            "args": {
              "type": "string"
            },
            "language": {
              "type": "string",
              "enum": ["Java", "Kotlin", "Scala", "Csharp"]
            },
            "buildTool": {
              "type": "string",
              "enum": ["Maven", "Bazel", "Gradle", "Dotnet", "Nunitconsole", "SBT"]
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "testAnnotations": {
              "type": "string"
            },
            "packages": {
              "type": "string"
            },
            "namespaces": {
              "type": "string"
            },
            "runOnlySelectedTests": {
              "type": "boolean"
            },
            "preCommand": {
              "type": "string"
            },
            "postCommand": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputNGVariable"
              }
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildEnvironment": {
              "type": "string",
              "enum": ["Core", "Framework"]
            },
            "frameworkVersion": {
              "type": "string",
              "enum": ["5.0", "6.0"]
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            },
            "shell": {
              "type": "string",
              "enum": ["Sh", "Bash", "Powershell", "Pwsh"]
            },
            "testSplitStrategy": {
              "type": "string",
              "enum": ["ClassTiming", "TestCount"]
            },
            "enableTestSplitting": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Runtime": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Docker", "Cloud"]
        }
      }
    },
    "SaveCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key", "sourcePaths"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "override": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "SaveCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key", "sourcePaths"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "region": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "pathStyle": {
              "type": "boolean"
            },
            "override": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Secret"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "type": "boolean"
        },
        "procMount": {
          "type": "string"
        },
        "privileged": {
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "type": "boolean"
        },
        "runAsNonRoot": {
          "type": "boolean"
        },
        "runAsGroup": {
          "type": "integer",
          "format": "int32"
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "capabilities": {
          "$ref": "#/definitions/Capabilities"
        }
      }
    },
    "SecurityStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "settings": {
              "$ref": "#/definitions/ParameterFieldMapStringJsonNode"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputNGVariable"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "privileged": {
              "type": "boolean"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "StageElementConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StageWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "skipInstances": {
          "type": "boolean"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "spec": {
          "$ref": "#/definitions/StageInfoConfig"
        }
      }
    },
    "StageInfoConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StageRollback"]
            }
          }
        }
      ]
    },
    "StageWhenCondition": {
      "type": "object",
      "required": ["pipelineStatus"],
      "properties": {
        "pipelineStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StepElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "type": {
          "type": "string"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "spec": {
          "$ref": "#/definitions/StepSpecType"
        }
      }
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "steps"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        }
      }
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StepGroupRollback"]
            }
          }
        }
      ]
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": ["stageStatus"],
      "properties": {
        "stageStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "$ref": "#/definitions/MatrixConfigInterface"
        },
        "repeat": {
          "$ref": "#/definitions/HarnessForConfig"
        },
        "parallelism": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "StrategyExpansionData": {
      "type": "object",
      "properties": {
        "maxConcurrency": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["String"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["tag"],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": ["templateRef"],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        },
        "templateInputs": {
          "$ref": "#/definitions/JsonNode"
        },
        "templateVariables": {
          "$ref": "#/definitions/JsonNode"
        }
      }
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "UnitTestReport": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["JUnit"]
        },
        "spec": {
          "$ref": "#/definitions/UnitTestReportSpec"
        }
      }
    },
    "UnitTestReportSpec": {
      "type": "object"
    },
    "UploadToArtifactoryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "sourcePath", "target"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "target": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "UploadToGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "sourcePath"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "UploadToS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "region", "sourcePath"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "endpoint": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "stripPrefix": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ParameterFieldListString"
            }
          }
        }
      ]
    },
    "UseFromStageInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["useFromStage"],
          "properties": {
            "useFromStage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VmBuildJobInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "workDir": {
              "type": "string"
            },
            "ciExecutionArgs": {
              "$ref": "#/definitions/CIExecutionArgs"
            },
            "connectorRefs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "stageVars": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "volToMountPath": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "serviceDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependencyElement"
              }
            }
          }
        }
      ]
    },
    "VmInfraSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Pool"]
        }
      }
    },
    "VmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "VM", "KubernetesHosted"]
            },
            "spec": {
              "$ref": "#/definitions/VmInfraSpec"
            }
          }
        }
      ]
    },
    "VmPoolYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/VmInfraSpec"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Pool"]
            },
            "spec": {
              "$ref": "#/definitions/VmPoolYamlSpec"
            }
          }
        }
      ]
    },
    "VmPoolYamlSpec": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "poolName": {
          "type": "string"
        },
        "os": {
          "type": "string",
          "enum": ["Linux", "MacOS", "Windows"]
        },
        "harnessImageConnectorRef": {
          "type": "string"
        },
        "initTimeout": {
          "type": "string"
        }
      }
    },
    "WebhookBaseAttributes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "before": {
          "type": "string"
        },
        "after": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "authorLogin": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "authorAvatar": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "mergeSha": {
          "type": "string"
        }
      }
    },
    "WebhookEvent": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["PR", "BRANCH"]
        }
      }
    },
    "WebhookExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/definitions/WebhookGitUser"
            },
            "webhookEvent": {
              "$ref": "#/definitions/WebhookEvent"
            },
            "triggerName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "WebhookGitUser": {
      "type": "object",
      "properties": {
        "gitId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        }
      }
    },
    "ResponseStepElementConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PartialSchemaDTO": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "nodeType": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "skipStageSchema": {
          "type": "boolean"
        },
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CV", "CF", "CE", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS"]
        }
      }
    },
    "ResponseListPartialSchemaDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartialSchemaDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseYamlSchemaDetailsWrapper": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/YamlSchemaDetailsWrapper"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "YamlGroup": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        }
      }
    },
    "YamlSchemaDetailsWrapper": {
      "type": "object",
      "properties": {
        "yamlSchemaWithDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YamlSchemaWithDetails"
          }
        }
      }
    },
    "YamlSchemaMetadata": {
      "type": "object",
      "required": ["yamlGroup"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "modulesSupported": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["CD", "CI", "CV", "CF", "CE", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS"]
          }
        },
        "featureFlags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "featureRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "yamlGroup": {
          "$ref": "#/definitions/YamlGroup"
        }
      }
    },
    "YamlSchemaWithDetails": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "schemaClassName": {
          "type": "string"
        },
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CV", "CF", "CE", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS"]
        },
        "yamlSchemaMetadata": {
          "$ref": "#/definitions/YamlSchemaMetadata"
        },
        "availableAtOrgLevel": {
          "type": "boolean"
        },
        "availableAtAccountLevel": {
          "type": "boolean"
        },
        "availableAtProjectLevel": {
          "type": "boolean"
        }
      }
    },
    "ResponseJsonNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JsonNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CIBuildAuthor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        }
      }
    },
    "CIBuildBranchHook": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        },
        "triggerCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        }
      }
    },
    "CIBuildCommit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerEmail": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CIBuildPRHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "link": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "sourceRepo": {
          "type": "string"
        },
        "sourceBranch": {
          "type": "string"
        },
        "targetBranch": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        },
        "triggerCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        }
      }
    },
    "CIImageDetails": {
      "type": "object",
      "properties": {
        "imageName": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        }
      }
    },
    "CIInfraDetails": {
      "type": "object",
      "properties": {
        "infraType": {
          "type": "string"
        },
        "infraOSType": {
          "type": "string"
        },
        "infraHostType": {
          "type": "string"
        }
      }
    },
    "CIPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "ciExecutionInfoDTO": {
          "$ref": "#/definitions/CIWebhookInfoDTO"
        },
        "branch": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "triggerRepoName": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "prNumber": {
          "type": "string"
        },
        "buildType": {
          "type": "string"
        },
        "isPrivateRepo": {
          "type": "boolean"
        },
        "scmDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIScmDetails"
          }
        },
        "infraDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIInfraDetails"
          }
        },
        "imageDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIImageDetails"
          }
        },
        "tiBuildDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TIBuildDetails"
          }
        }
      }
    },
    "CIScmDetails": {
      "type": "object",
      "properties": {
        "scmUrl": {
          "type": "string"
        },
        "scmProvider": {
          "type": "string"
        },
        "scmAuthType": {
          "type": "string"
        },
        "scmHostType": {
          "type": "string"
        }
      }
    },
    "CIWebhookInfoDTO": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/CIBuildAuthor"
        },
        "branch": {
          "$ref": "#/definitions/CIBuildBranchHook"
        },
        "pullRequest": {
          "$ref": "#/definitions/CIBuildPRHook"
        }
      }
    },
    "ResponseCIPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CIPipelineModuleInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TIBuildDetails": {
      "type": "object",
      "properties": {
        "buildTool": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    }
  }
}
