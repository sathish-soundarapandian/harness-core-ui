{
  "swagger": "2.0",
  "info": {
    "title": "Harness Security Test Orchestration API",
    "description": "Read and manage Security Test results. This API is in beta and is liable to change until it reaches 1.0.0.",
    "version": "0.1.0-beta"
  },
  "host": "app.harness.io",
  "consumes": ["application/json", "application/xml", "application/gob"],
  "produces": ["application/json", "application/xml", "application/gob"],
  "paths": {
    "/api/usage": {
      "get": {
        "tags": ["Usage"],
        "description": "Report usage\n\n**Required security scopes for jwt**:\n  * `core_account_view`",
        "operationId": "Usage#ReportUsage",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "timestamp", "in": "query", "description": "Timestamp", "required": true, "type": "integer" },
          { "name": "Authorization", "in": "header", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/UsageReportUsageResponseBody",
              "required": ["accountIdentifier", "module", "timestamp", "activeDevelopers", "activeScans"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/UsageReportUsageInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/token": {
      "get": {
        "tags": ["TokenV1"],
        "description": "Issue a cross-service token",
        "operationId": "TokenV1#IssueTokenV1",
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "X-Harness-Token",
            "in": "header",
            "description": "Harness internal shared secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK response.", "schema": { "type": "string" } },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TokenV1IssueTokenV1BadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TokenV1IssueTokenV1UnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TokenV1IssueTokenV1ForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TokenV1IssueTokenV1InternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "X-Harness-Token_header_X-Harness-Token": [] }]
      }
    },
    "/api/v2/exemptions": {
      "get": {
        "tags": ["Exemptions"],
        "description": "List a collection of Exemptions\n\n**Required security scopes for jwt**:\n  * `sto_exemption_view`",
        "operationId": "Exemptions#ListExemptions",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsListExemptionsResponseBody",
              "required": ["results", "pagination"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsListExemptionsBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsListExemptionsUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ExemptionsListExemptionsForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ExemptionsListExemptionsNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsListExemptionsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["Exemptions"],
        "description": "Create a new Exemption\n\n**Required security scopes for jwt**:\n  * `sto_exemption_create`",
        "operationId": "Exemptions#CreateExemption",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "ID of the Harness Organization to which the exemption applies. Cannot be specified alongside \"targetId\".",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Harness Project to which the exemption applies. You must also specify \"orgId\". Cannot be specified alongside \"targetId\".",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "CreateExemptionRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExemptionsCreateExemptionRequestBody",
              "required": ["reason", "requesterId", "issueId", "type", "status", "id", "created", "lastModified"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/ExemptionsCreateExemptionResponseBody", "required": ["id"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsCreateExemptionBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsCreateExemptionUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsCreateExemptionForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsCreateExemptionInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/exemptions/{id}": {
      "get": {
        "tags": ["Exemptions"],
        "description": "Find Exemption by ID\n\n**Required security scopes for jwt**:\n  * `sto_exemption_view`",
        "operationId": "Exemptions#FindExemptionById",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Exemption to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDResponseBody",
              "required": ["id", "issueId", "type", "reason", "requesterId", "status", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsFindExemptionByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "put": {
        "tags": ["Exemptions"],
        "description": "Update an existing Exemption\n\n**Required security scopes for jwt**:\n  * `sto_exemption_create`",
        "operationId": "Exemptions#UpdateExemption",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "ID of the Harness Organization to which the exemption applies. Cannot be specified alongside \"targetId\".",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of the Harness Project to which the exemption applies. You must also specify \"orgId\". Cannot be specified alongside \"targetId\".",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Exemption to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "UpdateExemptionRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionRequestBody",
              "required": ["reason", "requesterId", "issueId", "type", "status", "created", "lastModified"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionResponseBody",
              "required": ["id", "issueId", "type", "reason", "requesterId", "status", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ExemptionsUpdateExemptionNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsUpdateExemptionInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "delete": {
        "tags": ["Exemptions"],
        "description": "Delete an existing Exemption\n\n**Required security scopes for jwt**:\n  * `sto_exemption_create`",
        "operationId": "Exemptions#DeleteExemption",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Exemption to delete",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "No Content response." },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsDeleteExemptionBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsDeleteExemptionUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsDeleteExemptionForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ExemptionsDeleteExemptionNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsDeleteExemptionInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/exemptions/{id}/{action}": {
      "put": {
        "tags": ["Exemptions"],
        "description": "Approve/reject an existing Exemption\n\n**Required security scopes for jwt**:\n  * `sto_exemption_approve`",
        "operationId": "Exemptions#ApproveExemption",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Exemption to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "action",
            "in": "path",
            "description": "The approval action to take on the Exemption",
            "required": true,
            "type": "string",
            "enum": ["approve", "reject"]
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "ApproveExemptionRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionRequestBody",
              "required": [
                "approverId",
                "reason",
                "requesterId",
                "issueId",
                "type",
                "status",
                "created",
                "lastModified"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionResponseBody",
              "required": ["id", "issueId", "type", "reason", "requesterId", "status", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ExemptionsApproveExemptionInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/frontend/issue-counts": {
      "get": {
        "tags": ["Frontend"],
        "description": "Returns counts of active Security Issues for one or more Pipeline Executions\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Frontend#ExecutionIssueCounts",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "executionIds",
            "in": "query",
            "description": "Comma-separated list of Harness Execution IDs for which to count Security Issues",
            "required": true,
            "type": "string",
            "pattern": "[\\dA-Za-z_-]{22}(,[\\dA-Za-z_-]{22})*"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "type": "object", "additionalProperties": { "$ref": "#/definitions/IssueCounts" } }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/FrontendExecutionIssueCountsBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/FrontendExecutionIssueCountsUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/FrontendExecutionIssueCountsForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/FrontendExecutionIssueCountsNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/FrontendExecutionIssueCountsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/frontend/overview": {
      "get": {
        "tags": ["Frontend"],
        "description": "Provides data needed by the Overview page\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Frontend#Overview",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "days",
            "in": "query",
            "description": "Number of days of Baseline Issue counts to return",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 90,
            "minimum": 1
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/FrontendOverviewResponseBody", "required": ["historicalCounts"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/FrontendOverviewBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/FrontendOverviewUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/FrontendOverviewForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/FrontendOverviewInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/frontend/pipeline-security": {
      "get": {
        "tags": ["Frontend"],
        "description": "Provide data needed by the PipelineSecurityView\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Frontend#PipelineSecurity",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": false,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "executionId",
            "in": "query",
            "description": "Harness Execution ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/FrontendPipelineSecurityResponseBody", "required": ["steps"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/FrontendPipelineSecurityBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/FrontendPipelineSecurityUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/FrontendPipelineSecurityForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/FrontendPipelineSecurityNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/FrontendPipelineSecurityInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/frontend/security-review": {
      "get": {
        "tags": ["Frontend"],
        "description": "Provides data needed by the Security Review page\n\n**Required security scopes for jwt**:\n  * `sto_exemption_view`",
        "operationId": "Frontend#SecurityReview",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/FrontendSecurityReviewResponseBody", "required": ["exemptions"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/FrontendSecurityReviewBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/FrontendSecurityReviewUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/FrontendSecurityReviewForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/FrontendSecurityReviewInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/frontend/test-targets": {
      "get": {
        "tags": ["Frontend"],
        "description": "Provides data needed by the Test Targets page\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_view`",
        "operationId": "Frontend#TestTargets",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/FrontendTestTargetsResponseBody", "required": ["targets"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/FrontendTestTargetsBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/FrontendTestTargetsUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/FrontendTestTargetsForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/FrontendTestTargetsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/issues": {
      "get": {
        "tags": ["Issues"],
        "description": "List a collection of Security Issues\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Issues#ListIssues",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/IssuesListIssuesResponseBody", "required": ["results", "pagination"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/IssuesListIssuesBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/IssuesListIssuesUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/IssuesListIssuesForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/IssuesListIssuesNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/IssuesListIssuesInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["Issues"],
        "description": "Create a new Security Issue\n\n**Required security scopes for jwt**:\n  * `sto_issue_edit`",
        "operationId": "Issues#CreateIssue",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "CreateIssueRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssuesCreateIssueRequestBody",
              "required": [
                "title",
                "key",
                "severity",
                "severityCode",
                "productId",
                "details",
                "scanId",
                "keyPattern",
                "id",
                "created"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/IssuesCreateIssueResponseBody", "required": ["id"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/IssuesCreateIssueBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/IssuesCreateIssueUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/IssuesCreateIssueForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/IssuesCreateIssueInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/issues/{id}": {
      "get": {
        "tags": ["Issues"],
        "description": "Find Security Issue by ID\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Issues#FindIssueById",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "targetId",
            "in": "query",
            "description": "Associated Target ID",
            "required": false,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Issue to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/IssuesFindIssueByIDResponseBody",
              "required": ["id", "title", "key", "severity", "severityCode", "productId", "details", "created"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/IssuesFindIssueByIDBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/IssuesFindIssueByIDUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/IssuesFindIssueByIDForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/IssuesFindIssueByIDNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/IssuesFindIssueByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "delete": {
        "tags": ["Issues"],
        "description": "Delete an existing Security Issue\n\n**Required security scopes for jwt**:\n  * `sto_issue_delete`",
        "operationId": "Issues#DeleteIssue",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Issue to delete",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "No Content response." },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/IssuesDeleteIssueBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/IssuesDeleteIssueUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/IssuesDeleteIssueForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/IssuesDeleteIssueNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/IssuesDeleteIssueInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/products": {
      "get": {
        "tags": ["Products"],
        "description": "List a collection of Scan Tools\n\n**Required security scopes for jwt**:\n  * `sto_products_view`",
        "operationId": "Products#ListProducts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          { "name": "name", "in": "query", "description": "Resource name", "required": false, "type": "string" },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ProductsListProductsResponseBody",
              "required": ["results", "pagination"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ProductsListProductsBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ProductsListProductsUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ProductsListProductsForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ProductsListProductsNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ProductsListProductsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/products/{id}": {
      "get": {
        "tags": ["Products"],
        "description": "Find Scan Tool by ID\n\n**Required security scopes for jwt**:\n  * `sto_products_view`",
        "operationId": "Products#FindProductById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Tool to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ProductsFindProductByIDResponseBody",
              "required": ["id", "name", "description", "isEnabled", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ProductsFindProductByIDBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/ProductsFindProductByIDUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ProductsFindProductByIDForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ProductsFindProductByIDNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ProductsFindProductByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/scans": {
      "get": {
        "tags": ["Scans"],
        "description": "List a collection of Security Test Scans\n\n**Required security scopes for jwt**:\n  * `sto_scan_view`",
        "operationId": "Scans#ListScans",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "executionId",
            "in": "query",
            "description": "Harness Execution ID",
            "required": false,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/ScansListScansResponseBody", "required": ["results", "pagination"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansListScansBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansListScansUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansListScansForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansListScansNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": { "$ref": "#/definitions/ScansListScansInternalServerErrorResponseBody", "required": ["message"] }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["Scans"],
        "description": "Create a new Security Test Scan\n\n**Required security scopes for jwt**:\n  * `sto_scan_edit`",
        "operationId": "Scans#CreateScan",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "CreateScanRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScansCreateScanRequestBody",
              "required": [
                "targetVariantId",
                "orgId",
                "projectId",
                "pipelineId",
                "executionId",
                "stageId",
                "stepId",
                "productId",
                "status",
                "refinementVersion",
                "id",
                "created",
                "lastModified"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/ScansCreateScanResponseBody", "required": ["id"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansCreateScanBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansCreateScanUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansCreateScanForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ScansCreateScanInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/scans/{id}": {
      "get": {
        "tags": ["Scans"],
        "description": "Find Security Test Scan by ID\n\n**Required security scopes for jwt**:\n  * `sto_scan_view`",
        "operationId": "Scans#FindScanById",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Test Scan to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ScansFindScanByIDResponseBody",
              "required": [
                "id",
                "targetVariantId",
                "orgId",
                "projectId",
                "pipelineId",
                "executionId",
                "stageId",
                "stepId",
                "productId",
                "status",
                "refinementVersion",
                "created",
                "lastModified"
              ]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansFindScanByIDBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansFindScanByIDUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansFindScanByIDForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansFindScanByIDNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ScansFindScanByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "put": {
        "tags": ["Scans"],
        "description": "Update an existing Security Test Scan\n\n**Required security scopes for jwt**:\n  * `sto_scan_edit`",
        "operationId": "Scans#UpdateScan",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Test Scan to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "UpdateScanRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScansUpdateScanRequestBody",
              "required": [
                "targetVariantId",
                "orgId",
                "projectId",
                "pipelineId",
                "executionId",
                "stageId",
                "stepId",
                "productId",
                "status",
                "refinementVersion",
                "created",
                "lastModified"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ScansUpdateScanResponseBody",
              "required": [
                "id",
                "targetVariantId",
                "orgId",
                "projectId",
                "pipelineId",
                "executionId",
                "stageId",
                "stepId",
                "productId",
                "status",
                "refinementVersion",
                "created",
                "lastModified"
              ]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansUpdateScanBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansUpdateScanUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansUpdateScanForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansUpdateScanNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ScansUpdateScanInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "delete": {
        "tags": ["Scans"],
        "description": "Delete an existing Security Test Scan\n\n**Required security scopes for jwt**:\n  * `sto_scan_delete`",
        "operationId": "Scans#DeleteScan",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Test Scan to delete",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "No Content response." },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansDeleteScanBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansDeleteScanUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansDeleteScanForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansDeleteScanNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ScansDeleteScanInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/scans/{id}/issue/{issueId}": {
      "get": {
        "tags": ["Scans"],
        "description": "Returns a scan specific issue\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Scans#ScanIssue",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Test Scan",
            "required": true,
            "type": "string"
          },
          {
            "name": "issueId",
            "in": "path",
            "description": "The ID of the Security Test Issue",
            "required": true,
            "type": "string"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ScansScanIssueResponseBody",
              "required": ["id", "title", "key", "severity", "severityCode", "productId", "details", "created"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueInternalServerErrorResponseBody", "required": ["message"] }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/scans/{id}/issues/counts": {
      "get": {
        "tags": ["Scans"],
        "description": "Returns counts of active Security Issues for a Security Test Scan\n\n**Required security scopes for jwt**:\n  * `sto_issue_view`",
        "operationId": "Scans#ScanIssueCounts",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Security Test Scan for which to count issues",
            "required": true,
            "type": "string"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/ScansScanIssueCountsResponseBody",
              "required": [
                "critical",
                "newCritical",
                "high",
                "newHigh",
                "medium",
                "newMedium",
                "low",
                "newLow",
                "info",
                "newInfo",
                "unassigned",
                "newUnassigned",
                "ignored"
              ]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueCountsBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueCountsUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueCountsForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/ScansScanIssueCountsNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/ScansScanIssueCountsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/system/health": {
      "get": {
        "tags": ["System"],
        "description": "Check service health",
        "operationId": "System#health",
        "responses": {
          "204": { "description": "Service is healthy." },
          "500": {
            "description": "Internal Server Error response.",
            "schema": { "$ref": "#/definitions/SystemHealthInternalServerErrorResponseBody", "required": ["message"] }
          }
        },
        "schemes": ["https"]
      }
    },
    "/api/v2/system/version": {
      "get": {
        "tags": ["System"],
        "description": "Get service version",
        "operationId": "System#version",
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/SystemVersionResponseBody", "required": ["version", "commit"] }
          }
        },
        "schemes": ["https"]
      }
    },
    "/api/v2/targets": {
      "get": {
        "tags": ["Targets"],
        "description": "List a collection of Scan Targets\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_view`",
        "operationId": "Targets#ListTargets",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          { "name": "name", "in": "query", "description": "Resource name", "required": false, "type": "string" },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/TargetsListTargetsResponseBody", "required": ["results", "pagination"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsListTargetsBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsListTargetsUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsListTargetsForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/TargetsListTargetsNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsListTargetsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["Targets"],
        "description": "Create a new Scan Target\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_edit`",
        "operationId": "Targets#CreateTarget",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "CreateTargetRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetsCreateTargetRequestBody",
              "required": ["id", "created", "lastModified", "name", "type"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/TargetsCreateTargetResponseBody", "required": ["id"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsCreateTargetBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsCreateTargetUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsCreateTargetForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsCreateTargetInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/targets/{id}": {
      "get": {
        "tags": ["Targets"],
        "description": "Find Scan Target by ID\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_view`",
        "operationId": "Targets#FindTargetById",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetsFindTargetByIDResponseBody",
              "required": ["id", "name", "type", "orgId", "projectId", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsFindTargetByIDBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsFindTargetByIDUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsFindTargetByIDForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/TargetsFindTargetByIDNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsFindTargetByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "put": {
        "tags": ["Targets"],
        "description": "Update an existing Scan Target\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_edit`",
        "operationId": "Targets#UpdateTarget",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "UpdateTargetRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetsUpdateTargetRequestBody",
              "required": ["created", "lastModified", "name", "type"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetsUpdateTargetResponseBody",
              "required": ["id", "name", "type", "orgId", "projectId", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsUpdateTargetBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsUpdateTargetUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsUpdateTargetForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/TargetsUpdateTargetNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsUpdateTargetInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "delete": {
        "tags": ["Targets"],
        "description": "Delete an existing Scan Target\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_delete`",
        "operationId": "Targets#DeleteTarget",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target to delete",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "No Content response." },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsDeleteTargetBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsDeleteTargetUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsDeleteTargetForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/TargetsDeleteTargetNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsDeleteTargetInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "patch": {
        "tags": ["Targets"],
        "description": "Update only certain fields on an existing Scan Target\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_edit`",
        "operationId": "Targets#PatchTarget",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "orgId",
            "in": "query",
            "description": "Harness Organization ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Harness Project ID",
            "required": true,
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "PatchTargetRequestBody",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/TargetsPatchTargetRequestBody" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetsPatchTargetResponseBody",
              "required": ["id", "name", "type", "orgId", "projectId", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TargetsPatchTargetBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TargetsPatchTargetUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TargetsPatchTargetForbiddenResponseBody", "required": ["message"] }
          },
          "404": {
            "description": "Not Found response.",
            "schema": { "$ref": "#/definitions/TargetsPatchTargetNotFoundResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetsPatchTargetInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/targets/{targetId}/variants": {
      "get": {
        "tags": ["Target Variants"],
        "description": "List a collection of Scan Target Variants\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_view`",
        "operationId": "Target Variants#ListTargetVariants",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch (starting from 0)",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "minimum": 1
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "Associated Target ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsResponseBody",
              "required": ["results", "pagination"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsListTargetVariantsInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["Target Variants"],
        "description": "Create a new Scan Target Variant\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_edit`",
        "operationId": "Target Variants#CreateTargetVariant",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "Associated Target ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "CreateTargetVariantRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetVariantsCreateTargetVariantRequestBody",
              "required": ["parameters", "id", "created", "lastModified"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/TargetVariantsCreateTargetVariantResponseBody", "required": ["id"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsCreateTargetVariantBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsCreateTargetVariantUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsCreateTargetVariantForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsCreateTargetVariantInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/targets/{targetId}/variants/{id}": {
      "get": {
        "tags": ["Target Variants"],
        "description": "Find Scan Target Variant by ID\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_view`",
        "operationId": "Target Variants#FindTargetVariantById",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "Associated Target ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target Variant to retrieve",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDResponseBody",
              "required": ["id", "targetId", "parameters", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsFindTargetVariantByIDInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "put": {
        "tags": ["Target Variants"],
        "description": "Update an existing Scan Target Variant\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_edit`",
        "operationId": "Target Variants#UpdateTargetVariant",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "Associated Target ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target Variant to update",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" },
          {
            "name": "UpdateTargetVariantRequestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantRequestBody",
              "required": ["parameters", "created", "lastModified"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantResponseBody",
              "required": ["id", "targetId", "parameters", "created", "lastModified"]
            }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsUpdateTargetVariantInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "delete": {
        "tags": ["Target Variants"],
        "description": "Delete an existing Scan Target Variant\n\n**Required security scopes for jwt**:\n  * `sto_testtarget_delete`",
        "operationId": "Target Variants#DeleteTargetVariant",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "Associated Target ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Scan Target Variant to delete",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          { "name": "Authorization", "in": "header", "description": "Auth token", "required": true, "type": "string" }
        ],
        "responses": {
          "204": { "description": "No Content response." },
          "400": {
            "description": "Bad Request response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsDeleteTargetVariantBadRequestResponseBody",
              "required": ["message"]
            }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsDeleteTargetVariantUnauthorizedResponseBody",
              "required": ["message"]
            }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsDeleteTargetVariantForbiddenResponseBody",
              "required": ["message"]
            }
          },
          "404": {
            "description": "Not Found response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsDeleteTargetVariantNotFoundResponseBody",
              "required": ["message"]
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TargetVariantsDeleteTargetVariantInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v2/token": {
      "get": {
        "tags": ["Token"],
        "description": "Issue a cross-service token",
        "operationId": "Token#IssueToken",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Harness Account ID",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{22}$"
          },
          {
            "name": "X-Harness-Token",
            "in": "header",
            "description": "Harness internal shared secret",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "schema": { "$ref": "#/definitions/TokenIssueTokenResponseBody", "required": ["token"] }
          },
          "400": {
            "description": "Bad Request response.",
            "schema": { "$ref": "#/definitions/TokenIssueTokenBadRequestResponseBody", "required": ["message"] }
          },
          "401": {
            "description": "Unauthorized response.",
            "schema": { "$ref": "#/definitions/TokenIssueTokenUnauthorizedResponseBody", "required": ["message"] }
          },
          "403": {
            "description": "Forbidden response.",
            "schema": { "$ref": "#/definitions/TokenIssueTokenForbiddenResponseBody", "required": ["message"] }
          },
          "500": {
            "description": "Internal Server Error response.",
            "schema": {
              "$ref": "#/definitions/TokenIssueTokenInternalServerErrorResponseBody",
              "required": ["message"]
            }
          }
        },
        "schemes": ["https"],
        "security": [{ "X-Harness-Token_header_X-Harness-Token": [] }]
      }
    }
  },
  "definitions": {
    "ExemptionResponseBody": {
      "title": "ExemptionResponseBody",
      "type": "object",
      "properties": {
        "approverId": {
          "type": "string",
          "description": "User ID the user who approved or rejected this exemptions",
          "example": "user111111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "expiration": {
          "type": "integer",
          "description": "Unix timestamp at which this Exemption will expire",
          "example": 1651578240,
          "format": "int64"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "issueId": {
          "type": "string",
          "description": "Issue ID associated with the Exemption",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "link": {
          "type": "string",
          "description": "Link to a related ticket",
          "example": "https://example.com/ABC-1234",
          "maxLength": 1024
        },
        "orgId": {
          "type": "string",
          "description": "ID of the Harness Organization to which the exemption applies. Cannot be specified alongside \"targetId\".",
          "example": "your_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "pipelineId": {
          "type": "string",
          "description": "ID of the Harness Pipeline to which the exemption applies. You must also specify \"projectId\" and \"orgId\". Cannot be specified alongside \"targetId\".",
          "example": "your_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "projectId": {
          "type": "string",
          "description": "ID of the Harness Project to which the exemption applies. You must also specify \"orgId\". Cannot be specified alongside \"targetId\".",
          "example": "your_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "reason": {
          "type": "string",
          "description": "Text describing why this Exemption is necessary",
          "example": "Waiting on upstream bug fix",
          "maxLength": 1024
        },
        "requesterId": {
          "type": "string",
          "description": "User ID of user who requested this exemptions",
          "example": "user111111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "status": {
          "type": "string",
          "description": "Approval status of Exemption",
          "default": "Pending",
          "example": "Expired",
          "enum": ["Pending", "Approved", "Rejected", "Expired"]
        },
        "targetId": {
          "type": "string",
          "description": "ID of the Target to which the exemption applies. Cannot be specified alongside \"projectId\" or \"pipelineId\".",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "type": {
          "type": "string",
          "description": "Type of Exemption (Ignored / False Positive)",
          "example": "Ignored",
          "enum": ["Ignored", "False Positive"]
        }
      },
      "description": "Information about an Exemption",
      "example": {
        "approverId": "user111111111111111111",
        "created": 1651578240,
        "expiration": 1651578240,
        "id": "abcdef1234567890ghijkl",
        "issueId": "abcdef1234567890ghijkl",
        "lastModified": 1651578240,
        "link": "https://example.com/ABC-1234",
        "orgId": "your_project",
        "pipelineId": "your_pipeline",
        "projectId": "your_project",
        "reason": "Waiting on upstream bug fix",
        "requesterId": "user111111111111111111",
        "status": "Expired",
        "targetId": "abcdef1234567890ghijkl",
        "type": "Ignored"
      },
      "required": ["reason", "requesterId", "issueId", "type", "status", "id", "created", "lastModified"]
    },
    "ExemptionsApproveExemptionBadRequestResponseBody": {
      "title": "ExemptionsApproveExemptionBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsApproveExemptionForbiddenResponseBody": {
      "title": "ExemptionsApproveExemptionForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsApproveExemptionInternalServerErrorResponseBody": {
      "title": "ExemptionsApproveExemptionInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsApproveExemptionNotFoundResponseBody": {
      "title": "ExemptionsApproveExemptionNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ExemptionsApproveExemptionRequestBody": {
      "title": "ExemptionsApproveExemptionRequestBody",
      "type": "object",
      "properties": {
        "approverId": {
          "type": "string",
          "description": "User ID the user who approved or rejected this exemptions",
          "example": "user111111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "example": { "approverId": "user111111111111111111" },
      "required": ["approverId", "reason", "requesterId", "issueId", "type", "status", "created", "lastModified"]
    },
    "ExemptionsApproveExemptionResponseBody": {
      "title": "ExemptionsApproveExemptionResponseBody",
      "$ref": "#/definitions/ExemptionResponseBody"
    },
    "ExemptionsApproveExemptionUnauthorizedResponseBody": {
      "title": "ExemptionsApproveExemptionUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ExemptionsCreateExemptionBadRequestResponseBody": {
      "title": "ExemptionsCreateExemptionBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsCreateExemptionForbiddenResponseBody": {
      "title": "ExemptionsCreateExemptionForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsCreateExemptionInternalServerErrorResponseBody": {
      "title": "ExemptionsCreateExemptionInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsCreateExemptionRequestBody": {
      "title": "ExemptionsCreateExemptionRequestBody",
      "type": "object",
      "properties": {
        "expiration": {
          "type": "integer",
          "description": "Unix timestamp at which this Exemption will expire",
          "example": 1651578240,
          "format": "int64"
        },
        "issueId": {
          "type": "string",
          "description": "Issue ID associated with the Exemption",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "link": {
          "type": "string",
          "description": "Link to a related ticket",
          "example": "https://example.com/ABC-1234",
          "maxLength": 1024
        },
        "pipelineId": {
          "type": "string",
          "description": "ID of the Harness Pipeline to which the exemption applies. You must also specify \"projectId\" and \"orgId\". Cannot be specified alongside \"targetId\".",
          "example": "your_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "reason": {
          "type": "string",
          "description": "Text describing why this Exemption is necessary",
          "example": "Waiting on upstream bug fix",
          "maxLength": 1024
        },
        "requesterId": {
          "type": "string",
          "description": "User ID of user who requested this exemptions",
          "example": "user111111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "targetId": {
          "type": "string",
          "description": "ID of the Target to which the exemption applies. Cannot be specified alongside \"projectId\" or \"pipelineId\".",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "type": {
          "type": "string",
          "description": "Type of Exemption (Ignored / False Positive)",
          "example": "Ignored",
          "enum": ["Ignored", "False Positive"]
        }
      },
      "example": {
        "expiration": 1651578240,
        "issueId": "abcdef1234567890ghijkl",
        "link": "https://example.com/ABC-1234",
        "pipelineId": "your_pipeline",
        "reason": "Waiting on upstream bug fix",
        "requesterId": "user111111111111111111",
        "targetId": "abcdef1234567890ghijkl",
        "type": "Ignored"
      },
      "required": ["reason", "requesterId", "issueId", "type", "status", "id", "created", "lastModified"]
    },
    "ExemptionsCreateExemptionResponseBody": {
      "title": "ExemptionsCreateExemptionResponseBody",
      "$ref": "#/definitions/IdResultResponseBody"
    },
    "ExemptionsCreateExemptionUnauthorizedResponseBody": {
      "title": "ExemptionsCreateExemptionUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ExemptionsDeleteExemptionBadRequestResponseBody": {
      "title": "ExemptionsDeleteExemptionBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsDeleteExemptionForbiddenResponseBody": {
      "title": "ExemptionsDeleteExemptionForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsDeleteExemptionInternalServerErrorResponseBody": {
      "title": "ExemptionsDeleteExemptionInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsDeleteExemptionNotFoundResponseBody": {
      "title": "ExemptionsDeleteExemptionNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ExemptionsDeleteExemptionUnauthorizedResponseBody": {
      "title": "ExemptionsDeleteExemptionUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ExemptionsFindExemptionByIDBadRequestResponseBody": {
      "title": "ExemptionsFindExemptionByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsFindExemptionByIDForbiddenResponseBody": {
      "title": "ExemptionsFindExemptionByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsFindExemptionByIDInternalServerErrorResponseBody": {
      "title": "ExemptionsFindExemptionByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsFindExemptionByIDNotFoundResponseBody": {
      "title": "ExemptionsFindExemptionByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ExemptionsFindExemptionByIDResponseBody": {
      "title": "ExemptionsFindExemptionByIDResponseBody",
      "$ref": "#/definitions/ExemptionResponseBody"
    },
    "ExemptionsFindExemptionByIDUnauthorizedResponseBody": {
      "title": "ExemptionsFindExemptionByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ExemptionsListExemptionsBadRequestResponseBody": {
      "title": "ExemptionsListExemptionsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsListExemptionsForbiddenResponseBody": {
      "title": "ExemptionsListExemptionsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsListExemptionsInternalServerErrorResponseBody": {
      "title": "ExemptionsListExemptionsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsListExemptionsNotFoundResponseBody": {
      "title": "ExemptionsListExemptionsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ExemptionsListExemptionsResponseBody": {
      "title": "ExemptionsListExemptionsResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExemptionResponseBody" },
          "example": [
            {
              "approverId": "user111111111111111111",
              "created": 1651578240,
              "expiration": 1651578240,
              "id": "abcdef1234567890ghijkl",
              "issueId": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "link": "https://example.com/ABC-1234",
              "orgId": "your_project",
              "pipelineId": "your_pipeline",
              "projectId": "your_project",
              "reason": "Waiting on upstream bug fix",
              "requesterId": "user111111111111111111",
              "status": "Approved",
              "targetId": "abcdef1234567890ghijkl",
              "type": "Ignored"
            },
            {
              "approverId": "user111111111111111111",
              "created": 1651578240,
              "expiration": 1651578240,
              "id": "abcdef1234567890ghijkl",
              "issueId": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "link": "https://example.com/ABC-1234",
              "orgId": "your_project",
              "pipelineId": "your_pipeline",
              "projectId": "your_project",
              "reason": "Waiting on upstream bug fix",
              "requesterId": "user111111111111111111",
              "status": "Approved",
              "targetId": "abcdef1234567890ghijkl",
              "type": "Ignored"
            },
            {
              "approverId": "user111111111111111111",
              "created": 1651578240,
              "expiration": 1651578240,
              "id": "abcdef1234567890ghijkl",
              "issueId": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "link": "https://example.com/ABC-1234",
              "orgId": "your_project",
              "pipelineId": "your_pipeline",
              "projectId": "your_project",
              "reason": "Waiting on upstream bug fix",
              "requesterId": "user111111111111111111",
              "status": "Approved",
              "targetId": "abcdef1234567890ghijkl",
              "type": "Ignored"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "link": "https://example.com/ABC-1234",
            "orgId": "your_project",
            "pipelineId": "your_pipeline",
            "projectId": "your_project",
            "reason": "Waiting on upstream bug fix",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "abcdef1234567890ghijkl",
            "type": "Ignored"
          },
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "link": "https://example.com/ABC-1234",
            "orgId": "your_project",
            "pipelineId": "your_pipeline",
            "projectId": "your_project",
            "reason": "Waiting on upstream bug fix",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "abcdef1234567890ghijkl",
            "type": "Ignored"
          },
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "link": "https://example.com/ABC-1234",
            "orgId": "your_project",
            "pipelineId": "your_pipeline",
            "projectId": "your_project",
            "reason": "Waiting on upstream bug fix",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "abcdef1234567890ghijkl",
            "type": "Ignored"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "ExemptionsListExemptionsUnauthorizedResponseBody": {
      "title": "ExemptionsListExemptionsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ExemptionsUpdateExemptionBadRequestResponseBody": {
      "title": "ExemptionsUpdateExemptionBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ExemptionsUpdateExemptionForbiddenResponseBody": {
      "title": "ExemptionsUpdateExemptionForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ExemptionsUpdateExemptionInternalServerErrorResponseBody": {
      "title": "ExemptionsUpdateExemptionInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ExemptionsUpdateExemptionNotFoundResponseBody": {
      "title": "ExemptionsUpdateExemptionNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ExemptionsUpdateExemptionRequestBody": {
      "title": "ExemptionsUpdateExemptionRequestBody",
      "type": "object",
      "properties": {
        "expiration": {
          "type": "integer",
          "description": "Unix timestamp at which this Exemption will expire",
          "example": 1651578240,
          "format": "int64"
        },
        "link": {
          "type": "string",
          "description": "Link to a related ticket",
          "example": "https://example.com/ABC-1234",
          "maxLength": 1024
        },
        "pipelineId": {
          "type": "string",
          "description": "ID of the Harness Pipeline to which the exemption applies. You must also specify \"projectId\" and \"orgId\". Cannot be specified alongside \"targetId\".",
          "example": "your_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "reason": {
          "type": "string",
          "description": "Text describing why this Exemption is necessary",
          "example": "Waiting on upstream bug fix",
          "maxLength": 1024
        },
        "requesterId": {
          "type": "string",
          "description": "User ID of user who requested this exemptions",
          "example": "user111111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "targetId": {
          "type": "string",
          "description": "ID of the Target to which the exemption applies. Cannot be specified alongside \"projectId\" or \"pipelineId\".",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "example": {
        "expiration": 1651578240,
        "link": "https://example.com/ABC-1234",
        "pipelineId": "your_pipeline",
        "reason": "Waiting on upstream bug fix",
        "requesterId": "user111111111111111111",
        "targetId": "abcdef1234567890ghijkl"
      },
      "required": ["reason", "requesterId", "issueId", "type", "status", "created", "lastModified"]
    },
    "ExemptionsUpdateExemptionResponseBody": {
      "title": "ExemptionsUpdateExemptionResponseBody",
      "$ref": "#/definitions/ExemptionResponseBody"
    },
    "ExemptionsUpdateExemptionUnauthorizedResponseBody": {
      "title": "ExemptionsUpdateExemptionUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "FrontendExecutionIssueCountsBadRequestResponseBody": {
      "title": "FrontendExecutionIssueCountsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "FrontendExecutionIssueCountsForbiddenResponseBody": {
      "title": "FrontendExecutionIssueCountsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "FrontendExecutionIssueCountsInternalServerErrorResponseBody": {
      "title": "FrontendExecutionIssueCountsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "FrontendExecutionIssueCountsNotFoundResponseBody": {
      "title": "FrontendExecutionIssueCountsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "FrontendExecutionIssueCountsUnauthorizedResponseBody": {
      "title": "FrontendExecutionIssueCountsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "FrontendExemptionResponseBody": {
      "title": "FrontendExemptionResponseBody",
      "type": "object",
      "properties": {
        "approverId": {
          "type": "string",
          "description": "User ID of the user who approved this exemption",
          "example": "user111111111111111111"
        },
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "expiration": {
          "type": "integer",
          "description": "Unix timestamp at which this Exemption will expire",
          "example": 1651578240,
          "format": "int64"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "issueId": { "type": "string", "description": "ID of exempted issue", "example": "2222222222222222222222" },
        "issueName": { "type": "string", "description": "Name of issue", "example": "foo library has a vulnerability" },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "orgId": {
          "type": "string",
          "description": "Harness ID of project to which this exemption applies",
          "example": "STO"
        },
        "pipelineId": {
          "type": "string",
          "description": "Harness ID of pipeline to which this exemption applies",
          "example": "pipeline_1"
        },
        "projectId": {
          "type": "string",
          "description": "Harness ID of project to which this exemption applies",
          "example": "STO"
        },
        "reason": { "type": "string", "description": "Reason for exemption", "example": "Upstream bug" },
        "requesterId": {
          "type": "string",
          "description": "User ID of the user who requested this exemption",
          "example": "user111111111111111111"
        },
        "status": { "type": "string", "description": "Status of exemption", "example": "Approved" },
        "targetId": {
          "type": "string",
          "description": "ID of Target to which this exemption applies",
          "example": "target2222222222222222"
        },
        "type": { "type": "string", "description": "Type of exemption", "example": "Ignored" }
      },
      "description": "Individual FrontendExemption",
      "example": {
        "approverId": "user111111111111111111",
        "created": 1651578240,
        "expiration": 1651578240,
        "id": "abcdef1234567890ghijkl",
        "issueId": "2222222222222222222222",
        "issueName": "foo library has a vulnerability",
        "lastModified": 1651578240,
        "orgId": "STO",
        "pipelineId": "pipeline_1",
        "projectId": "STO",
        "reason": "Upstream bug",
        "requesterId": "user111111111111111111",
        "status": "Approved",
        "targetId": "target2222222222222222",
        "type": "Ignored"
      },
      "required": ["id", "issueId", "issueName", "status", "reason", "created", "type", "lastModified", "requesterId"]
    },
    "FrontendOverviewBadRequestResponseBody": {
      "title": "FrontendOverviewBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "FrontendOverviewForbiddenResponseBody": {
      "title": "FrontendOverviewForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "FrontendOverviewInternalServerErrorResponseBody": {
      "title": "FrontendOverviewInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "FrontendOverviewResponseBody": {
      "title": "FrontendOverviewResponseBody",
      "$ref": "#/definitions/OverviewResultResponseBody"
    },
    "FrontendOverviewUnauthorizedResponseBody": {
      "title": "FrontendOverviewUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "FrontendPipelineSecurityBadRequestResponseBody": {
      "title": "FrontendPipelineSecurityBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "FrontendPipelineSecurityForbiddenResponseBody": {
      "title": "FrontendPipelineSecurityForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "FrontendPipelineSecurityInternalServerErrorResponseBody": {
      "title": "FrontendPipelineSecurityInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "FrontendPipelineSecurityNotFoundResponseBody": {
      "title": "FrontendPipelineSecurityNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "FrontendPipelineSecurityResponseBody": {
      "title": "FrontendPipelineSecurityResponseBody",
      "$ref": "#/definitions/PipelineSecurityResultResponseBody"
    },
    "FrontendPipelineSecurityUnauthorizedResponseBody": {
      "title": "FrontendPipelineSecurityUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "FrontendSecurityReviewBadRequestResponseBody": {
      "title": "FrontendSecurityReviewBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "FrontendSecurityReviewForbiddenResponseBody": {
      "title": "FrontendSecurityReviewForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "FrontendSecurityReviewInternalServerErrorResponseBody": {
      "title": "FrontendSecurityReviewInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "FrontendSecurityReviewResponseBody": {
      "title": "FrontendSecurityReviewResponseBody",
      "$ref": "#/definitions/SecurityReviewResultResponseBody"
    },
    "FrontendSecurityReviewUnauthorizedResponseBody": {
      "title": "FrontendSecurityReviewUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "FrontendTestTargetsBadRequestResponseBody": {
      "title": "FrontendTestTargetsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "FrontendTestTargetsForbiddenResponseBody": {
      "title": "FrontendTestTargetsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "FrontendTestTargetsInternalServerErrorResponseBody": {
      "title": "FrontendTestTargetsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "FrontendTestTargetsResponseBody": {
      "title": "FrontendTestTargetsResponseBody",
      "$ref": "#/definitions/TestTargetResultResponseBody"
    },
    "FrontendTestTargetsUnauthorizedResponseBody": {
      "title": "FrontendTestTargetsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "HistoricalIssueCountsResponseBody": {
      "title": "HistoricalIssueCountsResponseBody",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "True if at least one baseline was scanned on this date",
          "example": false
        },
        "counts": { "$ref": "#/definitions/IssueCountsResponseBody" },
        "date": { "type": "integer", "example": 1651578240, "format": "int64" }
      },
      "example": {
        "active": true,
        "counts": {
          "critical": 1,
          "high": 3,
          "ignored": 1,
          "info": 11,
          "low": 39,
          "medium": 17,
          "newCritical": 1,
          "newHigh": 3,
          "newInfo": 11,
          "newLow": 39,
          "newMedium": 17,
          "newUnassigned": 0,
          "unassigned": 0
        },
        "date": 1651578240
      },
      "required": ["date", "counts", "active"]
    },
    "IdResultResponseBody": {
      "title": "IdResultResponseBody",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "example": { "id": "abcdef1234567890ghijkl" },
      "required": ["id"]
    },
    "IssueCounts": {
      "title": "IssueCounts",
      "type": "object",
      "properties": {
        "critical": {
          "type": "integer",
          "description": "The number of Critical-severity Issues",
          "example": 1,
          "format": "int32"
        },
        "high": {
          "type": "integer",
          "description": "The number of High-severity Issues",
          "example": 3,
          "format": "int32"
        },
        "ignored": {
          "type": "integer",
          "description": "The number of Issues ignored due to Exemptions, and therefore not included in other counts",
          "example": 1,
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "description": "The number of Informational Issues",
          "example": 11,
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "description": "The number of Low-severity Issues",
          "example": 39,
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "description": "The number of Medium-severity Issues",
          "example": 17,
          "format": "int32"
        },
        "newCritical": {
          "type": "integer",
          "description": "The number of new Critical-severity Issues",
          "example": 1,
          "format": "int32"
        },
        "newHigh": {
          "type": "integer",
          "description": "The number of new High-severity Issues",
          "example": 3,
          "format": "int32"
        },
        "newInfo": {
          "type": "integer",
          "description": "The number of new Informational Issues",
          "example": 11,
          "format": "int32"
        },
        "newLow": {
          "type": "integer",
          "description": "The number of new Low-severity Issues",
          "example": 39,
          "format": "int32"
        },
        "newMedium": {
          "type": "integer",
          "description": "The number of new Medium-severity Issues",
          "example": 17,
          "format": "int32"
        },
        "newUnassigned": {
          "type": "integer",
          "description": "The number of new Issues with no associated severity code",
          "example": 0,
          "format": "int32"
        },
        "unassigned": {
          "type": "integer",
          "description": "The number of Issues with no associated severity code",
          "example": 0,
          "format": "int32"
        }
      },
      "description": "The count of Security Issues, by severity code, for a given Harness Pipeline Execution",
      "example": {
        "critical": 1,
        "high": 3,
        "ignored": 1,
        "info": 11,
        "low": 39,
        "medium": 17,
        "newCritical": 1,
        "newHigh": 3,
        "newInfo": 11,
        "newLow": 39,
        "newMedium": 17,
        "newUnassigned": 0,
        "unassigned": 0
      },
      "required": [
        "critical",
        "newCritical",
        "high",
        "newHigh",
        "medium",
        "newMedium",
        "low",
        "newLow",
        "info",
        "newInfo",
        "unassigned",
        "newUnassigned",
        "ignored"
      ]
    },
    "IssueCountsResponseBody": {
      "title": "IssueCountsResponseBody",
      "type": "object",
      "properties": {
        "critical": {
          "type": "integer",
          "description": "The number of Critical-severity Issues",
          "example": 1,
          "format": "int32"
        },
        "high": {
          "type": "integer",
          "description": "The number of High-severity Issues",
          "example": 3,
          "format": "int32"
        },
        "ignored": {
          "type": "integer",
          "description": "The number of Issues ignored due to Exemptions, and therefore not included in other counts",
          "example": 1,
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "description": "The number of Informational Issues",
          "example": 11,
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "description": "The number of Low-severity Issues",
          "example": 39,
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "description": "The number of Medium-severity Issues",
          "example": 17,
          "format": "int32"
        },
        "newCritical": {
          "type": "integer",
          "description": "The number of new Critical-severity Issues",
          "example": 1,
          "format": "int32"
        },
        "newHigh": {
          "type": "integer",
          "description": "The number of new High-severity Issues",
          "example": 3,
          "format": "int32"
        },
        "newInfo": {
          "type": "integer",
          "description": "The number of new Informational Issues",
          "example": 11,
          "format": "int32"
        },
        "newLow": {
          "type": "integer",
          "description": "The number of new Low-severity Issues",
          "example": 39,
          "format": "int32"
        },
        "newMedium": {
          "type": "integer",
          "description": "The number of new Medium-severity Issues",
          "example": 17,
          "format": "int32"
        },
        "newUnassigned": {
          "type": "integer",
          "description": "The number of new Issues with no associated severity code",
          "example": 0,
          "format": "int32"
        },
        "unassigned": {
          "type": "integer",
          "description": "The number of Issues with no associated severity code",
          "example": 0,
          "format": "int32"
        }
      },
      "description": "The count of Security Issues, by severity code, for a given Harness Pipeline Execution",
      "example": {
        "critical": 1,
        "high": 3,
        "ignored": 1,
        "info": 11,
        "low": 39,
        "medium": 17,
        "newCritical": 1,
        "newHigh": 3,
        "newInfo": 11,
        "newLow": 39,
        "newMedium": 17,
        "newUnassigned": 0,
        "unassigned": 0
      },
      "required": [
        "critical",
        "newCritical",
        "high",
        "newHigh",
        "medium",
        "newMedium",
        "low",
        "newLow",
        "info",
        "newInfo",
        "unassigned",
        "newUnassigned",
        "ignored"
      ]
    },
    "IssueResponseBody": {
      "title": "IssueResponseBody",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "details": {
          "type": "string",
          "description": "Issue details common to all occurrences",
          "example": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}"
        },
        "exemptionId": {
          "type": "string",
          "description": "ID of the associated Exemption",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "isNew": {
          "type": "boolean",
          "description": "Indicates if the Security Issue was found to be new, relative to the baseline",
          "example": true
        },
        "key": {
          "type": "string",
          "description": "Compression/deduplication key",
          "example": "json-schema@0.2.3",
          "maxLength": 512
        },
        "occurrences": {
          "type": "string",
          "description": "Array of details unique to each occurrence",
          "example": "[{\"line\": \"42\"}, {\"line\": \"666\"}]"
        },
        "productId": {
          "type": "string",
          "description": "The scan tool that identified this Security Issue",
          "example": "product1234567890abcde",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "severity": {
          "type": "number",
          "description": "Numeric severity, from 0 (lowest) to 10 (highest)",
          "example": 8.5,
          "format": "float"
        },
        "severityCode": {
          "type": "string",
          "description": "Severity code",
          "example": "High",
          "enum": ["Critical", "High", "Medium", "Low", "Info", "Unassigned"]
        },
        "status": {
          "type": "string",
          "description": "Indicates if the Security Issue was found to be remediated, ignored, etc.",
          "example": "Remediated",
          "enum": ["Remediated", "Ignored", "False Positive"]
        },
        "title": {
          "type": "string",
          "description": "Title of the Security Issue",
          "example": "json-schema@0.2.3 is vulnerable to Prototype Pollution",
          "maxLength": 128
        }
      },
      "description": "Information about a Security Issue",
      "example": {
        "created": 1651578240,
        "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
        "exemptionId": "abcdef1234567890ghijkl",
        "id": "abcdef1234567890ghijkl",
        "isNew": true,
        "key": "json-schema@0.2.3",
        "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
        "productId": "product1234567890abcde",
        "severity": 8.5,
        "severityCode": "High",
        "status": "Remediated",
        "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
      },
      "required": ["title", "key", "severity", "severityCode", "productId", "details", "id", "created"]
    },
    "IssueSummaryResponseBody": {
      "title": "IssueSummaryResponseBody",
      "type": "object",
      "properties": {
        "exemptionId": {
          "type": "string",
          "description": "ID of the associated Exemption",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "isNew": {
          "type": "boolean",
          "description": "Indicates if the Security Issue was found to be new, relative to the baseline",
          "example": true
        },
        "key": {
          "type": "string",
          "description": "Compression/deduplication key",
          "example": "json-schema@0.2.3",
          "maxLength": 512
        },
        "severity": {
          "type": "number",
          "description": "Numeric severity, from 0 (lowest) to 10 (highest)",
          "example": 8.5,
          "format": "float"
        },
        "severityCode": {
          "type": "string",
          "description": "Severity code",
          "example": "High",
          "enum": ["Critical", "High", "Medium", "Low", "Info", "Unassigned"]
        },
        "status": {
          "type": "string",
          "description": "Indicates if the Security Issue was found to be remediated, ignored, etc.",
          "example": "Remediated",
          "enum": ["Remediated", "Ignored", "False Positive"]
        },
        "title": {
          "type": "string",
          "description": "Title of the Security Issue",
          "example": "json-schema@0.2.3 is vulnerable to Prototype Pollution",
          "maxLength": 128
        }
      },
      "description": "Short summary of an Issue",
      "example": {
        "exemptionId": "abcdef1234567890ghijkl",
        "id": "abcdef1234567890ghijkl",
        "isNew": true,
        "key": "json-schema@0.2.3",
        "severity": 8.5,
        "severityCode": "High",
        "status": "Remediated",
        "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
      },
      "required": ["title", "key", "severity", "severityCode", "id"]
    },
    "IssuesCreateIssueBadRequestResponseBody": {
      "title": "IssuesCreateIssueBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "IssuesCreateIssueForbiddenResponseBody": {
      "title": "IssuesCreateIssueForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "IssuesCreateIssueInternalServerErrorResponseBody": {
      "title": "IssuesCreateIssueInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "IssuesCreateIssueRequestBody": {
      "title": "IssuesCreateIssueRequestBody",
      "type": "object",
      "properties": {
        "details": {
          "type": "object",
          "description": "Issue details common to all occurrences",
          "example": { "package": "json-schema", "version": "v0.2.3" },
          "additionalProperties": true
        },
        "exemptionId": {
          "type": "string",
          "description": "ID of the associated Exemption",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "key": {
          "type": "string",
          "description": "Compression/deduplication key",
          "example": "json-schema@0.2.3",
          "maxLength": 512
        },
        "keyPattern": {
          "type": "array",
          "items": { "type": "string", "example": "Rerum dolorem voluptate quia vel." },
          "description": "The pattern of fields used to generate this Security Issue's Key",
          "example": ["library_name", "library_version"]
        },
        "occurrences": {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "Aut enim quas beatae est consectetur.": "Cupiditate itaque et nulla nesciunt.",
              "Dignissimos fugiat rerum nihil.": "Ad aspernatur.",
              "Rerum aut laboriosam sunt est incidunt ut.": "Ut est ab itaque dolor error ullam."
            },
            "additionalProperties": true
          },
          "description": "Array of details unique to each occurrence",
          "example": [{ "line": "42" }, { "line": "666" }]
        },
        "productId": {
          "type": "string",
          "description": "The scan tool that identified this Security Issue",
          "example": "product1234567890abcde",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "scanId": {
          "type": "string",
          "description": "The Security Scan execution that detected this Security Issue",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "severity": {
          "type": "number",
          "description": "Numeric severity, from 0 (lowest) to 10 (highest)",
          "example": 8.5,
          "format": "float"
        },
        "severityCode": {
          "type": "string",
          "description": "Severity code",
          "example": "High",
          "enum": ["Critical", "High", "Medium", "Low", "Info", "Unassigned"]
        },
        "title": {
          "type": "string",
          "description": "Title of the Security Issue",
          "example": "json-schema@0.2.3 is vulnerable to Prototype Pollution",
          "maxLength": 128
        }
      },
      "example": {
        "details": { "package": "json-schema", "version": "v0.2.3" },
        "exemptionId": "abcdef1234567890ghijkl",
        "key": "json-schema@0.2.3",
        "keyPattern": ["library_name", "library_version"],
        "occurrences": [{ "line": "42" }, { "line": "666" }],
        "productId": "product1234567890abcde",
        "scanId": "abcdef1234567890ghijkl",
        "severity": 8.5,
        "severityCode": "High",
        "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
      },
      "required": [
        "title",
        "key",
        "severity",
        "severityCode",
        "productId",
        "details",
        "scanId",
        "keyPattern",
        "id",
        "created"
      ]
    },
    "IssuesCreateIssueResponseBody": {
      "title": "IssuesCreateIssueResponseBody",
      "$ref": "#/definitions/IdResultResponseBody"
    },
    "IssuesCreateIssueUnauthorizedResponseBody": {
      "title": "IssuesCreateIssueUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "IssuesDeleteIssueBadRequestResponseBody": {
      "title": "IssuesDeleteIssueBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "IssuesDeleteIssueForbiddenResponseBody": {
      "title": "IssuesDeleteIssueForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "IssuesDeleteIssueInternalServerErrorResponseBody": {
      "title": "IssuesDeleteIssueInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "IssuesDeleteIssueNotFoundResponseBody": {
      "title": "IssuesDeleteIssueNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "IssuesDeleteIssueUnauthorizedResponseBody": {
      "title": "IssuesDeleteIssueUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "IssuesFindIssueByIDBadRequestResponseBody": {
      "title": "IssuesFindIssueByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "IssuesFindIssueByIDForbiddenResponseBody": {
      "title": "IssuesFindIssueByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "IssuesFindIssueByIDInternalServerErrorResponseBody": {
      "title": "IssuesFindIssueByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "IssuesFindIssueByIDNotFoundResponseBody": {
      "title": "IssuesFindIssueByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "IssuesFindIssueByIDResponseBody": {
      "title": "IssuesFindIssueByIDResponseBody",
      "$ref": "#/definitions/IssueResponseBody"
    },
    "IssuesFindIssueByIDUnauthorizedResponseBody": {
      "title": "IssuesFindIssueByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "IssuesListIssuesBadRequestResponseBody": {
      "title": "IssuesListIssuesBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "IssuesListIssuesForbiddenResponseBody": {
      "title": "IssuesListIssuesForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "IssuesListIssuesInternalServerErrorResponseBody": {
      "title": "IssuesListIssuesInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "IssuesListIssuesNotFoundResponseBody": {
      "title": "IssuesListIssuesNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "IssuesListIssuesResponseBody": {
      "title": "IssuesListIssuesResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/IssueResponseBody" },
          "example": [
            {
              "created": 1651578240,
              "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
              "exemptionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "isNew": true,
              "key": "json-schema@0.2.3",
              "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
              "productId": "product1234567890abcde",
              "severity": 8.5,
              "severityCode": "High",
              "status": "Remediated",
              "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
            },
            {
              "created": 1651578240,
              "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
              "exemptionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "isNew": true,
              "key": "json-schema@0.2.3",
              "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
              "productId": "product1234567890abcde",
              "severity": 8.5,
              "severityCode": "High",
              "status": "Remediated",
              "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
            },
            {
              "created": 1651578240,
              "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
              "exemptionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "isNew": true,
              "key": "json-schema@0.2.3",
              "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
              "productId": "product1234567890abcde",
              "severity": 8.5,
              "severityCode": "High",
              "status": "Remediated",
              "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "created": 1651578240,
            "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
            "exemptionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "isNew": true,
            "key": "json-schema@0.2.3",
            "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
            "productId": "product1234567890abcde",
            "severity": 8.5,
            "severityCode": "High",
            "status": "Remediated",
            "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
          },
          {
            "created": 1651578240,
            "details": "{\"package\": \"json-schema\", \"version\": \"v0.2.3\"}",
            "exemptionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "isNew": true,
            "key": "json-schema@0.2.3",
            "occurrences": "[{\"line\": \"42\"}, {\"line\": \"666\"}]",
            "productId": "product1234567890abcde",
            "severity": 8.5,
            "severityCode": "High",
            "status": "Remediated",
            "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "IssuesListIssuesUnauthorizedResponseBody": {
      "title": "IssuesListIssuesUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "OverviewResultResponseBody": {
      "title": "OverviewResultResponseBody",
      "type": "object",
      "properties": {
        "baselineExecutions": {
          "type": "array",
          "items": { "type": "string", "example": "Soluta non vel minus et vero." },
          "description": "Harness Execution IDs of the most recent baseline scans",
          "example": [
            "Rem deleniti dolor dolores perferendis.",
            "Dolor modi cupiditate enim possimus quaerat ut.",
            "Vel et blanditiis dolor sint omnis sed.",
            "Aut sunt eos corrupti aspernatur."
          ]
        },
        "historicalCounts": {
          "type": "array",
          "items": { "$ref": "#/definitions/HistoricalIssueCountsResponseBody" },
          "description": "Counts of active issues on baselines for each of the past several days",
          "example": [
            {
              "active": true,
              "counts": {
                "critical": 1,
                "high": 3,
                "ignored": 1,
                "info": 11,
                "low": 39,
                "medium": 17,
                "newCritical": 1,
                "newHigh": 3,
                "newInfo": 11,
                "newLow": 39,
                "newMedium": 17,
                "newUnassigned": 0,
                "unassigned": 0
              },
              "date": 1651578240
            },
            {
              "active": true,
              "counts": {
                "critical": 1,
                "high": 3,
                "ignored": 1,
                "info": 11,
                "low": 39,
                "medium": 17,
                "newCritical": 1,
                "newHigh": 3,
                "newInfo": 11,
                "newLow": 39,
                "newMedium": 17,
                "newUnassigned": 0,
                "unassigned": 0
              },
              "date": 1651578240
            },
            {
              "active": true,
              "counts": {
                "critical": 1,
                "high": 3,
                "ignored": 1,
                "info": 11,
                "low": 39,
                "medium": 17,
                "newCritical": 1,
                "newHigh": 3,
                "newInfo": 11,
                "newLow": 39,
                "newMedium": 17,
                "newUnassigned": 0,
                "unassigned": 0
              },
              "date": 1651578240
            },
            {
              "active": true,
              "counts": {
                "critical": 1,
                "high": 3,
                "ignored": 1,
                "info": 11,
                "low": 39,
                "medium": 17,
                "newCritical": 1,
                "newHigh": 3,
                "newInfo": 11,
                "newLow": 39,
                "newMedium": 17,
                "newUnassigned": 0,
                "unassigned": 0
              },
              "date": 1651578240
            }
          ]
        }
      },
      "description": "Overview information",
      "example": {
        "baselineExecutions": ["Quis itaque asperiores pariatur.", "Quia quibusdam in."],
        "historicalCounts": [
          {
            "active": true,
            "counts": {
              "critical": 1,
              "high": 3,
              "ignored": 1,
              "info": 11,
              "low": 39,
              "medium": 17,
              "newCritical": 1,
              "newHigh": 3,
              "newInfo": 11,
              "newLow": 39,
              "newMedium": 17,
              "newUnassigned": 0,
              "unassigned": 0
            },
            "date": 1651578240
          },
          {
            "active": true,
            "counts": {
              "critical": 1,
              "high": 3,
              "ignored": 1,
              "info": 11,
              "low": 39,
              "medium": 17,
              "newCritical": 1,
              "newHigh": 3,
              "newInfo": 11,
              "newLow": 39,
              "newMedium": 17,
              "newUnassigned": 0,
              "unassigned": 0
            },
            "date": 1651578240
          },
          {
            "active": true,
            "counts": {
              "critical": 1,
              "high": 3,
              "ignored": 1,
              "info": 11,
              "low": 39,
              "medium": 17,
              "newCritical": 1,
              "newHigh": 3,
              "newInfo": 11,
              "newLow": 39,
              "newMedium": 17,
              "newUnassigned": 0,
              "unassigned": 0
            },
            "date": 1651578240
          }
        ]
      },
      "required": ["historicalCounts"]
    },
    "PaginationResponseBody": {
      "title": "PaginationResponseBody",
      "type": "object",
      "properties": {
        "link": { "type": "string", "description": "Link-based paging", "example": "" },
        "page": { "type": "integer", "description": "Page number (starting from 0)", "example": 4, "format": "int64" },
        "pageSize": { "type": "integer", "description": "Requested page size", "example": 20, "format": "int64" },
        "totalItems": {
          "type": "integer",
          "description": "Total results available",
          "example": 230,
          "format": "int64"
        },
        "totalPages": { "type": "integer", "description": "Total pages available", "example": 12, "format": "int64" }
      },
      "example": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
      "required": ["page", "pageSize", "totalPages", "totalItems"]
    },
    "PipelineSecurityResultResponseBody": {
      "title": "PipelineSecurityResultResponseBody",
      "type": "object",
      "properties": {
        "steps": {
          "type": "object",
          "description": "Issues diffed against baseline targets, grouped by Stage and Step ID",
          "example": {
            "stage_id.step_id": {
              "baseline": "branch: main",
              "issues": [
                {
                  "exemptionId": "abcdef1234567890ghijkl",
                  "id": "abcdef1234567890ghijkl",
                  "isNew": true,
                  "key": "json-schema@0.2.3",
                  "severity": 8.5,
                  "severityCode": "High",
                  "status": "Remediated",
                  "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
                },
                {
                  "exemptionId": "abcdef1234567890ghijkl",
                  "id": "abcdef1234567890ghijkl",
                  "isNew": true,
                  "key": "json-schema@0.2.3",
                  "severity": 8.5,
                  "severityCode": "High",
                  "status": "Remediated",
                  "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
                }
              ],
              "scanId": "scan111111111111111111",
              "scanTool": "owasp",
              "target": "branch: feature"
            }
          },
          "additionalProperties": { "$ref": "#/definitions/StepInfoResponseBody" }
        }
      },
      "description": "Data needed by the PipelineSecurityView",
      "example": {
        "steps": {
          "stage_id.step_id": {
            "baseline": "branch: main",
            "issues": [
              {
                "exemptionId": "abcdef1234567890ghijkl",
                "id": "abcdef1234567890ghijkl",
                "isNew": true,
                "key": "json-schema@0.2.3",
                "severity": 8.5,
                "severityCode": "High",
                "status": "Remediated",
                "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
              },
              {
                "exemptionId": "abcdef1234567890ghijkl",
                "id": "abcdef1234567890ghijkl",
                "isNew": true,
                "key": "json-schema@0.2.3",
                "severity": 8.5,
                "severityCode": "High",
                "status": "Remediated",
                "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
              }
            ],
            "scanId": "scan111111111111111111",
            "scanTool": "owasp",
            "target": "branch: feature"
          }
        }
      },
      "required": ["steps"]
    },
    "ProductResponseBody": {
      "title": "ProductResponseBody",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "description": {
          "type": "string",
          "description": "Scan Tool's description",
          "example": "OWASP 5.x SCA scanner"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "'true' if this Scan Tool is enabled for use",
          "example": true
        },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "name": { "type": "string", "description": "Name of the Scan Tool", "example": "owasp" }
      },
      "description": "Information about a Scan Tool",
      "example": {
        "created": 1651578240,
        "description": "OWASP 5.x SCA scanner",
        "id": "abcdef1234567890ghijkl",
        "isEnabled": true,
        "lastModified": 1651578240,
        "name": "owasp"
      },
      "required": ["name", "description", "isEnabled", "id", "created", "lastModified"]
    },
    "ProductsFindProductByIDBadRequestResponseBody": {
      "title": "ProductsFindProductByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ProductsFindProductByIDForbiddenResponseBody": {
      "title": "ProductsFindProductByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ProductsFindProductByIDInternalServerErrorResponseBody": {
      "title": "ProductsFindProductByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ProductsFindProductByIDNotFoundResponseBody": {
      "title": "ProductsFindProductByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ProductsFindProductByIDResponseBody": {
      "title": "ProductsFindProductByIDResponseBody",
      "$ref": "#/definitions/ProductResponseBody"
    },
    "ProductsFindProductByIDUnauthorizedResponseBody": {
      "title": "ProductsFindProductByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ProductsListProductsBadRequestResponseBody": {
      "title": "ProductsListProductsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ProductsListProductsForbiddenResponseBody": {
      "title": "ProductsListProductsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ProductsListProductsInternalServerErrorResponseBody": {
      "title": "ProductsListProductsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ProductsListProductsNotFoundResponseBody": {
      "title": "ProductsListProductsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ProductsListProductsResponseBody": {
      "title": "ProductsListProductsResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProductResponseBody" },
          "example": [
            {
              "created": 1651578240,
              "description": "OWASP 5.x SCA scanner",
              "id": "abcdef1234567890ghijkl",
              "isEnabled": true,
              "lastModified": 1651578240,
              "name": "owasp"
            },
            {
              "created": 1651578240,
              "description": "OWASP 5.x SCA scanner",
              "id": "abcdef1234567890ghijkl",
              "isEnabled": true,
              "lastModified": 1651578240,
              "name": "owasp"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "created": 1651578240,
            "description": "OWASP 5.x SCA scanner",
            "id": "abcdef1234567890ghijkl",
            "isEnabled": true,
            "lastModified": 1651578240,
            "name": "owasp"
          },
          {
            "created": 1651578240,
            "description": "OWASP 5.x SCA scanner",
            "id": "abcdef1234567890ghijkl",
            "isEnabled": true,
            "lastModified": 1651578240,
            "name": "owasp"
          },
          {
            "created": 1651578240,
            "description": "OWASP 5.x SCA scanner",
            "id": "abcdef1234567890ghijkl",
            "isEnabled": true,
            "lastModified": 1651578240,
            "name": "owasp"
          },
          {
            "created": 1651578240,
            "description": "OWASP 5.x SCA scanner",
            "id": "abcdef1234567890ghijkl",
            "isEnabled": true,
            "lastModified": 1651578240,
            "name": "owasp"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "ProductsListProductsUnauthorizedResponseBody": {
      "title": "ProductsListProductsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScanResponseBody": {
      "title": "ScanResponseBody",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "executionId": {
          "type": "string",
          "description": "Pipeline Execution ID associated with the Scan",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "orgId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_org",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "pipelineId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "productId": {
          "type": "string",
          "description": "The Scan Product used for the Scan",
          "example": "product111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "projectId": {
          "type": "string",
          "description": "Harness Project ID",
          "example": "your_harness_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "refinementVersion": {
          "type": "string",
          "description": "The Issue refinement version used for this Scan",
          "example": "1.0.5"
        },
        "stageId": {
          "type": "string",
          "description": "Pipeline Stage ID associated with the Scan",
          "example": "stage_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "status": {
          "type": "string",
          "description": "Current status of the Scan",
          "example": "Succeeded",
          "enum": ["Pending", "Running", "Succeeded", "Failed"]
        },
        "stepId": {
          "type": "string",
          "description": "Pipeline Step ID associated with the Scan",
          "example": "step_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "targetVariantId": {
          "type": "string",
          "description": "The Target Variant associated with the Scan",
          "example": "variant111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "description": "Information about a Security Test Scan",
      "example": {
        "created": 1651578240,
        "executionId": "abcdef1234567890ghijkl",
        "id": "abcdef1234567890ghijkl",
        "lastModified": 1651578240,
        "orgId": "your_harness_org",
        "pipelineId": "your_harness_pipeline",
        "productId": "product111111111111111",
        "projectId": "your_harness_project",
        "refinementVersion": "1.0.5",
        "stageId": "stage_id",
        "status": "Succeeded",
        "stepId": "step_id",
        "targetVariantId": "variant111111111111111"
      },
      "required": [
        "targetVariantId",
        "orgId",
        "projectId",
        "pipelineId",
        "executionId",
        "stageId",
        "stepId",
        "productId",
        "status",
        "refinementVersion",
        "id",
        "created",
        "lastModified"
      ]
    },
    "ScansCreateScanBadRequestResponseBody": {
      "title": "ScansCreateScanBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansCreateScanForbiddenResponseBody": {
      "title": "ScansCreateScanForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansCreateScanInternalServerErrorResponseBody": {
      "title": "ScansCreateScanInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansCreateScanRequestBody": {
      "title": "ScansCreateScanRequestBody",
      "type": "object",
      "properties": {
        "executionId": {
          "type": "string",
          "description": "Pipeline Execution ID associated with the Scan",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "orgId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_org",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "pipelineId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "productId": {
          "type": "string",
          "description": "The Scan Product used for the Scan",
          "example": "product111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "projectId": {
          "type": "string",
          "description": "Harness Project ID",
          "example": "your_harness_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "refinementVersion": {
          "type": "string",
          "description": "The Issue refinement version used for this Scan",
          "example": "1.0.5"
        },
        "stageId": {
          "type": "string",
          "description": "Pipeline Stage ID associated with the Scan",
          "example": "stage_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "status": {
          "type": "string",
          "description": "Current status of the Scan",
          "example": "Succeeded",
          "enum": ["Pending", "Running", "Succeeded", "Failed"]
        },
        "stepId": {
          "type": "string",
          "description": "Pipeline Step ID associated with the Scan",
          "example": "step_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "targetVariantId": {
          "type": "string",
          "description": "The Target Variant associated with the Scan",
          "example": "variant111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "example": {
        "executionId": "abcdef1234567890ghijkl",
        "orgId": "your_harness_org",
        "pipelineId": "your_harness_pipeline",
        "productId": "product111111111111111",
        "projectId": "your_harness_project",
        "refinementVersion": "1.0.5",
        "stageId": "stage_id",
        "status": "Succeeded",
        "stepId": "step_id",
        "targetVariantId": "variant111111111111111"
      },
      "required": [
        "targetVariantId",
        "orgId",
        "projectId",
        "pipelineId",
        "executionId",
        "stageId",
        "stepId",
        "productId",
        "status",
        "refinementVersion",
        "id",
        "created",
        "lastModified"
      ]
    },
    "ScansCreateScanResponseBody": {
      "title": "ScansCreateScanResponseBody",
      "$ref": "#/definitions/IdResultResponseBody"
    },
    "ScansCreateScanUnauthorizedResponseBody": {
      "title": "ScansCreateScanUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansDeleteScanBadRequestResponseBody": {
      "title": "ScansDeleteScanBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansDeleteScanForbiddenResponseBody": {
      "title": "ScansDeleteScanForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansDeleteScanInternalServerErrorResponseBody": {
      "title": "ScansDeleteScanInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansDeleteScanNotFoundResponseBody": {
      "title": "ScansDeleteScanNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansDeleteScanUnauthorizedResponseBody": {
      "title": "ScansDeleteScanUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansFindScanByIDBadRequestResponseBody": {
      "title": "ScansFindScanByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansFindScanByIDForbiddenResponseBody": {
      "title": "ScansFindScanByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansFindScanByIDInternalServerErrorResponseBody": {
      "title": "ScansFindScanByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansFindScanByIDNotFoundResponseBody": {
      "title": "ScansFindScanByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansFindScanByIDResponseBody": {
      "title": "ScansFindScanByIDResponseBody",
      "$ref": "#/definitions/ScanResponseBody"
    },
    "ScansFindScanByIDUnauthorizedResponseBody": {
      "title": "ScansFindScanByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansListScansBadRequestResponseBody": {
      "title": "ScansListScansBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansListScansForbiddenResponseBody": {
      "title": "ScansListScansForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansListScansInternalServerErrorResponseBody": {
      "title": "ScansListScansInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansListScansNotFoundResponseBody": {
      "title": "ScansListScansNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansListScansResponseBody": {
      "title": "ScansListScansResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/ScanResponseBody" },
          "example": [
            {
              "created": 1651578240,
              "executionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "orgId": "your_harness_org",
              "pipelineId": "your_harness_pipeline",
              "productId": "product111111111111111",
              "projectId": "your_harness_project",
              "refinementVersion": "1.0.5",
              "stageId": "stage_id",
              "status": "Succeeded",
              "stepId": "step_id",
              "targetVariantId": "variant111111111111111"
            },
            {
              "created": 1651578240,
              "executionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "orgId": "your_harness_org",
              "pipelineId": "your_harness_pipeline",
              "productId": "product111111111111111",
              "projectId": "your_harness_project",
              "refinementVersion": "1.0.5",
              "stageId": "stage_id",
              "status": "Succeeded",
              "stepId": "step_id",
              "targetVariantId": "variant111111111111111"
            },
            {
              "created": 1651578240,
              "executionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "orgId": "your_harness_org",
              "pipelineId": "your_harness_pipeline",
              "productId": "product111111111111111",
              "projectId": "your_harness_project",
              "refinementVersion": "1.0.5",
              "stageId": "stage_id",
              "status": "Succeeded",
              "stepId": "step_id",
              "targetVariantId": "variant111111111111111"
            },
            {
              "created": 1651578240,
              "executionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "orgId": "your_harness_org",
              "pipelineId": "your_harness_pipeline",
              "productId": "product111111111111111",
              "projectId": "your_harness_project",
              "refinementVersion": "1.0.5",
              "stageId": "stage_id",
              "status": "Succeeded",
              "stepId": "step_id",
              "targetVariantId": "variant111111111111111"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "created": 1651578240,
            "executionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "orgId": "your_harness_org",
            "pipelineId": "your_harness_pipeline",
            "productId": "product111111111111111",
            "projectId": "your_harness_project",
            "refinementVersion": "1.0.5",
            "stageId": "stage_id",
            "status": "Succeeded",
            "stepId": "step_id",
            "targetVariantId": "variant111111111111111"
          },
          {
            "created": 1651578240,
            "executionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "orgId": "your_harness_org",
            "pipelineId": "your_harness_pipeline",
            "productId": "product111111111111111",
            "projectId": "your_harness_project",
            "refinementVersion": "1.0.5",
            "stageId": "stage_id",
            "status": "Succeeded",
            "stepId": "step_id",
            "targetVariantId": "variant111111111111111"
          },
          {
            "created": 1651578240,
            "executionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "orgId": "your_harness_org",
            "pipelineId": "your_harness_pipeline",
            "productId": "product111111111111111",
            "projectId": "your_harness_project",
            "refinementVersion": "1.0.5",
            "stageId": "stage_id",
            "status": "Succeeded",
            "stepId": "step_id",
            "targetVariantId": "variant111111111111111"
          },
          {
            "created": 1651578240,
            "executionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "orgId": "your_harness_org",
            "pipelineId": "your_harness_pipeline",
            "productId": "product111111111111111",
            "projectId": "your_harness_project",
            "refinementVersion": "1.0.5",
            "stageId": "stage_id",
            "status": "Succeeded",
            "stepId": "step_id",
            "targetVariantId": "variant111111111111111"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "ScansListScansUnauthorizedResponseBody": {
      "title": "ScansListScansUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansScanIssueBadRequestResponseBody": {
      "title": "ScansScanIssueBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansScanIssueCountsBadRequestResponseBody": {
      "title": "ScansScanIssueCountsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansScanIssueCountsForbiddenResponseBody": {
      "title": "ScansScanIssueCountsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansScanIssueCountsInternalServerErrorResponseBody": {
      "title": "ScansScanIssueCountsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansScanIssueCountsNotFoundResponseBody": {
      "title": "ScansScanIssueCountsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansScanIssueCountsResponseBody": {
      "title": "ScansScanIssueCountsResponseBody",
      "$ref": "#/definitions/IssueCountsResponseBody"
    },
    "ScansScanIssueCountsUnauthorizedResponseBody": {
      "title": "ScansScanIssueCountsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansScanIssueForbiddenResponseBody": {
      "title": "ScansScanIssueForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansScanIssueInternalServerErrorResponseBody": {
      "title": "ScansScanIssueInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansScanIssueNotFoundResponseBody": {
      "title": "ScansScanIssueNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansScanIssueResponseBody": { "title": "ScansScanIssueResponseBody", "$ref": "#/definitions/IssueResponseBody" },
    "ScansScanIssueUnauthorizedResponseBody": {
      "title": "ScansScanIssueUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "ScansUpdateScanBadRequestResponseBody": {
      "title": "ScansUpdateScanBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "ScansUpdateScanForbiddenResponseBody": {
      "title": "ScansUpdateScanForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "ScansUpdateScanInternalServerErrorResponseBody": {
      "title": "ScansUpdateScanInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "ScansUpdateScanNotFoundResponseBody": {
      "title": "ScansUpdateScanNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "ScansUpdateScanRequestBody": {
      "title": "ScansUpdateScanRequestBody",
      "type": "object",
      "properties": {
        "executionId": {
          "type": "string",
          "description": "Pipeline Execution ID associated with the Scan",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "orgId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_org",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "pipelineId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "your_harness_pipeline",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "productId": {
          "type": "string",
          "description": "The Scan Product used for the Scan",
          "example": "product111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "projectId": {
          "type": "string",
          "description": "Harness Project ID",
          "example": "your_harness_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "refinementVersion": {
          "type": "string",
          "description": "The Issue refinement version used for this Scan",
          "example": "1.0.5"
        },
        "stageId": {
          "type": "string",
          "description": "Pipeline Stage ID associated with the Scan",
          "example": "stage_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "status": {
          "type": "string",
          "description": "Current status of the Scan",
          "example": "Succeeded",
          "enum": ["Pending", "Running", "Succeeded", "Failed"]
        },
        "stepId": {
          "type": "string",
          "description": "Pipeline Step ID associated with the Scan",
          "example": "step_id",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "targetVariantId": {
          "type": "string",
          "description": "The Target Variant associated with the Scan",
          "example": "variant111111111111111",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "example": {
        "executionId": "abcdef1234567890ghijkl",
        "orgId": "your_harness_org",
        "pipelineId": "your_harness_pipeline",
        "productId": "product111111111111111",
        "projectId": "your_harness_project",
        "refinementVersion": "1.0.5",
        "stageId": "stage_id",
        "status": "Succeeded",
        "stepId": "step_id",
        "targetVariantId": "variant111111111111111"
      },
      "required": [
        "targetVariantId",
        "orgId",
        "projectId",
        "pipelineId",
        "executionId",
        "stageId",
        "stepId",
        "productId",
        "status",
        "refinementVersion",
        "created",
        "lastModified"
      ]
    },
    "ScansUpdateScanResponseBody": { "title": "ScansUpdateScanResponseBody", "$ref": "#/definitions/ScanResponseBody" },
    "ScansUpdateScanUnauthorizedResponseBody": {
      "title": "ScansUpdateScanUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "SecurityReviewResultResponseBody": {
      "title": "SecurityReviewResultResponseBody",
      "type": "object",
      "properties": {
        "exemptions": {
          "type": "array",
          "items": { "$ref": "#/definitions/FrontendExemptionResponseBody" },
          "description": "Security Review data",
          "example": [
            {
              "approverId": "user111111111111111111",
              "created": 1651578240,
              "expiration": 1651578240,
              "id": "abcdef1234567890ghijkl",
              "issueId": "2222222222222222222222",
              "issueName": "foo library has a vulnerability",
              "lastModified": 1651578240,
              "orgId": "STO",
              "pipelineId": "pipeline_1",
              "projectId": "STO",
              "reason": "Upstream bug",
              "requesterId": "user111111111111111111",
              "status": "Approved",
              "targetId": "target2222222222222222",
              "type": "Ignored"
            },
            {
              "approverId": "user111111111111111111",
              "created": 1651578240,
              "expiration": 1651578240,
              "id": "abcdef1234567890ghijkl",
              "issueId": "2222222222222222222222",
              "issueName": "foo library has a vulnerability",
              "lastModified": 1651578240,
              "orgId": "STO",
              "pipelineId": "pipeline_1",
              "projectId": "STO",
              "reason": "Upstream bug",
              "requesterId": "user111111111111111111",
              "status": "Approved",
              "targetId": "target2222222222222222",
              "type": "Ignored"
            }
          ]
        }
      },
      "description": "Data needed by the Security Review page",
      "example": {
        "exemptions": [
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "2222222222222222222222",
            "issueName": "foo library has a vulnerability",
            "lastModified": 1651578240,
            "orgId": "STO",
            "pipelineId": "pipeline_1",
            "projectId": "STO",
            "reason": "Upstream bug",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "target2222222222222222",
            "type": "Ignored"
          },
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "2222222222222222222222",
            "issueName": "foo library has a vulnerability",
            "lastModified": 1651578240,
            "orgId": "STO",
            "pipelineId": "pipeline_1",
            "projectId": "STO",
            "reason": "Upstream bug",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "target2222222222222222",
            "type": "Ignored"
          },
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "2222222222222222222222",
            "issueName": "foo library has a vulnerability",
            "lastModified": 1651578240,
            "orgId": "STO",
            "pipelineId": "pipeline_1",
            "projectId": "STO",
            "reason": "Upstream bug",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "target2222222222222222",
            "type": "Ignored"
          },
          {
            "approverId": "user111111111111111111",
            "created": 1651578240,
            "expiration": 1651578240,
            "id": "abcdef1234567890ghijkl",
            "issueId": "2222222222222222222222",
            "issueName": "foo library has a vulnerability",
            "lastModified": 1651578240,
            "orgId": "STO",
            "pipelineId": "pipeline_1",
            "projectId": "STO",
            "reason": "Upstream bug",
            "requesterId": "user111111111111111111",
            "status": "Approved",
            "targetId": "target2222222222222222",
            "type": "Ignored"
          }
        ]
      },
      "required": ["exemptions"]
    },
    "StepInfoResponseBody": {
      "title": "StepInfoResponseBody",
      "type": "object",
      "properties": {
        "baseline": {
          "type": "string",
          "description": "A short description of the baseline target for the scan diff",
          "example": "branch: main"
        },
        "issues": {
          "type": "array",
          "items": { "$ref": "#/definitions/IssueSummaryResponseBody" },
          "description": "Diff-ed Issues related to this scan step, resulting from a diff between the target and baseline",
          "example": [
            {
              "exemptionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "isNew": true,
              "key": "json-schema@0.2.3",
              "severity": 8.5,
              "severityCode": "High",
              "status": "Remediated",
              "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
            },
            {
              "exemptionId": "abcdef1234567890ghijkl",
              "id": "abcdef1234567890ghijkl",
              "isNew": true,
              "key": "json-schema@0.2.3",
              "severity": 8.5,
              "severityCode": "High",
              "status": "Remediated",
              "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
            }
          ]
        },
        "scanId": { "type": "string", "description": "Scan id", "example": "scan111111111111111111" },
        "scanTool": {
          "type": "string",
          "description": "Product name of the scan tool used in this step",
          "example": "owasp"
        },
        "target": {
          "type": "string",
          "description": "A short description of the target of the scan",
          "example": "branch: feature"
        }
      },
      "description": "Information about a Scan Step",
      "example": {
        "baseline": "branch: main",
        "issues": [
          {
            "exemptionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "isNew": true,
            "key": "json-schema@0.2.3",
            "severity": 8.5,
            "severityCode": "High",
            "status": "Remediated",
            "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
          },
          {
            "exemptionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "isNew": true,
            "key": "json-schema@0.2.3",
            "severity": 8.5,
            "severityCode": "High",
            "status": "Remediated",
            "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
          },
          {
            "exemptionId": "abcdef1234567890ghijkl",
            "id": "abcdef1234567890ghijkl",
            "isNew": true,
            "key": "json-schema@0.2.3",
            "severity": 8.5,
            "severityCode": "High",
            "status": "Remediated",
            "title": "json-schema@0.2.3 is vulnerable to Prototype Pollution"
          }
        ],
        "scanId": "scan111111111111111111",
        "scanTool": "owasp",
        "target": "branch: feature"
      },
      "required": ["issues", "scanId", "scanTool"]
    },
    "SystemHealthInternalServerErrorResponseBody": {
      "title": "SystemHealthInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "SystemVersionResponseBody": {
      "title": "SystemVersionResponseBody",
      "type": "object",
      "properties": {
        "commit": {
          "type": "string",
          "description": "Build identifier",
          "example": "96381692bf3a2bd7904769c6886e832435768b57"
        },
        "version": { "type": "string", "description": "Version number", "example": "v0.123.0" }
      },
      "example": { "commit": "96381692bf3a2bd7904769c6886e832435768b57", "version": "v0.123.0" },
      "required": ["version", "commit"]
    },
    "TargetResponseBody": {
      "title": "TargetResponseBody",
      "type": "object",
      "properties": {
        "baselineVariantId": {
          "type": "string",
          "description": "ID of baseline Target Variant for Issue comparison",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^([a-zA-Z0-9_-]{22}|)$"
        },
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "directory": {
          "type": "string",
          "description": "Directory within the Scan Target to be scanned",
          "example": "app/src",
          "maxLength": 1024
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "name": { "type": "string", "description": "Name of the Scan Target", "example": "NodeGoat", "maxLength": 128 },
        "orgId": {
          "type": "string",
          "description": "Harness Organization ID",
          "example": "example_org",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "projectId": {
          "type": "string",
          "description": "Harness Project ID",
          "example": "example_project",
          "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
          "maxLength": 128
        },
        "type": {
          "type": "string",
          "description": "Scan Target's type",
          "example": "repository",
          "enum": ["container", "repository", "instance", "configuration"]
        },
        "url": {
          "type": "string",
          "description": "URL used to access the Scan Target",
          "example": "https://github.com/example/repo",
          "maxLength": 1024
        }
      },
      "example": {
        "baselineVariantId": "abcdef1234567890ghijkl",
        "created": 1651578240,
        "directory": "app/src",
        "id": "abcdef1234567890ghijkl",
        "lastModified": 1651578240,
        "name": "NodeGoat",
        "orgId": "example_org",
        "projectId": "example_project",
        "type": "repository",
        "url": "https://github.com/example/repo"
      },
      "required": ["id", "created", "lastModified", "name", "type", "orgId", "projectId"]
    },
    "TargetVariantResponseBody": {
      "title": "TargetVariantResponseBody",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was created",
          "example": 1651578240,
          "format": "int64"
        },
        "hash": {
          "type": "string",
          "description": "Git Commit or Container Image hash",
          "example": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
          "maxLength": 64
        },
        "id": {
          "type": "string",
          "description": "Resource identifier",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        },
        "lastModified": {
          "type": "integer",
          "description": "Unix timestamp at which the resource was most recently modified",
          "example": 1651578240,
          "format": "int64"
        },
        "parameters": {
          "type": "string",
          "description": "Parameters for this Variant, as a JSON-encoded string",
          "example": "{\"branch\":\"main\"}"
        },
        "targetId": {
          "type": "string",
          "description": "Associated Target ID",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^[a-zA-Z0-9_-]{22}$"
        }
      },
      "description": "Information about a Scan Target Variant",
      "example": {
        "created": 1651578240,
        "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
        "id": "abcdef1234567890ghijkl",
        "lastModified": 1651578240,
        "parameters": "{\"branch\":\"main\"}",
        "targetId": "abcdef1234567890ghijkl"
      },
      "required": ["targetId", "parameters", "id", "created", "lastModified"]
    },
    "TargetVariantsCreateTargetVariantBadRequestResponseBody": {
      "title": "TargetVariantsCreateTargetVariantBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetVariantsCreateTargetVariantForbiddenResponseBody": {
      "title": "TargetVariantsCreateTargetVariantForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetVariantsCreateTargetVariantInternalServerErrorResponseBody": {
      "title": "TargetVariantsCreateTargetVariantInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetVariantsCreateTargetVariantRequestBody": {
      "title": "TargetVariantsCreateTargetVariantRequestBody",
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "description": "Git Commit or Container Image hash",
          "example": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
          "maxLength": 64
        },
        "parameters": {
          "type": "string",
          "description": "Parameters for this Variant, as a JSON-encoded string",
          "example": "{\"branch\":\"main\"}"
        }
      },
      "example": { "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35", "parameters": "{\"branch\":\"main\"}" },
      "required": ["parameters", "id", "created", "lastModified"]
    },
    "TargetVariantsCreateTargetVariantResponseBody": {
      "title": "TargetVariantsCreateTargetVariantResponseBody",
      "$ref": "#/definitions/IdResultResponseBody"
    },
    "TargetVariantsCreateTargetVariantUnauthorizedResponseBody": {
      "title": "TargetVariantsCreateTargetVariantUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetVariantsDeleteTargetVariantBadRequestResponseBody": {
      "title": "TargetVariantsDeleteTargetVariantBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetVariantsDeleteTargetVariantForbiddenResponseBody": {
      "title": "TargetVariantsDeleteTargetVariantForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetVariantsDeleteTargetVariantInternalServerErrorResponseBody": {
      "title": "TargetVariantsDeleteTargetVariantInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetVariantsDeleteTargetVariantNotFoundResponseBody": {
      "title": "TargetVariantsDeleteTargetVariantNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetVariantsDeleteTargetVariantUnauthorizedResponseBody": {
      "title": "TargetVariantsDeleteTargetVariantUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetVariantsFindTargetVariantByIDBadRequestResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetVariantsFindTargetVariantByIDForbiddenResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetVariantsFindTargetVariantByIDInternalServerErrorResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetVariantsFindTargetVariantByIDNotFoundResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetVariantsFindTargetVariantByIDResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDResponseBody",
      "$ref": "#/definitions/TargetVariantResponseBody"
    },
    "TargetVariantsFindTargetVariantByIDUnauthorizedResponseBody": {
      "title": "TargetVariantsFindTargetVariantByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetVariantsListTargetVariantsBadRequestResponseBody": {
      "title": "TargetVariantsListTargetVariantsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetVariantsListTargetVariantsForbiddenResponseBody": {
      "title": "TargetVariantsListTargetVariantsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetVariantsListTargetVariantsInternalServerErrorResponseBody": {
      "title": "TargetVariantsListTargetVariantsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetVariantsListTargetVariantsNotFoundResponseBody": {
      "title": "TargetVariantsListTargetVariantsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetVariantsListTargetVariantsResponseBody": {
      "title": "TargetVariantsListTargetVariantsResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/TargetVariantResponseBody" },
          "example": [
            {
              "created": 1651578240,
              "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "parameters": "{\"branch\":\"main\"}",
              "targetId": "abcdef1234567890ghijkl"
            },
            {
              "created": 1651578240,
              "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "parameters": "{\"branch\":\"main\"}",
              "targetId": "abcdef1234567890ghijkl"
            },
            {
              "created": 1651578240,
              "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "parameters": "{\"branch\":\"main\"}",
              "targetId": "abcdef1234567890ghijkl"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "created": 1651578240,
            "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "parameters": "{\"branch\":\"main\"}",
            "targetId": "abcdef1234567890ghijkl"
          },
          {
            "created": 1651578240,
            "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "parameters": "{\"branch\":\"main\"}",
            "targetId": "abcdef1234567890ghijkl"
          },
          {
            "created": 1651578240,
            "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "parameters": "{\"branch\":\"main\"}",
            "targetId": "abcdef1234567890ghijkl"
          },
          {
            "created": 1651578240,
            "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "parameters": "{\"branch\":\"main\"}",
            "targetId": "abcdef1234567890ghijkl"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "TargetVariantsListTargetVariantsUnauthorizedResponseBody": {
      "title": "TargetVariantsListTargetVariantsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetVariantsUpdateTargetVariantBadRequestResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetVariantsUpdateTargetVariantForbiddenResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetVariantsUpdateTargetVariantInternalServerErrorResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetVariantsUpdateTargetVariantNotFoundResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetVariantsUpdateTargetVariantRequestBody": {
      "title": "TargetVariantsUpdateTargetVariantRequestBody",
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "description": "Git Commit or Container Image hash",
          "example": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35",
          "maxLength": 64
        },
        "parameters": {
          "type": "string",
          "description": "Parameters for this Variant, as a JSON-encoded string",
          "example": "{\"branch\":\"main\"}"
        }
      },
      "example": { "hash": "d1998db4b4651a4b9be9ecf320a2dfb8b4710e35", "parameters": "{\"branch\":\"main\"}" },
      "required": ["parameters", "created", "lastModified"]
    },
    "TargetVariantsUpdateTargetVariantResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantResponseBody",
      "$ref": "#/definitions/TargetVariantResponseBody"
    },
    "TargetVariantsUpdateTargetVariantUnauthorizedResponseBody": {
      "title": "TargetVariantsUpdateTargetVariantUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsCreateTargetBadRequestResponseBody": {
      "title": "TargetsCreateTargetBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsCreateTargetForbiddenResponseBody": {
      "title": "TargetsCreateTargetForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsCreateTargetInternalServerErrorResponseBody": {
      "title": "TargetsCreateTargetInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsCreateTargetRequestBody": {
      "title": "TargetsCreateTargetRequestBody",
      "type": "object",
      "properties": {
        "baselineVariantId": {
          "type": "string",
          "description": "ID of baseline Target Variant for Issue comparison",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^([a-zA-Z0-9_-]{22}|)$"
        },
        "directory": {
          "type": "string",
          "description": "Directory within the Scan Target to be scanned",
          "example": "app/src",
          "maxLength": 1024
        },
        "name": { "type": "string", "description": "Name of the Scan Target", "example": "NodeGoat", "maxLength": 128 },
        "type": {
          "type": "string",
          "description": "Scan Target's type",
          "example": "repository",
          "enum": ["container", "repository", "instance", "configuration"]
        },
        "url": {
          "type": "string",
          "description": "URL used to access the Scan Target",
          "example": "https://github.com/example/repo",
          "maxLength": 1024
        }
      },
      "example": {
        "baselineVariantId": "abcdef1234567890ghijkl",
        "directory": "app/src",
        "name": "NodeGoat",
        "type": "repository",
        "url": "https://github.com/example/repo"
      },
      "required": ["id", "created", "lastModified", "name", "type"]
    },
    "TargetsCreateTargetResponseBody": {
      "title": "TargetsCreateTargetResponseBody",
      "$ref": "#/definitions/IdResultResponseBody"
    },
    "TargetsCreateTargetUnauthorizedResponseBody": {
      "title": "TargetsCreateTargetUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsDeleteTargetBadRequestResponseBody": {
      "title": "TargetsDeleteTargetBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsDeleteTargetForbiddenResponseBody": {
      "title": "TargetsDeleteTargetForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsDeleteTargetInternalServerErrorResponseBody": {
      "title": "TargetsDeleteTargetInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsDeleteTargetNotFoundResponseBody": {
      "title": "TargetsDeleteTargetNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetsDeleteTargetUnauthorizedResponseBody": {
      "title": "TargetsDeleteTargetUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsFindTargetByIDBadRequestResponseBody": {
      "title": "TargetsFindTargetByIDBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsFindTargetByIDForbiddenResponseBody": {
      "title": "TargetsFindTargetByIDForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsFindTargetByIDInternalServerErrorResponseBody": {
      "title": "TargetsFindTargetByIDInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsFindTargetByIDNotFoundResponseBody": {
      "title": "TargetsFindTargetByIDNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetsFindTargetByIDResponseBody": {
      "title": "TargetsFindTargetByIDResponseBody",
      "$ref": "#/definitions/TargetResponseBody"
    },
    "TargetsFindTargetByIDUnauthorizedResponseBody": {
      "title": "TargetsFindTargetByIDUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsListTargetsBadRequestResponseBody": {
      "title": "TargetsListTargetsBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsListTargetsForbiddenResponseBody": {
      "title": "TargetsListTargetsForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsListTargetsInternalServerErrorResponseBody": {
      "title": "TargetsListTargetsInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsListTargetsNotFoundResponseBody": {
      "title": "TargetsListTargetsNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetsListTargetsResponseBody": {
      "title": "TargetsListTargetsResponseBody",
      "type": "object",
      "properties": {
        "pagination": { "$ref": "#/definitions/PaginationResponseBody" },
        "results": {
          "type": "array",
          "items": { "$ref": "#/definitions/TargetResponseBody" },
          "example": [
            {
              "baselineVariantId": "abcdef1234567890ghijkl",
              "created": 1651578240,
              "directory": "app/src",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "name": "NodeGoat",
              "orgId": "example_org",
              "projectId": "example_project",
              "type": "repository",
              "url": "https://github.com/example/repo"
            },
            {
              "baselineVariantId": "abcdef1234567890ghijkl",
              "created": 1651578240,
              "directory": "app/src",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "name": "NodeGoat",
              "orgId": "example_org",
              "projectId": "example_project",
              "type": "repository",
              "url": "https://github.com/example/repo"
            },
            {
              "baselineVariantId": "abcdef1234567890ghijkl",
              "created": 1651578240,
              "directory": "app/src",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "name": "NodeGoat",
              "orgId": "example_org",
              "projectId": "example_project",
              "type": "repository",
              "url": "https://github.com/example/repo"
            },
            {
              "baselineVariantId": "abcdef1234567890ghijkl",
              "created": 1651578240,
              "directory": "app/src",
              "id": "abcdef1234567890ghijkl",
              "lastModified": 1651578240,
              "name": "NodeGoat",
              "orgId": "example_org",
              "projectId": "example_project",
              "type": "repository",
              "url": "https://github.com/example/repo"
            }
          ]
        }
      },
      "example": {
        "pagination": { "link": "", "page": 4, "pageSize": 20, "totalItems": 230, "totalPages": 12 },
        "results": [
          {
            "baselineVariantId": "abcdef1234567890ghijkl",
            "created": 1651578240,
            "directory": "app/src",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "name": "NodeGoat",
            "orgId": "example_org",
            "projectId": "example_project",
            "type": "repository",
            "url": "https://github.com/example/repo"
          },
          {
            "baselineVariantId": "abcdef1234567890ghijkl",
            "created": 1651578240,
            "directory": "app/src",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "name": "NodeGoat",
            "orgId": "example_org",
            "projectId": "example_project",
            "type": "repository",
            "url": "https://github.com/example/repo"
          },
          {
            "baselineVariantId": "abcdef1234567890ghijkl",
            "created": 1651578240,
            "directory": "app/src",
            "id": "abcdef1234567890ghijkl",
            "lastModified": 1651578240,
            "name": "NodeGoat",
            "orgId": "example_org",
            "projectId": "example_project",
            "type": "repository",
            "url": "https://github.com/example/repo"
          }
        ]
      },
      "required": ["results", "pagination"]
    },
    "TargetsListTargetsUnauthorizedResponseBody": {
      "title": "TargetsListTargetsUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsPatchTargetBadRequestResponseBody": {
      "title": "TargetsPatchTargetBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsPatchTargetForbiddenResponseBody": {
      "title": "TargetsPatchTargetForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsPatchTargetInternalServerErrorResponseBody": {
      "title": "TargetsPatchTargetInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsPatchTargetNotFoundResponseBody": {
      "title": "TargetsPatchTargetNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetsPatchTargetRequestBody": {
      "title": "TargetsPatchTargetRequestBody",
      "type": "object",
      "properties": {
        "baselineVariantId": {
          "type": "string",
          "description": "ID of baseline Target Variant for Issue comparison",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^([a-zA-Z0-9_-]{22}|)$"
        },
        "directory": {
          "type": "string",
          "description": "Directory within the Scan Target to be scanned",
          "example": "app/src",
          "maxLength": 1024
        },
        "name": { "type": "string", "description": "Name of the Scan Target", "example": "NodeGoat", "maxLength": 128 },
        "type": {
          "type": "string",
          "description": "Scan Target's type",
          "example": "repository",
          "enum": ["container", "repository", "instance", "configuration"]
        },
        "url": {
          "type": "string",
          "description": "URL used to access the Scan Target",
          "example": "https://github.com/example/repo",
          "maxLength": 1024
        }
      },
      "example": {
        "baselineVariantId": "abcdef1234567890ghijkl",
        "directory": "app/src",
        "name": "NodeGoat",
        "type": "repository",
        "url": "https://github.com/example/repo"
      }
    },
    "TargetsPatchTargetResponseBody": {
      "title": "TargetsPatchTargetResponseBody",
      "$ref": "#/definitions/TargetResponseBody"
    },
    "TargetsPatchTargetUnauthorizedResponseBody": {
      "title": "TargetsPatchTargetUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TargetsUpdateTargetBadRequestResponseBody": {
      "title": "TargetsUpdateTargetBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TargetsUpdateTargetForbiddenResponseBody": {
      "title": "TargetsUpdateTargetForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TargetsUpdateTargetInternalServerErrorResponseBody": {
      "title": "TargetsUpdateTargetInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TargetsUpdateTargetNotFoundResponseBody": {
      "title": "TargetsUpdateTargetNotFoundResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Not Found" },
        "status": { "type": "integer", "default": 404, "example": 404, "format": "int64" }
      },
      "example": { "message": "Not Found", "status": 404 },
      "required": ["message"]
    },
    "TargetsUpdateTargetRequestBody": {
      "title": "TargetsUpdateTargetRequestBody",
      "type": "object",
      "properties": {
        "baselineVariantId": {
          "type": "string",
          "description": "ID of baseline Target Variant for Issue comparison",
          "example": "abcdef1234567890ghijkl",
          "pattern": "^([a-zA-Z0-9_-]{22}|)$"
        },
        "directory": {
          "type": "string",
          "description": "Directory within the Scan Target to be scanned",
          "example": "app/src",
          "maxLength": 1024
        },
        "name": { "type": "string", "description": "Name of the Scan Target", "example": "NodeGoat", "maxLength": 128 },
        "type": {
          "type": "string",
          "description": "Scan Target's type",
          "example": "repository",
          "enum": ["container", "repository", "instance", "configuration"]
        },
        "url": {
          "type": "string",
          "description": "URL used to access the Scan Target",
          "example": "https://github.com/example/repo",
          "maxLength": 1024
        }
      },
      "example": {
        "baselineVariantId": "abcdef1234567890ghijkl",
        "directory": "app/src",
        "name": "NodeGoat",
        "type": "repository",
        "url": "https://github.com/example/repo"
      },
      "required": ["created", "lastModified", "name", "type"]
    },
    "TargetsUpdateTargetResponseBody": {
      "title": "TargetsUpdateTargetResponseBody",
      "$ref": "#/definitions/TargetResponseBody"
    },
    "TargetsUpdateTargetUnauthorizedResponseBody": {
      "title": "TargetsUpdateTargetUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TestTargetResponseBody": {
      "title": "TestTargetResponseBody",
      "type": "object",
      "properties": {
        "baseline": { "$ref": "#/definitions/TestTargetVariantResponseBody" },
        "directory": { "type": "string", "description": "Directory of target", "example": "/" },
        "id": { "type": "string", "description": "ID of target", "example": "target1111111111111111" },
        "lastScanned": {
          "type": "integer",
          "description": "Type of target",
          "example": 16348365298,
          "format": "int64"
        },
        "name": { "type": "string", "description": "Name of Target", "example": "target 1" },
        "type": {
          "type": "string",
          "description": "Type of target",
          "example": "repository",
          "enum": ["container", "repository", "instance", "configuration"]
        },
        "url": { "type": "string", "description": "Url of target", "example": "github.com/harness/sto-core" },
        "variants": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestTargetVariantResponseBody" },
          "example": [
            { "id": "variant111111111111111", "name": "Branch: feature-1" },
            { "id": "variant111111111111111", "name": "Branch: feature-1" }
          ]
        }
      },
      "description": "Individual TestTarget",
      "example": {
        "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
        "directory": "/",
        "id": "target1111111111111111",
        "lastScanned": 16348365298,
        "name": "target 1",
        "type": "repository",
        "url": "github.com/harness/sto-core",
        "variants": [
          { "id": "variant111111111111111", "name": "Branch: feature-1" },
          { "id": "variant111111111111111", "name": "Branch: feature-1" },
          { "id": "variant111111111111111", "name": "Branch: feature-1" },
          { "id": "variant111111111111111", "name": "Branch: feature-1" }
        ]
      },
      "required": ["id", "name", "type", "variants", "lastScanned"]
    },
    "TestTargetResultResponseBody": {
      "title": "TestTargetResultResponseBody",
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": { "$ref": "#/definitions/TestTargetResponseBody" },
          "description": "Test Targets data",
          "example": [
            {
              "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
              "directory": "/",
              "id": "target1111111111111111",
              "lastScanned": 16348365298,
              "name": "target 1",
              "type": "repository",
              "url": "github.com/harness/sto-core",
              "variants": [
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" }
              ]
            },
            {
              "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
              "directory": "/",
              "id": "target1111111111111111",
              "lastScanned": 16348365298,
              "name": "target 1",
              "type": "repository",
              "url": "github.com/harness/sto-core",
              "variants": [
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" }
              ]
            },
            {
              "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
              "directory": "/",
              "id": "target1111111111111111",
              "lastScanned": 16348365298,
              "name": "target 1",
              "type": "repository",
              "url": "github.com/harness/sto-core",
              "variants": [
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" }
              ]
            },
            {
              "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
              "directory": "/",
              "id": "target1111111111111111",
              "lastScanned": 16348365298,
              "name": "target 1",
              "type": "repository",
              "url": "github.com/harness/sto-core",
              "variants": [
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" },
                { "id": "variant111111111111111", "name": "Branch: feature-1" }
              ]
            }
          ]
        }
      },
      "description": "Data needed by the Test Targets page",
      "example": {
        "targets": [
          {
            "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
            "directory": "/",
            "id": "target1111111111111111",
            "lastScanned": 16348365298,
            "name": "target 1",
            "type": "repository",
            "url": "github.com/harness/sto-core",
            "variants": [
              { "id": "variant111111111111111", "name": "Branch: feature-1" },
              { "id": "variant111111111111111", "name": "Branch: feature-1" },
              { "id": "variant111111111111111", "name": "Branch: feature-1" }
            ]
          },
          {
            "baseline": { "id": "variant111111111111111", "name": "Branch: feature-1" },
            "directory": "/",
            "id": "target1111111111111111",
            "lastScanned": 16348365298,
            "name": "target 1",
            "type": "repository",
            "url": "github.com/harness/sto-core",
            "variants": [
              { "id": "variant111111111111111", "name": "Branch: feature-1" },
              { "id": "variant111111111111111", "name": "Branch: feature-1" },
              { "id": "variant111111111111111", "name": "Branch: feature-1" }
            ]
          }
        ]
      },
      "required": ["targets"]
    },
    "TestTargetVariantResponseBody": {
      "title": "TestTargetVariantResponseBody",
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Target Variant ID", "example": "variant111111111111111" },
        "name": { "type": "string", "description": "Name of Target Variant", "example": "Branch: feature-1" }
      },
      "description": "Individual Test Target Variant",
      "example": { "id": "variant111111111111111", "name": "Branch: feature-1" },
      "required": ["id", "name"]
    },
    "TokenIssueTokenBadRequestResponseBody": {
      "title": "TokenIssueTokenBadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TokenIssueTokenForbiddenResponseBody": {
      "title": "TokenIssueTokenForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TokenIssueTokenInternalServerErrorResponseBody": {
      "title": "TokenIssueTokenInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TokenIssueTokenResponseBody": {
      "title": "TokenIssueTokenResponseBody",
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Issued cross-service JWT",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        }
      },
      "example": {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      },
      "required": ["token"]
    },
    "TokenIssueTokenUnauthorizedResponseBody": {
      "title": "TokenIssueTokenUnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "TokenV1IssueTokenV1BadRequestResponseBody": {
      "title": "TokenV1IssueTokenV1BadRequestResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Bad Request: accountId parameter is required" },
        "status": { "type": "integer", "default": 400, "example": 400, "format": "int64" }
      },
      "example": { "message": "Bad Request: accountId parameter is required", "status": 400 },
      "required": ["message"]
    },
    "TokenV1IssueTokenV1ForbiddenResponseBody": {
      "title": "TokenV1IssueTokenV1ForbiddenResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Forbidden" },
        "status": { "type": "integer", "default": 403, "example": 403, "format": "int64" }
      },
      "example": { "message": "Forbidden", "status": 403 },
      "required": ["message"]
    },
    "TokenV1IssueTokenV1InternalServerErrorResponseBody": {
      "title": "TokenV1IssueTokenV1InternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "TokenV1IssueTokenV1UnauthorizedResponseBody": {
      "title": "TokenV1IssueTokenV1UnauthorizedResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Unauthorized" },
        "status": { "type": "integer", "default": 401, "example": 401, "format": "int64" }
      },
      "example": { "message": "Unauthorized", "status": 401 },
      "required": ["message"]
    },
    "UsageReportUsageInternalServerErrorResponseBody": {
      "title": "UsageReportUsageInternalServerErrorResponseBody",
      "type": "object",
      "properties": {
        "message": { "type": "string", "example": "Internal Server Error" },
        "status": { "type": "integer", "default": 500, "example": 500, "format": "int64" }
      },
      "example": { "message": "Internal Server Error", "status": 500 },
      "required": ["message"]
    },
    "UsageReportUsageResponseBody": {
      "title": "UsageReportUsageResponseBody",
      "$ref": "#/definitions/UsageResultResponseBody"
    },
    "UsageResponseBody": {
      "title": "UsageResponseBody",
      "type": "object",
      "properties": {
        "count": { "type": "integer", "description": "Unit count", "example": 0, "format": "int64" },
        "displayName": { "type": "string", "description": "Display name", "example": "Last 30 Days" },
        "references": {
          "type": "array",
          "items": { "type": "string", "example": "In modi quod nobis ut." },
          "description": "References",
          "example": ["Et magni.", "Illum quasi consectetur provident qui.", "Maiores quis ut.", "Veritatis soluta."]
        }
      },
      "description": "Usage",
      "example": {
        "count": 0,
        "displayName": "Last 30 Days",
        "references": ["Sunt sunt quia dignissimos sint quo.", "Placeat enim odio est modi."]
      },
      "required": ["count", "displayName", "references"]
    },
    "UsageResultResponseBody": {
      "title": "UsageResultResponseBody",
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string",
          "description": "Account identifier",
          "example": "BdsgiWzwT7CQFeJl9XkQ3A"
        },
        "activeDevelopers": { "$ref": "#/definitions/UsageResponseBody" },
        "activeScans": { "$ref": "#/definitions/UsageResponseBody" },
        "module": { "type": "string", "description": "Harness module", "example": "STO" },
        "timestamp": { "type": "integer", "description": "Timestamp", "example": 1670427991307, "format": "int64" }
      },
      "description": "Usage Result",
      "example": {
        "accountIdentifier": "BdsgiWzwT7CQFeJl9XkQ3A",
        "activeDevelopers": {
          "count": 0,
          "displayName": "Last 30 Days",
          "references": [
            "Aliquam quod beatae.",
            "Dolor quibusdam accusantium voluptates eligendi debitis sit.",
            "Impedit ex.",
            "Vero nihil amet aspernatur voluptas impedit exercitationem."
          ]
        },
        "activeScans": {
          "count": 0,
          "displayName": "Last 30 Days",
          "references": [
            "Aliquam quod beatae.",
            "Dolor quibusdam accusantium voluptates eligendi debitis sit.",
            "Impedit ex.",
            "Vero nihil amet aspernatur voluptas impedit exercitationem."
          ]
        },
        "module": "STO",
        "timestamp": 1670427991307
      },
      "required": ["accountIdentifier", "module", "timestamp", "activeDevelopers", "activeScans"]
    }
  },
  "securityDefinitions": {
    "X-Harness-Token_header_X-Harness-Token": { "type": "apiKey", "name": "X-Harness-Token", "in": "header" },
    "jwt_header_Authorization": {
      "type": "apiKey",
      "description": "\n**Security Scopes**:\n  * `core_account_view`: View Core Account\n  * `sto_issue_view`: View Issues\n  * `sto_issue_edit`: Edit Issues\n  * `sto_issue_delete`: Delete Issues\n  * `sto_scan_view`: View Scans\n  * `sto_scan_edit`: Edit Scans\n  * `sto_scan_delete`: Delete Scans\n  * `sto_testtarget_view`: View Scan Targets\n  * `sto_testtarget_edit`: Edit Scan Targets\n  * `sto_testtarget_delete`: Delete Scan Targets\n  * `sto_exemption_view`: View Exceptions\n  * `sto_exemption_create`: Create Exceptions\n  * `sto_exemption_approve`: Approve Exceptions\n  * `sto_exemption_delete`: Delete Exceptions\n  * `sto_products_view`: View Scan Tools\n  * `sto_products_edit`: Edit Scan Tools\n  * `sto_products_delete`: Delete Scan Tools",
      "name": "Authorization",
      "in": "header"
    }
  }
}
