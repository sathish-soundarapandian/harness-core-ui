/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '1.0.0'
export interface CommitmentUtilisationChartResponse {
  date?: string
  utilization_percentage?: number
}

export interface CommitmentUtilisationRIResponse {
  chart?: CommitmentUtilisationChartResponse[]
  table?: CommitmentUtilisationTableResponse
}

export interface CommitmentUtilisationResponse {
  response?: CommitmentUtillisationGroupByCommitmentType
}

export interface CommitmentUtilisationTableResponse {
  compute_spend?: number
  percentage?: number
  utilization?: number
}

export interface CommitmentUtillisationGroupByCommitmentType {
  'Reserved Instances'?: CommitmentUtilisationRIResponse
  'Savings Plans'?: ComputeCoverageSavingsPlansResponse
}

export interface ComputeCoverageChartResponse {
  coverage_cost?: number
  date?: string
}

export interface ComputeCoverageGroupByCommitmentType {
  'OnDemand Instances'?: ComputeCoverageOnDemandResponse
  'Reserved Instances'?: ComputeCoverageRIResponse
  'Savings Plans'?: ComputeCoverageSavingsPlansResponse
}

export interface ComputeCoverageGroupByInstanceFamily {
  [key: string]: any
}

export interface ComputeCoverageGroupByRegions {
  [key: string]: any
}

export interface ComputeCoverageInstanceFamilyTableResponse {
  coverage?: number
  on_demand_cost?: number
  on_demand_hours?: number
  reservation_cost?: number
  ri_coverage_hours?: number
  savings_plan_hours?: number
  total_cost?: number
  total_hours?: number
}

export interface ComputeCoverageOnDemandResponse {
  chart?: ComputeCoverageChartResponse[]
  table?: ComputeCoverageOnDemandTableResponse
}

export interface ComputeCoverageOnDemandTableResponse {
  on_demand_cost?: number
  on_demand_hours?: number
  total_cost?: number
  total_hours?: number
}

export interface ComputeCoverageRIResponse {
  chart?: ComputeCoverageChartResponse[]
  table?: ComputeCoverageRITableResponse
}

export interface ComputeCoverageRITableResponse {
  ri_coverage_hours?: number
  total_cost?: number
  total_hours?: number
}

export interface ComputeCoverageRegionsTableResponse {
  coverage?: number
  on_demand_cost?: number
  on_demand_hours?: number
  reservation_cost?: number
  ri_coverage_hours?: number
  savings_plan_hours?: number
  total_cost?: number
  total_hours?: number
}

export interface ComputeCoverageResponse {
  response?: ComputeCoverageGroupByCommitmentType | ComputeCoverageGroupByInstanceFamily | ComputeCoverageGroupByRegions
}

export interface ComputeCoverageSavingsPlansResponse {
  chart?: ComputeCoverageChartResponse[]
  table?: ComputeCoverageSavingsPlansTableResponse
}

export interface ComputeCoverageSavingsPlansTableResponse {
  total_cost?: number
  total_hours?: number
}

export interface Config1 {
  exclusion_list: ExclusionList[]
  reserved_instances_config: ReservedInstancesConfig
  savings_plans_config: SavingsPlansConfig
}

export interface ExclusionList {
  instance_type: string
  region: string
}

export interface FiltersData {
  account_id?: string[]
  instance_family?: string[]
  region?: string[]
}

export interface FiltersRequest {
  group_by?: string
}

export interface FiltersResponse {
  response?: FiltersData
}

export interface GetSetupResponse {
  response?: SetupPOSTRequest
}

export interface ReservedInstancesConfig {
  coverage: number
  payments_strategy: string
  term: number
}

export interface SavingsPlansConfig {
  coverage: number
  payments_strategy: string
  term: number
}

export interface SavingsResponse {
  response?: SavingsVisualisationData
}

export interface SavingsVisualisationChartData {
  date?: string
  savings?: number
}

export interface SavingsVisualisationData {
  [key: string]: any
}

export interface SavingsVisualisationTableData {
  total?: number
}

export interface SetupInstanceType {
  compute_spend?: number
  coverage_percentage?: number
  instance_type?: string
  machine_type?: string
  region?: string
}

export interface SetupInstanceTypesRequest {
  instance_types: string[]
  regions: string[]
}

export interface SetupInstanceTypesResponse {
  response?: SetupInstanceType[]
}

export interface SetupPOSTRequest {
  config: Config1
  enabled: boolean
}

export interface SetupPOSTResponse {
  response?: {} | null
}

export interface SummaryRequest {
  account_ids?: string[]
  group_by?: string
  instance_families?: string[]
  regions?: string[]
}

export interface SummaryResponse {
  errors?: {} | null
  response?: SummaryResponseData
}

export interface SummaryResponseData {
  compute_spend?: number
  coverage_percentage?: {
    ondemand?: number
    reserved_instances?: number
    savings_plan?: number
  }
  ondemand_spend?: number
  reservations_spend?: number
  savings?: {
    percentage?: number
    total?: number
  }
  savings_plans_spend?: number
  utilization_percentage?: {
    reserved_instances?: number
    savings_plan?: number
  }
}

export type SummaryRequestRequestBody = SummaryRequest

export interface GetCommitmentUtilisationQueryParams {
  accountIdentifier: string
  start_date: string
  end_date: string
}

export interface GetCommitmentUtilisationPathParams {
  accountId: string
}

export type GetCommitmentUtilisationProps = Omit<
  MutateProps<
    CommitmentUtilisationResponse,
    unknown,
    GetCommitmentUtilisationQueryParams,
    SummaryRequestRequestBody,
    GetCommitmentUtilisationPathParams
  >,
  'path' | 'verb'
> &
  GetCommitmentUtilisationPathParams

/**
 * Commitment Utilisation
 */
export const GetCommitmentUtilisation = ({ accountId, ...props }: GetCommitmentUtilisationProps) => (
  <Mutate<
    CommitmentUtilisationResponse,
    unknown,
    GetCommitmentUtilisationQueryParams,
    SummaryRequestRequestBody,
    GetCommitmentUtilisationPathParams
  >
    verb="POST"
    path={`/accounts/${accountId}/v1/detail/commitment_utilisation`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseGetCommitmentUtilisationProps = Omit<
  UseMutateProps<
    CommitmentUtilisationResponse,
    unknown,
    GetCommitmentUtilisationQueryParams,
    SummaryRequestRequestBody,
    GetCommitmentUtilisationPathParams
  >,
  'path' | 'verb'
> &
  GetCommitmentUtilisationPathParams

/**
 * Commitment Utilisation
 */
export const useGetCommitmentUtilisation = ({ accountId, ...props }: UseGetCommitmentUtilisationProps) =>
  useMutate<
    CommitmentUtilisationResponse,
    unknown,
    GetCommitmentUtilisationQueryParams,
    SummaryRequestRequestBody,
    GetCommitmentUtilisationPathParams
  >(
    'POST',
    (paramsInPath: GetCommitmentUtilisationPathParams) =>
      `/accounts/${paramsInPath.accountId}/v1/detail/commitment_utilisation`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface FetchComputeCoverageQueryParams {
  accountIdentifier: string
  start_date: string
  end_date: string
}

export interface FetchComputeCoveragePathParams {
  accountId: string
}

export type FetchComputeCoverageProps = Omit<
  MutateProps<
    ComputeCoverageResponse,
    unknown,
    FetchComputeCoverageQueryParams,
    SummaryRequestRequestBody,
    FetchComputeCoveragePathParams
  >,
  'path' | 'verb'
> &
  FetchComputeCoveragePathParams

/**
 * Get compute coverage
 */
export const FetchComputeCoverage = ({ accountId, ...props }: FetchComputeCoverageProps) => (
  <Mutate<
    ComputeCoverageResponse,
    unknown,
    FetchComputeCoverageQueryParams,
    SummaryRequestRequestBody,
    FetchComputeCoveragePathParams
  >
    verb="POST"
    path={`/accounts/${accountId}/v1/detail/compute_coverage`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseFetchComputeCoverageProps = Omit<
  UseMutateProps<
    ComputeCoverageResponse,
    unknown,
    FetchComputeCoverageQueryParams,
    SummaryRequestRequestBody,
    FetchComputeCoveragePathParams
  >,
  'path' | 'verb'
> &
  FetchComputeCoveragePathParams

/**
 * Get compute coverage
 */
export const useFetchComputeCoverage = ({ accountId, ...props }: UseFetchComputeCoverageProps) =>
  useMutate<
    ComputeCoverageResponse,
    unknown,
    FetchComputeCoverageQueryParams,
    SummaryRequestRequestBody,
    FetchComputeCoveragePathParams
  >(
    'POST',
    (paramsInPath: FetchComputeCoveragePathParams) => `/accounts/${paramsInPath.accountId}/v1/detail/compute_coverage`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface FetchSavingsQueryParams {
  accountIdentifier: string
  start_date: string
  end_date: string
}

export interface FetchSavingsPathParams {
  accountId: string
}

export type FetchSavingsProps = Omit<
  MutateProps<
    ComputeCoverageResponse,
    unknown,
    FetchSavingsQueryParams,
    SummaryRequestRequestBody,
    FetchSavingsPathParams
  >,
  'path' | 'verb'
> &
  FetchSavingsPathParams

/**
 * Get Savings details
 */
export const FetchSavings = ({ accountId, ...props }: FetchSavingsProps) => (
  <Mutate<ComputeCoverageResponse, unknown, FetchSavingsQueryParams, SummaryRequestRequestBody, FetchSavingsPathParams>
    verb="POST"
    path={`/accounts/${accountId}/v1/detail/savings`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseFetchSavingsProps = Omit<
  UseMutateProps<
    ComputeCoverageResponse,
    unknown,
    FetchSavingsQueryParams,
    SummaryRequestRequestBody,
    FetchSavingsPathParams
  >,
  'path' | 'verb'
> &
  FetchSavingsPathParams

/**
 * Get Savings details
 */
export const useFetchSavings = ({ accountId, ...props }: UseFetchSavingsProps) =>
  useMutate<
    ComputeCoverageResponse,
    unknown,
    FetchSavingsQueryParams,
    SummaryRequestRequestBody,
    FetchSavingsPathParams
  >('POST', (paramsInPath: FetchSavingsPathParams) => `/accounts/${paramsInPath.accountId}/v1/detail/savings`, {
    base: getConfig('lw/co/api'),
    pathParams: { accountId },
    ...props
  })

export interface FetchFiltersQueryParams {
  accountIdentifier: string
}

export interface FetchFiltersPathParams {
  accountId: string
}

export type FetchFiltersProps = Omit<
  MutateProps<FiltersResponse, unknown, FetchFiltersQueryParams, FiltersRequest, FetchFiltersPathParams>,
  'path' | 'verb'
> &
  FetchFiltersPathParams

/**
 * Filters for commitment orchestrator visibility
 */
export const FetchFilters = ({ accountId, ...props }: FetchFiltersProps) => (
  <Mutate<FiltersResponse, unknown, FetchFiltersQueryParams, FiltersRequest, FetchFiltersPathParams>
    verb="POST"
    path={`/accounts/${accountId}/v1/filters`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseFetchFiltersProps = Omit<
  UseMutateProps<FiltersResponse, unknown, FetchFiltersQueryParams, FiltersRequest, FetchFiltersPathParams>,
  'path' | 'verb'
> &
  FetchFiltersPathParams

/**
 * Filters for commitment orchestrator visibility
 */
export const useFetchFilters = ({ accountId, ...props }: UseFetchFiltersProps) =>
  useMutate<FiltersResponse, unknown, FetchFiltersQueryParams, FiltersRequest, FetchFiltersPathParams>(
    'POST',
    (paramsInPath: FetchFiltersPathParams) => `/accounts/${paramsInPath.accountId}/v1/filters`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface GetSetupCOQueryParams {
  accountIdentifier: string
}

export interface GetSetupCOPathParams {
  accountId: string
}

export type GetSetupCOProps = Omit<
  GetProps<GetSetupResponse, unknown, GetSetupCOQueryParams, GetSetupCOPathParams>,
  'path'
> &
  GetSetupCOPathParams

/**
 * Setup GET
 */
export const GetSetupCO = ({ accountId, ...props }: GetSetupCOProps) => (
  <Get<GetSetupResponse, unknown, GetSetupCOQueryParams, GetSetupCOPathParams>
    path={`/accounts/${accountId}/v1/setup`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseGetSetupCOProps = Omit<
  UseGetProps<GetSetupResponse, unknown, GetSetupCOQueryParams, GetSetupCOPathParams>,
  'path'
> &
  GetSetupCOPathParams

/**
 * Setup GET
 */
export const useGetSetupCO = ({ accountId, ...props }: UseGetSetupCOProps) =>
  useGet<GetSetupResponse, unknown, GetSetupCOQueryParams, GetSetupCOPathParams>(
    (paramsInPath: GetSetupCOPathParams) => `/accounts/${paramsInPath.accountId}/v1/setup`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface SaveSetupCOQueryParams {
  accountIdentifier: string
}

export interface SaveSetupCOPathParams {
  accountId: string
}

export type SaveSetupCOProps = Omit<
  MutateProps<SetupPOSTResponse, unknown, SaveSetupCOQueryParams, SetupPOSTRequest, SaveSetupCOPathParams>,
  'path' | 'verb'
> &
  SaveSetupCOPathParams

/**
 * Setup Commitment Orchestration
 *
 * Setup Commitment Orchestration
 */
export const SaveSetupCO = ({ accountId, ...props }: SaveSetupCOProps) => (
  <Mutate<SetupPOSTResponse, unknown, SaveSetupCOQueryParams, SetupPOSTRequest, SaveSetupCOPathParams>
    verb="POST"
    path={`/accounts/${accountId}/v1/setup`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseSaveSetupCOProps = Omit<
  UseMutateProps<SetupPOSTResponse, unknown, SaveSetupCOQueryParams, SetupPOSTRequest, SaveSetupCOPathParams>,
  'path' | 'verb'
> &
  SaveSetupCOPathParams

/**
 * Setup Commitment Orchestration
 *
 * Setup Commitment Orchestration
 */
export const useSaveSetupCO = ({ accountId, ...props }: UseSaveSetupCOProps) =>
  useMutate<SetupPOSTResponse, unknown, SaveSetupCOQueryParams, SetupPOSTRequest, SaveSetupCOPathParams>(
    'POST',
    (paramsInPath: SaveSetupCOPathParams) => `/accounts/${paramsInPath.accountId}/v1/setup`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface FetchSetupInstanceTypesQueryParams {
  accountIdentifier: string
  start_date: string
  end_date: string
}

export interface FetchSetupInstanceTypesPathParams {
  accountId: string
}

export type FetchSetupInstanceTypesProps = Omit<
  MutateProps<
    SetupInstanceTypesResponse,
    unknown,
    FetchSetupInstanceTypesQueryParams,
    SetupInstanceTypesRequest,
    FetchSetupInstanceTypesPathParams
  >,
  'path' | 'verb'
> &
  FetchSetupInstanceTypesPathParams

/**
 * Get all Instance Types for Setup
 */
export const FetchSetupInstanceTypes = ({ accountId, ...props }: FetchSetupInstanceTypesProps) => (
  <Mutate<
    SetupInstanceTypesResponse,
    unknown,
    FetchSetupInstanceTypesQueryParams,
    SetupInstanceTypesRequest,
    FetchSetupInstanceTypesPathParams
  >
    verb="POST"
    path={`/accounts/${accountId}/v1/setup/instance_types`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseFetchSetupInstanceTypesProps = Omit<
  UseMutateProps<
    SetupInstanceTypesResponse,
    unknown,
    FetchSetupInstanceTypesQueryParams,
    SetupInstanceTypesRequest,
    FetchSetupInstanceTypesPathParams
  >,
  'path' | 'verb'
> &
  FetchSetupInstanceTypesPathParams

/**
 * Get all Instance Types for Setup
 */
export const useFetchSetupInstanceTypes = ({ accountId, ...props }: UseFetchSetupInstanceTypesProps) =>
  useMutate<
    SetupInstanceTypesResponse,
    unknown,
    FetchSetupInstanceTypesQueryParams,
    SetupInstanceTypesRequest,
    FetchSetupInstanceTypesPathParams
  >(
    'POST',
    (paramsInPath: FetchSetupInstanceTypesPathParams) => `/accounts/${paramsInPath.accountId}/v1/setup/instance_types`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )

export interface FetchCOSummaryQueryParams {
  accountIdentifier: string
  start_date: string
  end_date: string
}

export interface FetchCOSummaryPathParams {
  accountId: string
}

export type FetchCOSummaryProps = Omit<
  MutateProps<SummaryResponse, unknown, FetchCOSummaryQueryParams, SummaryRequestRequestBody, FetchCOSummaryPathParams>,
  'path' | 'verb'
> &
  FetchCOSummaryPathParams

/**
 * Gets summarized data for all the accounts within the specified period
 *
 * Gets summarized data for all the accounts within the specified period
 */
export const FetchCOSummary = ({ accountId, ...props }: FetchCOSummaryProps) => (
  <Mutate<SummaryResponse, unknown, FetchCOSummaryQueryParams, SummaryRequestRequestBody, FetchCOSummaryPathParams>
    verb="POST"
    path={`/accounts/${accountId}/v1/summary`}
    base={getConfig('lw/co/api')}
    {...props}
  />
)

export type UseFetchCOSummaryProps = Omit<
  UseMutateProps<
    SummaryResponse,
    unknown,
    FetchCOSummaryQueryParams,
    SummaryRequestRequestBody,
    FetchCOSummaryPathParams
  >,
  'path' | 'verb'
> &
  FetchCOSummaryPathParams

/**
 * Gets summarized data for all the accounts within the specified period
 *
 * Gets summarized data for all the accounts within the specified period
 */
export const useFetchCOSummary = ({ accountId, ...props }: UseFetchCOSummaryProps) =>
  useMutate<SummaryResponse, unknown, FetchCOSummaryQueryParams, SummaryRequestRequestBody, FetchCOSummaryPathParams>(
    'POST',
    (paramsInPath: FetchCOSummaryPathParams) => `/accounts/${paramsInPath.accountId}/v1/summary`,
    { base: getConfig('lw/co/api'), pathParams: { accountId }, ...props }
  )
