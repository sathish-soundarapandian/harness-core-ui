/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/**
 * Generated by @openapi-codegen
 *
 * @version 0.1
 */
import * as reactQuery from '@tanstack/react-query'
import { useCetContext, CetContext } from './cetContext'
import type * as Fetcher from './cetFetcher'
import { cetFetch } from './cetFetcher'
import type * as Schemas from './cetSchemas'

export type GetLicenseUsageQueryParams = {
  /**
   * Account Identifier for requested License Usage
   *
   * @example abcdef1234567890ghijkl
   * @pattern ^[a-zA-Z0-9_-]{22}$
   */
  accountId: string
  /**
   * Timestamp for requested License Usage
   *
   * @format int64
   * @example 1670427991307
   */
  timestamp?: number
}

export type GetLicenseUsageHeaders = {
  /**
   * Account Identifier for Request
   */
  accountId?: string
  /**
   * Harness personal or service access token
   *
   * @example Aut nihil veritatis id error vero rerum.
   */
  ['X-Api-Key']?: string
}

export type GetLicenseUsageError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.NotFound
    }
  | {
      status: 401
      payload: Schemas.NotFound
    }
  | {
      status: 403
      payload: Schemas.NotFound
    }
  | {
      status: 404
      payload: Schemas.NotFound
    }
  | {
      status: 500
      payload: Schemas.NotFound
    }
>

export type GetLicenseUsageVariables = {
  headers?: GetLicenseUsageHeaders
  queryParams: GetLicenseUsageQueryParams
} & CetContext<QueryOperation>['fetcherOptions']

export const fetchGetLicenseUsage = (variables: GetLicenseUsageVariables) =>
  cetFetch<
    Schemas.CETLicenseUsageDTO,
    GetLicenseUsageError,
    undefined,
    GetLicenseUsageHeaders,
    GetLicenseUsageQueryParams,
    {}
  >({ url: '/api/usage', method: 'get', ...variables })

export const useGetLicenseUsage = <TData = Schemas.CETLicenseUsageDTO>(
  variables: GetLicenseUsageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CETLicenseUsageDTO, GetLicenseUsageError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useCetContext(options)

  return reactQuery.useQuery<Schemas.CETLicenseUsageDTO, GetLicenseUsageError, TData>(
    queryKeyFn({
      path: '/api/usage',
      operationId: 'getLicenseUsage',
      variables
    }),
    () => fetchGetLicenseUsage({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions
    }
  )
}

export type QueryOperation = {
  path: '/api/usage'
  operationId: 'getLicenseUsage'
  variables: GetLicenseUsageVariables
}
