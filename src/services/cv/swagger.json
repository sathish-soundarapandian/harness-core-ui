{
  "swagger": "2.0",
  "info": {
    "title": "Continuous Verification Swagger",
    "version": "1.0"
  },
  "host": "{{host}}",
  "basePath": "/cv/api",
  "tags": [
    {
      "name": "kubernetes"
    },
    {
      "name": "learning-engine-dev"
    },
    {
      "name": "learning"
    },
    {
      "name": "log-analysis"
    },
    {
      "name": "log-cluster"
    },
    {
      "name": "timeseries-analysis"
    },
    {
      "name": "trend-analysis"
    },
    {
      "name": "automation"
    },
    {
      "name": "verify-step"
    },
    {
      "name": "account{accountIdentifier}orgs{orgIdentifier}projects{projectIdentifier}verifications{verifyStepExecutionId}"
    },
    {
      "name": "appdynamics"
    },
    {
      "name": "aws"
    },
    {
      "name": "cv-config"
    },
    {
      "name": "cvng-log"
    },
    {
      "name": "partial-yaml-schema"
    },
    {
      "name": "change-event"
    },
    {
      "name": "demo"
    },
    {
      "name": "cloudwatch"
    },
    {
      "name": "customhealth"
    },
    {
      "name": "delegate-data-collection"
    },
    {
      "name": "delegate-data-collection-task"
    },
    {
      "name": "datadog-logs"
    },
    {
      "name": "datadog-metrics"
    },
    {
      "name": "debug"
    },
    {
      "name": "dynatrace"
    },
    {
      "name": "elk"
    },
    {
      "name": "health"
    },
    {
      "name": "health-source-records"
    },
    {
      "name": "host-record"
    },
    {
      "name": "log-feedback"
    },
    {
      "name": "log-record"
    },
    {
      "name": "metric-pack"
    },
    {
      "name": "monitored-service"
    },
    {
      "name": "newrelic"
    },
    {
      "name": "onboarding"
    },
    {
      "name": "pagerduty"
    },
    {
      "name": "parseSampleDara"
    },
    {
      "name": "prometheus"
    },
    {
      "name": "risk-category"
    },
    {
      "name": "monitored-servicesli"
    },
    {
      "name": "splunk"
    },
    {
      "name": "stackdriver-log"
    },
    {
      "name": "stackdriver"
    },
    {
      "name": "sumologic"
    },
    {
      "name": "timeseries"
    },
    {
      "name": "webhook"
    },
    {
      "name": "error-tracking-dashboard"
    },
    {
      "name": "log-dashboard"
    },
    {
      "name": "service-dependency-graph"
    },
    {
      "name": "timeseries-dashboard"
    },
    {
      "name": "Downtime"
    },
    {
      "name": "metrics"
    },
    {
      "name": "notification-rule"
    },
    {
      "name": "annotation"
    },
    {
      "name": "slo-dashboard"
    },
    {
      "name": "account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"
    },
    {
      "name": "slo"
    },
    {
      "name": "slov2"
    },
    {
      "name": "user-journey"
    },
    {
      "name": "usage"
    },
    {
      "name": "deployment-time-series-analysis"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/kubernetes/namespaces": {
      "get": {
        "tags": ["kubernetes"],
        "summary": "gets a list of kubernetes namespaces",
        "description": "",
        "operationId": "getNamespaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes/workloads": {
      "get": {
        "tags": ["kubernetes"],
        "summary": "gets a list of kubernetes workloads",
        "description": "",
        "operationId": "getWorkloads",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes/validate": {
      "get": {
        "tags": ["kubernetes"],
        "summary": "validate permissions of a k8s connector for events",
        "description": "",
        "operationId": "validateK8sConnectivity",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/learning-engine-dev/timeseries-anom-patterns-by-id": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getAnomalousPatternsById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeSeriesAnomalousPatterns"
            }
          }
        }
      }
    },
    "/learning-engine-dev/timeseries-risk-summary-by-time": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getRiskSummariesByTimeRange",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesRiskSummary"
            }
          }
        }
      }
    },
    "/learning-engine-dev/timeseries-cumulative-sums-by-time": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getTimeSeriesCumulativeSumsByTimeRange",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesCumulativeSums"
            }
          }
        }
      }
    },
    "/learning-engine-dev/timeseries-short-term-history-by-id": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getTimeSeriesShortTermHistoryByTaskId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeSeriesShortTermHistory"
            }
          }
        }
      }
    },
    "/learning-engine-dev/log-analysis-by-time": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getLogAnalysisRecordsByTimeRange",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogAnalysisRecord"
            }
          }
        }
      }
    },
    "/learning-engine-dev/log-analysis-result-by-time": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getLogAnalysisResultByTimeRange",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogAnalysisResult"
            }
          }
        }
      }
    },
    "/learning-engine-dev/clustered-logs-by-time": {
      "get": {
        "tags": ["learning-engine-dev"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getClusteredLogsByTimeRange",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListClusteredLog"
            }
          }
        }
      }
    },
    "/learning/mark-failure": {
      "post": {
        "tags": ["learning"],
        "summary": "mark task failed",
        "description": "",
        "operationId": "markLearningTaskFailure",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExceptionInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/learning/next-cv-task": {
      "get": {
        "tags": ["learning"],
        "summary": "get next LE task to be processed",
        "description": "",
        "operationId": "getNextLearningTask",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "taskTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SERVICE_GUARD_TIME_SERIES",
                "LOG_CLUSTER",
                "SERVICE_GUARD_LOG_ANALYSIS",
                "CANARY_LOG_ANALYSIS",
                "TEST_LOG_ANALYSIS",
                "TIME_SERIES_CANARY",
                "CANARY_DEPLOYMENT_TIME_SERIES",
                "BEFORE_AFTER_DEPLOYMENT_TIME_SERIES",
                "SERVICE_GUARD_FEEDBACK_ANALYSIS",
                "BEFORE_AFTER_DEPLOYMENT_LOG",
                "CANARY_DEPLOYMENT_LOG",
                "LOG_ANALYSIS",
                "TIME_SERIES_LOAD_TEST",
                "LOG_FEEDBACK"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLearningEngineTask"
            }
          }
        }
      }
    },
    "/log-analysis/test-data": {
      "get": {
        "tags": ["log-analysis"],
        "summary": "get test log data for a verification job",
        "description": "",
        "operationId": "getTestLogData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hosts",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogClusterDTO"
            }
          }
        }
      }
    },
    "/log-analysis/serviceguard-shortterm-history": {
      "get": {
        "tags": ["log-analysis"],
        "summary": "get previous log analysis for a data source config",
        "description": "",
        "operationId": "getPreviousLogAnalysis",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogAnalysisCluster"
            }
          }
        }
      }
    },
    "/log-analysis/log-feedbacks": {
      "get": {
        "tags": ["log-analysis"],
        "summary": "get previous log analysis for a data source config",
        "description": "",
        "operationId": "getLogFeedbackList",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogFeedback"
            }
          }
        }
      }
    },
    "/log-analysis/serviceguard-save-analysis": {
      "post": {
        "tags": ["log-analysis"],
        "summary": "saves log risk analysis for a data source config",
        "description": "",
        "operationId": "saveServiceGuardLogAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogAnalysisDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/log-analysis/deployment-save-analysis": {
      "post": {
        "tags": ["log-analysis"],
        "summary": "saves log risk analysis for a deployment verification",
        "description": "",
        "operationId": "saveDeploymentAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentLogAnalysisDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/log-analysis/previous-analysis": {
      "get": {
        "tags": ["log-analysis"],
        "summary": "get previous deployment analysis result for next task",
        "description": "",
        "operationId": "getPreviousDeploymentAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDeploymentLogAnalysisDTO"
            }
          }
        }
      }
    },
    "/log-cluster/test-data": {
      "get": {
        "tags": ["log-cluster"],
        "summary": "get test log data for a clustering",
        "description": "",
        "operationId": "getTestLogDataForClustering",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterLevel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["L1", "L2"]
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "host",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogClusterDTO"
            }
          }
        }
      }
    },
    "/log-cluster/save-clustered-logs": {
      "post": {
        "tags": ["log-cluster"],
        "summary": "saves clustered log data",
        "description": "",
        "operationId": "saveClusteredData",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterLevel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["L1", "L2"]
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogClusterDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/log-cluster/l1-test-verification-test-data": {
      "get": {
        "tags": ["log-cluster"],
        "summary": "get test log data of L1 clustering",
        "description": "",
        "operationId": "getL1LogClusteringDataForTestVerification",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "baselineVerificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogClusterDTO"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-serviceguard-cumulative-sums": {
      "get": {
        "tags": ["timeseries-analysis"],
        "summary": "get risk analysis cumulative sums",
        "description": "",
        "operationId": "getCumulativeSums",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMapStringMapStringListMetricSumDTO"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-serviceguard-shortterm-history": {
      "get": {
        "tags": ["timeseries-analysis"],
        "summary": "get short term history for a data source config",
        "description": "",
        "operationId": "getShortTermHistory",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMapStringMapStringListDouble"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-serviceguard-metric-template": {
      "get": {
        "tags": ["timeseries-analysis"],
        "summary": "get metric template for a verification job",
        "description": "",
        "operationId": "getMetricTimeSeriesTemplate",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesMetricDefinition"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-serviceguard-save-analysis": {
      "post": {
        "tags": ["timeseries-analysis"],
        "summary": "save time series analysis for a data source config",
        "description": "",
        "operationId": "saveServiceGuardTimeseriesAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceGuardTimeSeriesAnalysisDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/timeseries-analysis/time-series-data": {
      "get": {
        "tags": ["timeseries-analysis"],
        "summary": "get test timeseries data for a verification job and risk analysis",
        "description": "",
        "operationId": "getTimeSeriesRecords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hosts",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesRecordDTO"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-serviceguard-previous-anomalies": {
      "get": {
        "tags": ["timeseries-analysis"],
        "summary": "get previous anomalies for a data source config",
        "description": "",
        "operationId": "getPreviousAnomalies",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMapStringMapStringListTimeSeriesAnomaliesDTO"
            }
          }
        }
      }
    },
    "/timeseries-analysis/timeseries-verification-task-save-analysis": {
      "post": {
        "tags": ["timeseries-analysis"],
        "summary": "save time series analysis for a deployment verification",
        "description": "",
        "operationId": "saveVerificationTaskAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentTimeSeriesAnalysisDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/trend-analysis/service-guard-trend-test-data": {
      "get": {
        "tags": ["trend-analysis"],
        "summary": "save time series data for trend analysis",
        "description": "",
        "operationId": "getTestDataForTrend",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verificationTaskId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisStartTime",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisEndTime",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesRecordDTO"
            }
          }
        }
      }
    },
    "/trend-analysis/trend-metric-template": {
      "get": {
        "tags": ["trend-analysis"],
        "summary": "get metric template for analysis",
        "description": "",
        "operationId": "getMetricTimeSeriesTemplateForTrend",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesMetricDefinition"
            }
          }
        }
      }
    },
    "/trend-analysis/service-guard-trend-save-analysis": {
      "post": {
        "tags": ["trend-analysis"],
        "summary": "save time series analysis",
        "description": "",
        "operationId": "saveServiceGuardTrendAnalysis",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceGuardTimeSeriesAnalysisDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/all-transaction-names": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get all the transaction names",
        "description": "",
        "operationId": "getVerifyStepTransactionNames",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListString"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/all-node-names": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get all the Node names",
        "description": "",
        "operationId": "getVerifyStepNodeNames",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSetString"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-activity-summary": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get summary of deployment activity",
        "description": "",
        "operationId": "getVerifyStepDeploymentActivitySummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDeploymentActivitySummaryDTO"
            }
          }
        }
      }
    },
    "/verify-step/input-set-template": {
      "post": {
        "tags": ["verify-step"],
        "summary": "Given a template Add verify step to it if required",
        "description": "",
        "operationId": "inputSetTemplate",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputSetTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetTemplateResponse"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/healthSources": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get health sources  for an activity",
        "description": "",
        "operationId": "getVerifyStepHealthSources",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSetHealthSourceDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/execution-logs-debugging": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get execution logs debug",
        "description": "",
        "operationId": "getVerifyStepExecutionLogs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListProgressLog"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-timeseries-data": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get metrics for given activity",
        "description": "",
        "operationId": "getVerifyStepDeploymentMetrics",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "anomalousMetricsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transactionNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "anomalousNodesOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTransactionMetricInfoSummaryPageDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/logs": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get verify step logs",
        "description": "",
        "operationId": "getVerifyStepLogs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["ApiCallLog", "ExecutionLog"]
          },
          {
            "name": "errorLogsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageCVNGLogDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/clusters": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get logs for given activity",
        "description": "",
        "operationId": "getVerifyStepDeploymentLogAnalysisClusters",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogAnalysisClusterChartDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-log-analysis-radar-chart-clusters": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get radar chart logs clusters for given verify step",
        "description": "",
        "operationId": "getVerifyStepDeploymentRadarChartLogAnalysisClusters",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogAnalysisRadarChartClusterDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-log-analysis-radar-chart-data": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get radar chart logs list for given verify step",
        "description": "",
        "operationId": "getVerifyStepDeploymentLogAnalysisRadarChartResult",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogAnalysisRadarChartListWithCountDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-log-analysis-data": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get logs for given activity",
        "description": "",
        "operationId": "getVerifyStepDeploymentLogAnalysisResult",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageLogAnalysisClusterDTO"
            }
          }
        }
      }
    },
    "/verify-step/{verifyStepExecutionId}/deployment-log-analysis-data-v2": {
      "get": {
        "tags": ["verify-step"],
        "summary": "get logs for given activity",
        "description": "",
        "operationId": "getVerifyStepDeploymentLogAnalysisResultV2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogAnalysisClusterWithCountDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/orgs/{orgIdentifier}/projects/{projectIdentifier}/verifications/{verifyStepExecutionId}/health-sources": {
      "get": {
        "tags": [
          "account{accountIdentifier}orgs{orgIdentifier}projects{projectIdentifier}verifications{verifyStepExecutionId}"
        ],
        "summary": "get all the health sources",
        "description": "",
        "operationId": "getHealthSourcesForVerifyStepExecutionId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthSourceV2"
              }
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/orgs/{orgIdentifier}/projects/{projectIdentifier}/verifications/{verifyStepExecutionId}/analysis/metrics": {
      "get": {
        "tags": [
          "account{accountIdentifier}orgs{orgIdentifier}projects{projectIdentifier}verifications{verifyStepExecutionId}"
        ],
        "summary": "get metrics analysis for given verifyStepExecutionId",
        "description": "",
        "operationId": "getMetricsAnalysisForVerifyStepExecutionId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "anomalousMetricsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "healthSource",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transactionGroup",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "node",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PageMetricsAnalysis"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/orgs/{orgIdentifier}/projects/{projectIdentifier}/verifications/{verifyStepExecutionId}/transaction-groups": {
      "get": {
        "tags": [
          "account{accountIdentifier}orgs{orgIdentifier}projects{projectIdentifier}verifications{verifyStepExecutionId}"
        ],
        "summary": "get all the transaction groups",
        "description": "",
        "operationId": "getTransactionGroupsForVerifyStepExecutionId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/orgs/{orgIdentifier}/projects/{projectIdentifier}/verifications/{verifyStepExecutionId}/overview": {
      "get": {
        "tags": [
          "account{accountIdentifier}orgs{orgIdentifier}projects{projectIdentifier}verifications{verifyStepExecutionId}"
        ],
        "summary": "get verification overview for given verifyStepExecutionId",
        "description": "",
        "operationId": "getVerificationOverviewForVerifyStepExecutionId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "verifyStepExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerificationOverview"
            }
          }
        }
      }
    },
    "/appdynamics/applications": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics applications",
        "description": "",
        "operationId": "getAppdynamicsApplications",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageAppDynamicsApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/metric-data": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics metric data for an application and a metric path",
        "description": "",
        "operationId": "getAppdynamicsMetricDataByPath",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseFolder",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricPath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "routingId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseAppdynamicsMetricDataResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["appdynamics"],
        "summary": "get metric data for given metric packs",
        "description": "",
        "operationId": "getAppdynamicsMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tierName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricPackDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSetAppdynamicsValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/metric-data/v2": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics metric data for an application and a complete metric path",
        "description": "",
        "operationId": "getAppdynamicsMetricDataByPathV2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "completeMetricPath",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseAppdynamicsMetricDataResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/tiers": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics tiers for an application",
        "description": "",
        "operationId": "getAppdynamicsTiers",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageAppDynamicsTier"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/base-folders": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics base folders for an application",
        "description": "",
        "operationId": "getAppdynamicsBaseFolders",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "routingId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/metric-structure": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get all appdynamics metric structure for an application",
        "description": "",
        "operationId": "getAppdynamicsMetricStructure",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseFolder",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricPath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "routingId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListAppDynamicsFileDefinition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/appdynamics/service-instance-metric-path": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get service instance metric path for an application and a metric path",
        "description": "",
        "operationId": "getServiceInstanceMetricPath",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseFolder",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricPath",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "routingId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/appdynamics/complete-service-instance-metric-path": {
      "get": {
        "tags": ["appdynamics"],
        "summary": "get complete service instance metric path for an application and a complete metric path",
        "description": "",
        "operationId": "getCompleteServiceInstanceMetricPath",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "completeMetricPath",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/prometheus/workspaces": {
      "get": {
        "tags": ["aws"],
        "summary": "get Prometheus Workspaces",
        "description": "",
        "operationId": "getPrometheusWorkspaces",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListAwsPrometheusWorkspaceDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/aws/regions": {
      "get": {
        "tags": ["aws"],
        "summary": "get regions",
        "description": "",
        "operationId": "getAllAwsRegions",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cv-config/product-names": {
      "get": {
        "tags": ["cv-config"],
        "summary": "gets a list of supported products",
        "description": "",
        "operationId": "getProductNames",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListString"
            }
          }
        }
      }
    },
    "/cvng-log": {
      "get": {
        "tags": ["cvng-log"],
        "summary": "gets onboarding api call logs",
        "description": "",
        "operationId": "getOnboardingLogs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "traceableId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageCVNGLogDTO"
            }
          }
        }
      },
      "post": {
        "tags": ["cvng-log"],
        "summary": "saves cvng log data",
        "description": "",
        "operationId": "saveCVNGLogRecords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CVNGLogDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/partial-yaml-schema": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema",
        "description": "",
        "operationId": "getPartialYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListPartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get step YAML schema",
        "description": "",
        "operationId": "getStepYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "name": "entityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatePR",
              "GITOPS_MERGE_PR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "ServiceNowImportSet",
              "GovernancePolicies",
              "POLICY_STEP",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "AquaTrivy",
              "AWSECR",
              "Bandit",
              "BlackDuck",
              "Brakeman",
              "Burp",
              "Checkmarx",
              "Clair",
              "DataTheorem",
              "DockerContentTrust",
              "External",
              "FortifyOnDemand",
              "Grype",
              "JfrogXray",
              "Mend",
              "Metasploit",
              "Nessus",
              "NexusIQ",
              "Nikto",
              "Nmap",
              "Openvas",
              "Owasp",
              "PrismaCloud",
              "Prowler",
              "Qualys",
              "Reapsaw",
              "ShiftLeft",
              "Sniper",
              "Snyk",
              "Sonarqube",
              "Sysdig",
              "Tenable",
              "Veracode",
              "Zap",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AZURE_SLOT_DEPLOYMENT_STEP",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback",
              "ShellScriptProvision",
              "Freeze",
              "GitOpsUpdateReleaseRepo",
              "GitOpsFetchLinkedApps",
              "EcsRunTask",
              "Chaos",
              "ElastigroupDeploy",
              "ElastigroupRollback",
              "Action",
              "ElastigroupSetup",
              "Bitrise",
              "TerraformPlan",
              "TerraformApply",
              "TerraformDestroy",
              "TerraformRollback",
              "IACMStage",
              "IACMStep",
              "IACM",
              "Container",
              "IACM",
              "IACM",
              "ElastigroupBGStageSetup",
              "ElastigroupSwapRoute",
              "AsgCanaryDeploy",
              "AsgCanaryDelete",
              "SwapRoutes",
              "SwapRollback",
              "AppResize",
              "AppRollback",
              "CanaryAppSetup",
              "BGAppSetup",
              "BasicAppSetup",
              "TanzuCommand",
              "AsgRollingDeploy",
              "AsgRollingRollback",
              "GovernanceRuleAWS",
              "TasRollingDeploy",
              "TasRollingRollback",
              "K8sDryRun",
              "AsgBlueGreenSwapService",
              "AsgBlueGreenDeploy",
              "AsgBlueGreenRollback",
              "TerraformCloudRun",
              "TerraformCloudRollback",
              "DeployCloudFunction",
              "DeployCloudFunctionWithNoTraffic",
              "CloudFunctionTrafficShift",
              "CloudFunctionRollback",
              "AwsLambdaDeploy",
              "AwsSamDeploy",
              "AwsSamRollback",
              "SscaOrchestration",
              "AwsLambdaRollback",
              "GITOPS_SYNC",
              "BambooBuild",
              "CdSscaOrchestration",
              "RouteMapping",
              "AWSSecurityHub",
              "CustomIngest",
              "BackstageEnvironmentVariable",
              "Fossa",
              "CodeQL",
              "Gitleaks",
              "DeployCloudFunctionGenOne",
              "RollbackCloudFunctionGenOne",
              "K8sBlueGreenStageScaleDown"
            ]
          },
          {
            "name": "yamlGroup",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/YamlSchemaDetailsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJsonNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/details": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema with details",
        "description": "",
        "operationId": "getPartialYamlSchemaWithDetails",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseYamlSchemaDetailsWrapper"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/merged": {
      "post": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Merged Partial Yaml Schema",
        "description": "",
        "operationId": "getMergedPartialYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/YamlSchemaDetailsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListPartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/change-event/monitored-service-summary": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent summary for monitored service For Account",
        "description": "",
        "operationId": "getMonitoredServiceChangeEventSummaryForAccount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeSummaryDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/change-event/timeline": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent timeline For Account",
        "description": "",
        "operationId": "changeEventTimelineForAccount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pointCount",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 48,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeTimeline"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/change-event": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent List For Account",
        "description": "",
        "operationId": "changeEventListForAccount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageChangeEventDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event/{activityId}": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent detail",
        "description": "",
        "operationId": "getChangeEventDetail",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeEventDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event/monitored-service-summary": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent summary for monitored service For Project",
        "description": "",
        "operationId": "getMonitoredServiceChangeEventSummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeSummaryDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent List For Project",
        "description": "",
        "operationId": "changeEventList",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 50,
            "maximum": 100,
            "format": "int32"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageChangeEventDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event/timeline": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent timeline For Project",
        "description": "",
        "operationId": "changeEventTimeline",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "scopedMonitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pointCount",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 48,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeTimeline"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event/summary": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent summary",
        "description": "",
        "operationId": "changeEventSummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeSummaryDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/change-event/register": {
      "post": {
        "tags": ["change-event"],
        "summary": "register a ChangeEvent",
        "description": "",
        "operationId": "registerChangeEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/change-event/register-change": {
      "post": {
        "tags": ["change-event"],
        "summary": "register a ChangeEvent",
        "description": "",
        "operationId": "registerChangeEventFromDelegate",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/change-event/monitored-service-summary": {
      "get": {
        "tags": ["change-event"],
        "summary": "get ChangeEvent summary for monitored service",
        "description": "",
        "operationId": "getMonitoredServiceChangeEventSummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isMonitoredServiceIdentifierScoped",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "changeCategories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeSummaryDTO"
            }
          }
        }
      }
    },
    "/change-event/monitored-service-timeline": {
      "get": {
        "tags": ["change-event"],
        "summary": "get monitored service timeline with durationDTO",
        "description": "",
        "operationId": "getMonitoredServiceChangeTimeline",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "changeSourceTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["FOUR_HOURS", "TWENTY_FOUR_HOURS", "THREE_DAYS", "SEVEN_DAYS", "THIRTY_DAYS"]
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseChangeTimeline"
            }
          }
        }
      }
    },
    "/demo/register-event": {
      "post": {
        "tags": ["demo"],
        "summary": "register a ChangeEvent",
        "description": "",
        "operationId": "registerChangeEventDemo",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DemoChangeEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/cloudwatch/metrics/fetch-sample-data": {
      "get": {
        "tags": ["cloudwatch"],
        "summary": "get sample data for given query",
        "description": "",
        "operationId": "getSampleDataForQuery",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "expression",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "metricIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMap"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cloudwatch/metrics/regions": {
      "get": {
        "tags": ["cloudwatch"],
        "summary": "get regions",
        "description": "",
        "operationId": "getRegions",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/custom-health/sample-data": {
      "post": {
        "tags": ["customhealth"],
        "summary": "get sample data",
        "description": "",
        "operationId": "fetchSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomHealthSampleDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseObject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/delegate-data-collection": {
      "post": {
        "tags": ["delegate-data-collection"],
        "summary": "save time series records",
        "description": "",
        "operationId": "saveTimeSeriesData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataCollectionRecord"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/delegate-data-collection-task/next-task": {
      "get": {
        "tags": ["delegate-data-collection-task"],
        "summary": "gets next task for data collection",
        "description": "",
        "operationId": "getNextDataCollectionTask",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataCollectionWorkerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseOptionalDataCollectionTaskDTO"
            }
          }
        }
      }
    },
    "/delegate-data-collection-task/update-status": {
      "post": {
        "tags": ["delegate-data-collection-task"],
        "summary": "updates status for data collection task",
        "description": "",
        "operationId": "updateDataCollectionTask",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataCollectionTaskResult"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/delegate-data-collection-task/next-tasks": {
      "get": {
        "tags": ["delegate-data-collection-task"],
        "summary": "gets next tasks for data collection",
        "description": "",
        "operationId": "getNextDataCollectionTasks",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataCollectionWorkerId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListDataCollectionTaskDTO"
            }
          }
        }
      }
    },
    "/datadog-logs/sample-data": {
      "post": {
        "tags": ["datadog-logs"],
        "summary": "get sample data for a query",
        "description": "",
        "operationId": "getDatadogLogSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogSampleRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListLinkedHashMap"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-logs/log-indexes": {
      "get": {
        "tags": ["datadog-logs"],
        "summary": "get datadog log indexes",
        "description": "",
        "operationId": "getDatadogLogIndexes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/sample-data": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get datadog sample data",
        "description": "",
        "operationId": "getDatadogSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListTimeSeriesSampleDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/dashboards": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get all datadog dashboards",
        "description": "",
        "operationId": "getDatadogDashboards",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageDatadogDashboardDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/dashboard-details": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get datadog dashboard details",
        "description": "",
        "operationId": "getDatadogDashboardDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dashboardId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListDatadogDashboardDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/active-metrics": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get datadog active metrics",
        "description": "",
        "operationId": "getDatadogActiveMetrics",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/metric-tags": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get datadog metric tag list",
        "description": "",
        "operationId": "getDatadogMetricTagsList",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/datadog-metrics/metric-tags-v2": {
      "get": {
        "tags": ["datadog-metrics"],
        "summary": "get datadog metric tag list",
        "description": "",
        "operationId": "getDatadogMetricTags",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMetricTagResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/debug/health-source-spec": {
      "post": {
        "tags": ["debug"],
        "summary": "get health source spec",
        "description": "",
        "operationId": "getHealthSourceSpec",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseHealthSourceSpec"
            }
          }
        }
      }
    },
    "/dynatrace/services": {
      "get": {
        "tags": ["dynatrace"],
        "summary": "get all dynatrace services",
        "description": "",
        "operationId": "getDynatraceServices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListDynatraceServiceDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dynatrace/metrics": {
      "get": {
        "tags": ["dynatrace"],
        "summary": "get all dynatrace service metrics",
        "description": "",
        "operationId": "getAllDynatraceServiceMetrics",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListDynatraceMetricDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dynatrace/service-details": {
      "get": {
        "tags": ["dynatrace"],
        "summary": "get dynatrace service details",
        "description": "",
        "operationId": "getDynatraceServiceDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDynatraceServiceDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dynatrace/metric-data": {
      "post": {
        "tags": ["dynatrace"],
        "summary": "get metric data for given metric packs",
        "description": "",
        "operationId": "getDynatraceMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DynatraceValidateDataRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSetMetricPackValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dynatrace/fetch-sample-data": {
      "post": {
        "tags": ["dynatrace"],
        "summary": "get dynatrace sample data",
        "description": "",
        "operationId": "getDynatraceSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DynatraceSampleDataRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListTimeSeriesSampleDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/elk/sample-data": {
      "post": {
        "tags": ["elk"],
        "summary": "get sample data for a query",
        "description": "",
        "operationId": "getELKLogSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogSampleRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListLinkedHashMap"
            }
          }
        }
      }
    },
    "/elk/indices": {
      "get": {
        "tags": ["elk"],
        "summary": "gets indices in ELK",
        "description": "",
        "operationId": "getELKIndices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          }
        }
      }
    },
    "/health/time-format": {
      "get": {
        "tags": ["health"],
        "summary": "get time formats for Health Source",
        "description": "",
        "operationId": "getTimeFormat",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          }
        }
      }
    },
    "/health/ping": {
      "get": {
        "tags": ["health"],
        "summary": "an http ping API, to check if service is alive",
        "description": "",
        "operationId": "srmPing",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "get health for CVNG service",
        "description": "",
        "operationId": "getCvHealthStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/health-source/log-records": {
      "post": {
        "tags": ["health-source-records"],
        "summary": "Fetch log records by submitting a query to the health source provider.",
        "description": "",
        "operationId": "getSampleLogData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/QueryRecordsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogRecordsResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/health-source/records": {
      "post": {
        "tags": ["health-source-records"],
        "summary": "Fetch health source raw records by submitting a query to the health source provider.",
        "description": "",
        "operationId": "getSampleRawRecord",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HealthSourceRecordsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseHealthSourceRecordsResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/health-source/metric-records": {
      "post": {
        "tags": ["health-source-records"],
        "summary": "Fetch metric records by submitting a query to the health source provider.",
        "description": "",
        "operationId": "getSampleMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/QueryRecordsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMetricRecordsResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/health-source/param-values": {
      "post": {
        "tags": ["health-source-records"],
        "summary": "Fetch possible values for healthSourceParams and healthSourceQueryParams",
        "description": "",
        "operationId": "getParamValues",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HealthSourceParamValuesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseHealthSourceParamValuesResponse"
            }
          }
        }
      }
    },
    "/host-record": {
      "post": {
        "tags": ["host-record"],
        "summary": "saves hosts collected while doing canary verification",
        "description": "",
        "operationId": "saveVerificationHostRecords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostRecordDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/log-feedback/{logFeedbackId}/ticket": {
      "post": {
        "tags": ["log-feedback"],
        "summary": "creates ticket for log feedback",
        "description": "",
        "operationId": "createTicketForFeedback",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logFeedbackId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketRequestDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketResponseDto"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/log-feedback": {
      "post": {
        "tags": ["log-feedback"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "saveLogFeedback",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogFeedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogFeedback"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/log-feedback/{logFeedbackId}": {
      "get": {
        "tags": ["log-feedback"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "getLogFeedback",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logFeedbackId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogFeedback"
            }
          }
        }
      },
      "put": {
        "tags": ["log-feedback"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "updateLogFeedback",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logFeedbackId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogFeedback"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseLogFeedback"
            }
          }
        }
      },
      "delete": {
        "tags": ["log-feedback"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "deleteLogFeedback",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logFeedbackId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/log-feedback/{logFeedbackId}/history": {
      "get": {
        "tags": ["log-feedback"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "getFeedbackHistory",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logFeedbackId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLogFeedbackHistory"
            }
          }
        }
      }
    },
    "/log-record": {
      "post": {
        "tags": ["log-record"],
        "summary": "saves log data collected for verification",
        "description": "",
        "operationId": "saveLogRecords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogRecordDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/metric-pack": {
      "get": {
        "tags": ["metric-pack"],
        "summary": "get all metric packs for a connector type",
        "description": "",
        "operationId": "getMetricPacks",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListMetricPackDTO"
            }
          }
        }
      },
      "post": {
        "tags": ["metric-pack"],
        "summary": "saves a metric pack for a connector type",
        "description": "",
        "operationId": "saveMetricPacks",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricPack"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/overall-health-score": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service overall health score data ",
        "description": "",
        "operationId": "getMonitoredServiceOverAllHealthScore",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["FOUR_HOURS", "TWENTY_FOUR_HOURS", "THREE_DAYS", "SEVEN_DAYS", "THIRTY_DAYS"]
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseHistoricalTrend"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/health-monitoring-flag": {
      "put": {
        "tags": ["monitored-service"],
        "summary": "updates monitored service data",
        "description": "",
        "operationId": "setHealthMonitoringFlag",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseHealthMonitoringFlagResponse"
            }
          }
        }
      }
    },
    "/monitored-service/health-sources": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get all health sources for service and environment",
        "description": "",
        "operationId": "getAllHealthSourcesForServiceAndEnvironment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListHealthSourceDTO"
            }
          }
        }
      }
    },
    "/monitored-service": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "list monitored service data ",
        "description": "",
        "operationId": "listMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "environmentIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "servicesAtRiskFilter",
            "in": "query",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageMonitoredServiceListItemDTO"
            }
          }
        }
      },
      "post": {
        "tags": ["monitored-service"],
        "summary": "saves monitored service data",
        "description": "",
        "operationId": "saveMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MonitoredServiceDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service data ",
        "description": "",
        "operationId": "getMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMonitoredServiceResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["monitored-service"],
        "summary": "updates monitored service data",
        "description": "",
        "operationId": "updateMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MonitoredServiceDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["monitored-service"],
        "summary": "delete monitored service data ",
        "description": "",
        "operationId": "deleteMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/scores": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service scores",
        "description": "",
        "operationId": "getMonitoredServiceScores",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseHealthScoreDTO"
            }
          }
        }
      }
    },
    "/monitored-service/environments": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service list environments data ",
        "description": "",
        "operationId": "getMonitoredServiceListEnvironments",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListEnvironmentResponse"
            }
          }
        }
      }
    },
    "/monitored-service/yaml-template": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "yaml template for monitored service",
        "description": "",
        "operationId": "getMonitoredServiceYamlTemplate",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["Application", "Infrastructure"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/anomaliesCount": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get anomalies summary details",
        "description": "",
        "operationId": "getAnomaliesSummary",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnomaliesSummaryDTO"
            }
          }
        }
      }
    },
    "/monitored-service/count-of-services": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get count of types of services like Monitored Service, Services at Risk ",
        "description": "",
        "operationId": "getCountOfServices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountServiceDTO"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/health-source/{healthSourceIdentifier}/slo-metrics": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get slo metrics in a healthSource ",
        "description": "",
        "operationId": "getSloMetrcs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "healthSourceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListMetricDTO"
            }
          }
        }
      }
    },
    "/monitored-service/service-details": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get details of a monitored service present in the Service Dependency Graph",
        "description": "",
        "operationId": "getMonitoredServiceDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MonitoredServiceListItemDTO"
            }
          }
        },
        "deprecated": true
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/service-details": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get details of a monitored service present in the Service Dependency Graph",
        "description": "",
        "operationId": "getMonitoredServiceDetailsWithServiceId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MonitoredServiceListItemDTO"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/logs": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service logs",
        "description": "",
        "operationId": "getMonitoredServiceLogs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["ApiCallLog", "ExecutionLog"]
          },
          {
            "name": "errorLogsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageCVNGLogDTO"
            }
          }
        }
      }
    },
    "/monitored-service/list": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get list of monitored service data ",
        "description": "",
        "operationId": "getMonitoredServiceList",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "environmentIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/yaml": {
      "put": {
        "tags": ["monitored-service"],
        "summary": "update monitored service from yaml or template",
        "description": "",
        "operationId": "updateMonitoredServiceFromYaml",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/all/time-series-health-sources": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get all of monitored service data with time series health sources ",
        "description": "",
        "operationId": "getAllMonitoredServicesWithTimeSeriesHealthSources",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListMonitoredServiceWithHealthSources"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/change-details": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service change details",
        "description": "",
        "operationId": "getMonitoredServiceChangeDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sloIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListMonitoredServiceChangeDetailSLO"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/notification-rules": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get notification rules for MonitoredService",
        "description": "",
        "operationId": "getNotificationRulesForMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageNotificationRuleResponse"
            }
          }
        }
      }
    },
    "/monitored-service/template-input": {
      "post": {
        "tags": ["monitored-service"],
        "summary": "saves monitored service from template input",
        "description": "",
        "operationId": "saveMonitoredServiceFromTemplateInput",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/{identifier}/template-input": {
      "put": {
        "tags": ["monitored-service"],
        "summary": "update monitored service from yaml or template",
        "description": "",
        "operationId": "updateMonitoredServiceFromTemplateInput",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/yaml": {
      "post": {
        "tags": ["monitored-service"],
        "summary": "saves monitored service from yaml or template",
        "description": "",
        "operationId": "saveMonitoredServiceFromYaml",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/create-default": {
      "post": {
        "tags": ["monitored-service"],
        "summary": "created default monitored service",
        "description": "",
        "operationId": "createDefaultMonitoredService",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/service-environment": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get monitored service data from service and env ref",
        "description": "",
        "operationId": "getMonitoredServiceFromServiceAndEnvironment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMonitoredServiceResponse"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/health-sources": {
      "get": {
        "tags": ["monitored-service"],
        "summary": "get all health sources for service and environment",
        "description": "",
        "operationId": "getAllHealthSourcesForMonitoredServiceIdentifier",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListHealthSourceDTO"
            }
          }
        }
      }
    },
    "/newrelic/applications": {
      "get": {
        "tags": ["newrelic"],
        "summary": "get all newrelic applications",
        "description": "",
        "operationId": "getNewRelicApplications",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListNewRelicApplication"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/newrelic/endpoints": {
      "get": {
        "tags": ["newrelic"],
        "summary": "get all newrelic endpoints",
        "description": "",
        "operationId": "getNewRelicEndPoints",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/newrelic/metric-data": {
      "post": {
        "tags": ["newrelic"],
        "summary": "get metric data for given metric packs",
        "description": "",
        "operationId": "getNewRelicMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricPackDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMetricPackValidationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/newrelic/fetch-sample-data": {
      "get": {
        "tags": ["newrelic"],
        "summary": "get sample data for given nrql",
        "description": "",
        "operationId": "getSampleDataForNRQL",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nrql",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseLinkedHashMap"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/onboarding/connector": {
      "get": {
        "tags": ["onboarding"],
        "summary": "connector api response",
        "description": "",
        "operationId": "validateConnector",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseVoid"
            }
          }
        }
      }
    },
    "/onboarding": {
      "post": {
        "tags": ["onboarding"],
        "summary": "onboarding api response",
        "description": "",
        "operationId": "getOnboardingResponse",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OnboardingRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseOnboardingResponseDTO"
            }
          }
        }
      }
    },
    "/pagerduty/services": {
      "get": {
        "tags": ["pagerduty"],
        "summary": "gets services from PagerDuty",
        "description": "",
        "operationId": "getServicesFromPagerDuty",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListPagerDutyServiceDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/parse-sample-data": {
      "post": {
        "tags": ["parseSampleDara"],
        "summary": "parse sample data for given json response",
        "description": "",
        "operationId": "fetchParsedSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SampleDataDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListTimeSeriesSampleDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/prometheus/metric-list": {
      "get": {
        "tags": ["prometheus"],
        "summary": "get all metric names",
        "description": "",
        "operationId": "getMetricNames",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/prometheus/label-names": {
      "get": {
        "tags": ["prometheus"],
        "summary": "get all label names",
        "description": "",
        "operationId": "getLabelNames",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/prometheus/sample-data": {
      "get": {
        "tags": ["prometheus"],
        "summary": "get sample data",
        "description": "",
        "operationId": "getSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListPrometheusSampleData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/prometheus/label-values": {
      "get": {
        "tags": ["prometheus"],
        "summary": "get all label values",
        "description": "",
        "operationId": "getLabeValues",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "labelName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/risk-category": {
      "get": {
        "tags": ["risk-category"],
        "summary": "get risk category for a custom health metric",
        "description": "",
        "operationId": "getRiskCategoryForCustomHealthMetric",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListRiskCategoryDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/sli/onboarding-metric-graphs": {
      "post": {
        "tags": ["monitored-servicesli"],
        "summary": "get metric graphs for onboarding UI",
        "description": "",
        "operationId": "getMetricOnboardingGraph",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "healthSourceRef",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "ratioSLIMetricEventType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["Good", "Bad"]
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseMetricOnboardingGraph"
            }
          }
        }
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/sli/onboarding-graph": {
      "post": {
        "tags": ["monitored-servicesli"],
        "summary": "get Sli graph for onboarding UI",
        "description": "",
        "operationId": "getSliGraph",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelIndicatorDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeGraphResponse"
            }
          }
        },
        "deprecated": true
      }
    },
    "/monitored-service/{monitoredServiceIdentifier}/sli/onboarding-graphs": {
      "post": {
        "tags": ["monitored-servicesli"],
        "summary": "get Sli and metric graphs for onboarding UI",
        "description": "",
        "operationId": "getSliOnboardingGraphs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelIndicatorDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSLIOnboardingGraphs"
            }
          }
        }
      }
    },
    "/splunk/saved-searches": {
      "get": {
        "tags": ["splunk"],
        "summary": "gets saved searches in splunk",
        "description": "",
        "operationId": "getSplunkSavedSearches",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListSplunkSavedSearch"
            }
          }
        }
      }
    },
    "/splunk/sample-data": {
      "get": {
        "tags": ["splunk"],
        "summary": "validates given setting for splunk data source",
        "description": "",
        "operationId": "getSplunkSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLinkedHashMap"
            }
          }
        }
      }
    },
    "/splunk/metric-sample-data": {
      "get": {
        "tags": ["splunk"],
        "summary": "validates given setting for splunk data source",
        "description": "",
        "operationId": "getSplunkMetricSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSortedSetTimeSeriesSampleDTO"
            }
          }
        }
      }
    },
    "/splunk/latest-histogram": {
      "get": {
        "tags": ["splunk"],
        "summary": "get latest histogram for the query",
        "description": "",
        "operationId": "getSplunkLatestHistogram",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestGuid",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLinkedHashMap"
            }
          }
        }
      }
    },
    "/stackdriver-log/sample-data": {
      "post": {
        "tags": ["stackdriver-log"],
        "summary": "get sample data for a query",
        "description": "",
        "operationId": "getStackdriverLogSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogSampleRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListLinkedHashMap"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/stackdriver/sample-data": {
      "post": {
        "tags": ["stackdriver"],
        "summary": "get sample data for one metric",
        "description": "",
        "operationId": "getStackdriverSampleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSetTimeSeriesSampleDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/stackdriver/dashboards": {
      "get": {
        "tags": ["stackdriver"],
        "summary": "get all stackdriver dashboards",
        "description": "",
        "operationId": "getStackdriverDashboards",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageStackdriverDashboardDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/stackdriver/dashboard-detail": {
      "get": {
        "tags": ["stackdriver"],
        "summary": "get details about one dashboard",
        "description": "",
        "operationId": "getStackdriverDashboardDetail",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "tracingId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListStackdriverDashboardDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sumologic/endpoints": {
      "get": {
        "tags": ["sumologic"],
        "summary": "get all sumologic endpoints",
        "description": "",
        "operationId": "getSumoLogicEndPoints",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/timeseries/metric-template": {
      "get": {
        "tags": ["timeseries"],
        "summary": "get metric definition for a given data source config",
        "description": "",
        "operationId": "getMetricDefinitions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "cvConfigId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListTimeSeriesMetricDefinition"
            }
          }
        }
      }
    },
    "/timeseries/metric-group-data": {
      "get": {
        "tags": ["timeseries"],
        "summary": "get time series data for a given data source config",
        "description": "",
        "operationId": "getTimeSeriesData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "cvConfigId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTimeEpochMillis",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTimeEpochMillis",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metricName",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupNameList",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeSeriesTestDataDTO"
            }
          }
        }
      }
    },
    "/timeseries/anomalous-metric-data": {
      "get": {
        "tags": ["timeseries"],
        "summary": "get all anomalous metric timeseries data a given data source config",
        "description": "",
        "operationId": "getAnomalousMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "cvConfigId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeSeriesTestDataDTO"
            }
          }
        }
      }
    },
    "/webhook/pagerduty/{token}": {
      "post": {
        "tags": ["webhook"],
        "summary": "accepts a webhook request",
        "description": "",
        "operationId": "handleWebhookRequest",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PagerDutyWebhookEvent"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webhook/custom-change": {
      "post": {
        "tags": ["webhook"],
        "summary": "accepts a custom change webhook request",
        "description": "",
        "operationId": "handleCustomChangeWebhookRequest",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "changeSourceIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomChangeWebhookPayload"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/error-tracking-dashboard/data": {
      "get": {
        "tags": ["error-tracking-dashboard"],
        "summary": "get all error tracking data for a time range",
        "description": "",
        "operationId": "getAllErrorTrackingData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["KNOWN", "UNEXPECTED", "UNKNOWN"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageAnalyzedLogDataDTO"
            }
          }
        }
      }
    },
    "/error-tracking-dashboard/cluster": {
      "get": {
        "tags": ["error-tracking-dashboard"],
        "summary": "get all log cluster data for a time range",
        "description": "",
        "operationId": "getAllErrorTrackingClusterData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["KNOWN", "UNEXPECTED", "UNKNOWN"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLiveMonitoringLogAnalysisClusterDTO"
            }
          }
        }
      }
    },
    "/log-dashboard/logs-radar-chart-data": {
      "get": {
        "tags": ["log-dashboard"],
        "summary": "get all log data for a time range and filters",
        "description": "",
        "operationId": "getAllRadarChartLogsData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnalyzedRadarChartLogDataWithCountDTO"
            }
          }
        }
      }
    },
    "/log-dashboard/logs-radar-chart-cluster": {
      "get": {
        "tags": ["log-dashboard"],
        "summary": "get all log cluster data for a time range and filters",
        "description": "",
        "operationId": "getAllRadarChartLogsClusterData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "clusterTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "minAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "maxAngle",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "clusterId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListLiveMonitoringLogAnalysisRadarChartClusterDTO"
            }
          }
        }
      }
    },
    "/service-dependency-graph": {
      "get": {
        "tags": ["service-dependency-graph"],
        "summary": "get service dependency graph",
        "description": "",
        "operationId": "getServiceDependencyGraph",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "servicesAtRiskFilter",
            "in": "query",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceDependencyGraphDTO"
            }
          }
        }
      }
    },
    "/timeseries-dashboard/metrics": {
      "get": {
        "tags": ["timeseries-dashboard"],
        "summary": "get all time series data in a given time range",
        "description": "",
        "operationId": "getTimeSeriesMetricData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "anomalous",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageTimeSeriesMetricDataDTO"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime": {
      "post": {
        "tags": ["Downtime"],
        "summary": "saves downtime",
        "description": "",
        "operationId": "saveDowntime",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DowntimeDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDowntimeResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/identifier/{identifier}": {
      "get": {
        "tags": ["Downtime"],
        "summary": "get downtime data",
        "description": "",
        "operationId": "getDowntime",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDowntimeResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Downtime"],
        "summary": "update downtime data",
        "description": "",
        "operationId": "updateDowntimeData",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DowntimeDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDowntimeResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Downtime"],
        "summary": "delete downtime data",
        "description": "",
        "operationId": "deleteDowntimeData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/list": {
      "get": {
        "tags": ["Downtime"],
        "summary": "list downtime data",
        "description": "",
        "operationId": "listDowntimes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageDowntimeListView"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/flag/{identifier}": {
      "put": {
        "tags": ["Downtime"],
        "summary": "Enables disables downtime",
        "description": "",
        "operationId": "enablesDisablesDowntime",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseDowntimeResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/history": {
      "get": {
        "tags": ["Downtime"],
        "summary": "Get downtime history data",
        "description": "",
        "operationId": "getHistory",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageDowntimeHistoryView"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/monitored-services/{identifier}": {
      "get": {
        "tags": ["Downtime"],
        "summary": "get associated Monitored Services",
        "description": "",
        "operationId": "getAssociatedMonitoredServices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListMonitoredServiceDetail"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/downtime/monitored-services": {
      "get": {
        "tags": ["Downtime"],
        "summary": "get all monitored services associated with the downtime",
        "description": "",
        "operationId": "getDowntimeAssociatedMonitoredServices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageMSDropdownResponse"
            }
          }
        }
      }
    },
    "/notification-rule": {
      "get": {
        "tags": ["notification-rule"],
        "summary": "get notificationRule data",
        "description": "",
        "operationId": "getNotificationRuleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationRuleIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageNotificationRuleResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["notification-rule"],
        "summary": "saves notificationRule data",
        "description": "",
        "operationId": "saveNotificationRuleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NotificationRuleDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseNotificationRuleResponse"
            }
          }
        }
      }
    },
    "/notification-rule/{identifier}": {
      "put": {
        "tags": ["notification-rule"],
        "summary": "update notificationRule data",
        "description": "",
        "operationId": "updateNotificationRuleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NotificationRuleDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseNotificationRuleResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["notification-rule"],
        "summary": "delete notificationRule data",
        "description": "",
        "operationId": "deleteNotificationRuleData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/annotation": {
      "post": {
        "tags": ["annotation"],
        "summary": "saves annotation",
        "description": "",
        "operationId": "saveAccountLevelAnnotation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnnotationResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/annotation/identifier/{identifier}": {
      "put": {
        "tags": ["annotation"],
        "summary": "updates annotation message",
        "description": "",
        "operationId": "updateAccountLevelAnnotation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnnotationResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["annotation"],
        "summary": "delete annotation",
        "description": "",
        "operationId": "deleteAccountLevelAnnotation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/annotation": {
      "post": {
        "tags": ["annotation"],
        "summary": "saves annotation",
        "description": "",
        "operationId": "saveAnnotation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnnotationResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/annotation/identifier/{identifier}": {
      "put": {
        "tags": ["annotation"],
        "summary": "updates annotation message",
        "description": "",
        "operationId": "updateAnnotation",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseAnnotationResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["annotation"],
        "summary": "delete annotation",
        "description": "",
        "operationId": "deleteAnnotation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/slo-dashboard/widgets/list": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "get slo list view",
        "description": "",
        "operationId": "getSLOHealthListView",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userJourneyIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sliTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Availability", "Latency"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "targetTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Rolling", "Calender"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "evaluationType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["Window", "Request"]
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageSLOHealthListView"
            }
          }
        }
      },
      "post": {
        "tags": ["slo-dashboard"],
        "summary": "get slo list view",
        "description": "",
        "operationId": "getSLOHealthListViewV2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SLODashboardApiFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageSLOHealthListView"
            }
          }
        }
      }
    },
    "/slo-dashboard/unavailable-instances/{identifier}": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "Get Unavailability Instances for SLO",
        "description": "",
        "operationId": "getUnavailabilityInstances",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListUnavailabilityInstancesResponse"
            }
          }
        }
      }
    },
    "/slo-dashboard/secondary-events/{identifier}": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "Get Secondary events data points for SLO",
        "description": "",
        "operationId": "getSecondaryEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListSecondaryEventsResponse"
            }
          }
        }
      }
    },
    "/slo-dashboard/secondary-events-details": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "Get Secondary events details for SLO",
        "description": "",
        "operationId": "getSecondaryEventDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "secondaryEventType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Downtime", "DataCollectionFailure", "Annotation", "ErrorBudgetReset"]
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSecondaryEventDetailsResponse"
            }
          }
        }
      }
    },
    "/slo-dashboard/widget/{identifier}": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "get SLO Dashboard Detail",
        "description": "",
        "operationId": "getSLODetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSLODashboardDetail"
            }
          }
        }
      }
    },
    "/slo-dashboard/widget/{identifier}/consumption": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "get SLO consumption breakdown",
        "description": "",
        "operationId": "getSloConsumptionBreakdownView",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageSLOConsumptionBreakdown"
            }
          }
        }
      }
    },
    "/slo-dashboard/risk-count": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "get all service level objectives count by risk",
        "description": "",
        "operationId": "getServiceLevelObjectivesRiskCount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userJourneyIdentifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sliTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Availability", "Latency"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "targetTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Rolling", "Calender"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "evaluationType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["Window", "Request"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSLORiskCountResponse"
            }
          }
        }
      }
    },
    "/slo-dashboard/monitored-services": {
      "get": {
        "tags": ["slo-dashboard"],
        "summary": "get all monitored services associated with the slos",
        "description": "",
        "operationId": "getSLOAssociatedMonitoredServices",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageMSDropdownResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/composite-slo/onboarding-graph": {
      "post": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "Get onboarding graph for composite slo",
        "description": "",
        "operationId": "getOnboardingGraphNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompositeServiceLevelObjectiveSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeGraphResponse"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2": {
      "get": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "get all service level objectives",
        "description": "",
        "operationId": "getServiceLevelObjectivesNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userJourneys",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sliTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Availability", "Latency"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "targetTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Rolling", "Calender"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "post": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "saves slo data",
        "description": "",
        "operationId": "saveSLODataNg",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelObjectiveV2DTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/identifier/{identifier}": {
      "get": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "get service level objective data",
        "description": "",
        "operationId": "getServiceLevelObjectiveNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "put": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "update slo data",
        "description": "",
        "operationId": "updateSLODataNg",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelObjectiveV2DTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "delete": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "delete slo data",
        "description": "",
        "operationId": "deleteSLODataNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/status-list": {
      "post": {
        "tags": ["account{accountIdentifier}org{orgIdentifier}project{projectIdentifier}slov2"],
        "summary": "get slo list view",
        "description": "",
        "operationId": "getSLOHealthListViewNg",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SLODashboardApiFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageSLOHealthListView"
            }
          }
        }
      }
    },
    "/slo/{identifier}/resetErrorBudget": {
      "post": {
        "tags": ["slo"],
        "summary": "reset Error budget history",
        "description": "",
        "operationId": "resetErrorBudget",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SLOErrorBudgetResetDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseSLOErrorBudgetResetDTO"
            }
          }
        }
      }
    },
    "/slo/{identifier}/errorBudgetResetHistory": {
      "get": {
        "tags": ["slo"],
        "summary": "get error budget reset History",
        "description": "",
        "operationId": "getErrorBudgetResetHistory",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseListSLOErrorBudgetResetDTO"
            }
          }
        }
      }
    },
    "/slo/{identifier}/notification-rules": {
      "get": {
        "tags": ["slo"],
        "summary": "get notification rules for SLO",
        "description": "",
        "operationId": "getNotificationRulesForSLO",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageNotificationRuleResponse"
            }
          }
        }
      }
    },
    "/slo/{identifier}/logs": {
      "get": {
        "tags": ["slo"],
        "summary": "get service level objective logs",
        "description": "",
        "operationId": "getServiceLevelObjectiveLogs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "logType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["ApiCallLog", "ExecutionLog"]
          },
          {
            "name": "errorLogsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponsePageCVNGLogDTO"
            }
          }
        }
      }
    },
    "/slo/v2/composite-slo/onboarding-graph": {
      "post": {
        "tags": ["slov2"],
        "summary": "Get onboarding graph for composite slo",
        "description": "",
        "operationId": "getOnboardingGraph",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompositeServiceLevelObjectiveSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTimeGraphResponse"
            }
          }
        }
      }
    },
    "/slo/v2": {
      "get": {
        "tags": ["slov2"],
        "summary": "get all service level objectives",
        "description": "",
        "operationId": "getServiceLevelObjectivesV2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userJourneys",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sliTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Availability", "Latency"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "targetTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Rolling", "Calender"]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "post": {
        "tags": ["slov2"],
        "summary": "saves slo data",
        "description": "",
        "operationId": "saveSLOV2Data",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelObjectiveV2DTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      }
    },
    "/slo/v2/{identifier}": {
      "get": {
        "tags": ["slov2"],
        "summary": "get service level objective data",
        "description": "",
        "operationId": "getServiceLevelObjectiveV2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "put": {
        "tags": ["slov2"],
        "summary": "update slo data",
        "description": "",
        "operationId": "updateSLOV2Data",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceLevelObjectiveV2DTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseServiceLevelObjectiveV2Response"
            }
          }
        }
      },
      "delete": {
        "tags": ["slov2"],
        "summary": "delete slo data",
        "description": "",
        "operationId": "deleteSLOV2Data",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseBoolean"
            }
          }
        }
      }
    },
    "/user-journey/create": {
      "post": {
        "tags": ["user-journey"],
        "summary": "saves user journey",
        "description": "",
        "operationId": "saveUserJourney",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserJourneyDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseUserJourneyResponse"
            }
          }
        }
      }
    },
    "/user-journey": {
      "get": {
        "tags": ["user-journey"],
        "summary": "get all user journeys",
        "description": "",
        "operationId": "getAllJourneys",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageUserJourneyResponse"
            }
          }
        }
      }
    },
    "/usage/CV": {
      "get": {
        "tags": ["usage"],
        "summary": "Gets License Usage for CV",
        "description": "",
        "operationId": "getLicenseUsage",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSRMLicenseUsageDTO"
            }
          }
        }
      }
    },
    "/usage/SRM": {
      "get": {
        "tags": ["usage"],
        "summary": "Gets License Usage for SRM",
        "description": "",
        "operationId": "getSRMLicenseUsage",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSRMLicenseUsageDTO"
            }
          }
        }
      }
    },
    "/deployment-time-series-analysis/{verificationJobInstanceId}": {
      "get": {
        "tags": ["deployment-time-series-analysis"],
        "summary": "get metrics for given verificationJob",
        "description": "",
        "operationId": "getMetrics",
        "produces": ["application/json", "application/v1+json"],
        "parameters": [
          {
            "name": "verificationJobInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "healthSources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "anomalousMetricsOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "hostNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transactionNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "anomalousNodesOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseTransactionMetricInfoSummaryPageDTO"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Page": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "PageString": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponsePageString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageString"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Failure": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "DELEGATE_SERVICE_DRIVER_EXCEPTION",
            "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "TEMPLATE_ALREADY_EXISTS_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "AZURE_BP_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED",
            "DELEGATE_TASK_VALIDATION_FAILED",
            "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
            "DELEGATE_NOT_REGISTERED",
            "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
            "APPROVAL_REJECTION",
            "TERRAGRUNT_EXECUTION_ERROR",
            "ADFS_ERROR",
            "TERRAFORM_CLOUD_ERROR",
            "CLUSTER_CREDENTIALS_NOT_FOUND",
            "SCM_API_ERROR",
            "INTERNAL_SERVER_ERROR",
            "SCM_FORBIDDEN",
            "AWS_EKS_ERROR",
            "OPA_POLICY_EVALUATION_ERROR",
            "USER_MARKED_FAILURE",
            "SSH_RETRY",
            "HTTP_CLIENT_ERROR_RESPONSE",
            "HTTP_INTERNAL_SERVER_ERROR",
            "HTTP_BAD_GATEWAY",
            "HTTP_SERVICE_UNAVAILABLE",
            "HTTP_GATEWAY_TIMEOUT",
            "HTTP_SERVER_ERROR_RESPONSE"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "DELEGATE_SERVICE_DRIVER_EXCEPTION",
            "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "TEMPLATE_ALREADY_EXISTS_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "AZURE_BP_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED",
            "DELEGATE_TASK_VALIDATION_FAILED",
            "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
            "DELEGATE_NOT_REGISTERED",
            "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
            "APPROVAL_REJECTION",
            "TERRAGRUNT_EXECUTION_ERROR",
            "ADFS_ERROR",
            "TERRAFORM_CLOUD_ERROR",
            "CLUSTER_CREDENTIALS_NOT_FOUND",
            "SCM_API_ERROR",
            "INTERNAL_SERVER_ERROR",
            "SCM_FORBIDDEN",
            "AWS_EKS_ERROR",
            "OPA_POLICY_EVALUATION_ERROR",
            "USER_MARKED_FAILURE",
            "SSH_RETRY",
            "HTTP_CLIENT_ERROR_RESPONSE",
            "HTTP_INTERNAL_SERVER_ERROR",
            "HTTP_BAD_GATEWAY",
            "HTTP_SERVICE_UNAVAILABLE",
            "HTTP_GATEWAY_TIMEOUT",
            "HTTP_SERVER_ERROR_RESPONSE"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "detailedMessage": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        },
        "metadata": {
          "$ref": "#/definitions/ErrorMetadataDTO"
        }
      }
    },
    "ErrorMetadataDTO": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "DELEGATE_SERVICE_DRIVER_EXCEPTION",
            "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "TEMPLATE_ALREADY_EXISTS_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "AZURE_ARM_TASK_EXCEPTION",
            "AZURE_BP_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR",
            "FREEZE_EXCEPTION",
            "DELEGATE_TASK_EXPIRED",
            "DELEGATE_TASK_VALIDATION_FAILED",
            "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
            "DELEGATE_NOT_REGISTERED",
            "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
            "APPROVAL_REJECTION",
            "TERRAGRUNT_EXECUTION_ERROR",
            "ADFS_ERROR",
            "TERRAFORM_CLOUD_ERROR",
            "CLUSTER_CREDENTIALS_NOT_FOUND",
            "SCM_API_ERROR",
            "INTERNAL_SERVER_ERROR",
            "SCM_FORBIDDEN",
            "AWS_EKS_ERROR",
            "OPA_POLICY_EVALUATION_ERROR",
            "USER_MARKED_FAILURE",
            "SSH_RETRY",
            "HTTP_CLIENT_ERROR_RESPONSE",
            "HTTP_INTERNAL_SERVER_ERROR",
            "HTTP_BAD_GATEWAY",
            "HTTP_SERVICE_UNAVAILABLE",
            "HTTP_GATEWAY_TIMEOUT",
            "HTTP_SERVER_ERROR_RESPONSE"
          ]
        },
        "level": {
          "type": "string",
          "enum": ["INFO", "ERROR"]
        },
        "message": {
          "type": "string"
        },
        "exception": {
          "$ref": "#/definitions/Throwable"
        },
        "failureTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR",
              "POLICY_EVALUATION_FAILURE",
              "INPUT_TIMEOUT_FAILURE",
              "APPROVAL_REJECTION",
              "DELEGATE_RESTART",
              "USER_MARKED_FAILURE"
            ]
          }
        }
      }
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "classLoaderName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "moduleVersion": {
          "type": "string"
        },
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "ResponseBoolean": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "boolean"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseTimeSeriesAnomalousPatterns": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/TimeSeriesAnomalousPatterns"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesAnomalies": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "testData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "anomalousTimestamps": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "TimeSeriesAnomalousPatterns": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "anomalies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesAnomalies"
          }
        },
        "compressedAnomalies": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseListTimeSeriesRiskSummary": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesRiskSummary"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesRiskSummary": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "transactionMetricRiskList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionMetricRisk"
          }
        },
        "overallRisk": {
          "type": "number",
          "format": "double"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TransactionMetricRisk": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "metricRisk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "metricScore": {
          "type": "number",
          "format": "double"
        },
        "longTermPattern": {
          "type": "boolean"
        },
        "lastSeenTime": {
          "type": "integer",
          "format": "int64"
        },
        "anomalous": {
          "type": "boolean"
        }
      }
    },
    "MetricSum": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "risk": {
          "type": "number",
          "format": "double"
        },
        "data": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseListTimeSeriesCumulativeSums": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesCumulativeSums"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesCumulativeSums": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "transactionMetricSums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionMetricSums"
          }
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TransactionMetricSums": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricSums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricSum"
          }
        }
      }
    },
    "MetricHistory": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "RestResponseTimeSeriesShortTermHistory": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/TimeSeriesShortTermHistory"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesShortTermHistory": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "transactionMetricHistories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionMetricHistory"
          }
        },
        "compressedMetricHistories": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TransactionMetricHistory": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricHistoryList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricHistory"
          }
        }
      }
    },
    "LogAnalysisCluster": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "analysisMinute": {
          "type": "integer",
          "format": "int64"
        },
        "label": {
          "type": "integer",
          "format": "int64"
        },
        "frequencyTrend": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Frequency"
          }
        },
        "text": {
          "type": "string"
        },
        "firstSeenTime": {
          "type": "integer",
          "format": "int64"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "evicted": {
          "type": "boolean"
        }
      }
    },
    "LogAnalysisRecord": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "analysisSummaryMessage": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "analysisMinute": {
          "type": "integer",
          "format": "int64"
        },
        "unknownEvents": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LogAnalysisCluster"
            }
          }
        },
        "testEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "controlEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "controlClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "unknownClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "testClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MessageFrequency": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "oldLabel": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseListLogAnalysisRecord": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisRecord"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AnalysisResult": {
      "type": "object",
      "properties": {
        "label": {
          "type": "integer",
          "format": "int64"
        },
        "tag": {
          "type": "string",
          "enum": ["KNOWN", "UNEXPECTED", "UNKNOWN"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "riskScore": {
          "type": "number",
          "format": "double"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        }
      }
    },
    "LogAnalysisResult": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "overallRisk": {
          "type": "number",
          "format": "double"
        },
        "logAnalysisResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalysisResult"
          }
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseListLogAnalysisResult": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisResult"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ClusteredLog": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "clusterLevel": {
          "type": "string",
          "enum": ["L1", "L2"]
        },
        "log": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "host": {
          "type": "string"
        },
        "clusterLabel": {
          "type": "string"
        },
        "clusterCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseListClusteredLog": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusteredLog"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseBoolean": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "boolean"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ExceptionInfo": {
      "type": "object",
      "properties": {
        "stackTrace": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        }
      }
    },
    "LearningEngineTask": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "pickedAt": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "analysisType": {
          "type": "string",
          "enum": [
            "SERVICE_GUARD_TIME_SERIES",
            "LOG_CLUSTER",
            "SERVICE_GUARD_LOG_ANALYSIS",
            "CANARY_LOG_ANALYSIS",
            "TEST_LOG_ANALYSIS",
            "TIME_SERIES_CANARY",
            "CANARY_DEPLOYMENT_TIME_SERIES",
            "BEFORE_AFTER_DEPLOYMENT_TIME_SERIES",
            "SERVICE_GUARD_FEEDBACK_ANALYSIS",
            "BEFORE_AFTER_DEPLOYMENT_LOG",
            "CANARY_DEPLOYMENT_LOG",
            "LOG_ANALYSIS",
            "TIME_SERIES_LOAD_TEST",
            "LOG_FEEDBACK"
          ]
        },
        "taskPriority": {
          "type": "integer",
          "format": "int32"
        },
        "analysisSaveUrl": {
          "type": "string"
        },
        "failureUrl": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndEpochMinute": {
          "type": "integer",
          "format": "int64"
        },
        "taskStatus": {
          "type": "string",
          "enum": ["QUEUED", "RUNNING", "FAILED", "SUCCESS", "TIMEOUT"]
        },
        "exception": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "logLevel": {
          "type": "string",
          "enum": ["INFO", "WARN", "ERROR"]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "enum": [
            "SERVICE_GUARD_TIME_SERIES",
            "LOG_CLUSTER",
            "SERVICE_GUARD_LOG_ANALYSIS",
            "CANARY_LOG_ANALYSIS",
            "TEST_LOG_ANALYSIS",
            "TIME_SERIES_CANARY",
            "CANARY_DEPLOYMENT_TIME_SERIES",
            "BEFORE_AFTER_DEPLOYMENT_TIME_SERIES",
            "SERVICE_GUARD_FEEDBACK_ANALYSIS",
            "BEFORE_AFTER_DEPLOYMENT_LOG",
            "CANARY_DEPLOYMENT_LOG",
            "LOG_ANALYSIS",
            "TIME_SERIES_LOAD_TEST",
            "LOG_FEEDBACK"
          ]
        }
      }
    },
    "RestResponseLearningEngineTask": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LearningEngineTask"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogClusterDTO": {
      "type": "object",
      "properties": {
        "verificationTaskId": {
          "type": "string"
        },
        "epochMinute": {
          "type": "integer",
          "format": "int64"
        },
        "host": {
          "type": "string"
        },
        "log": {
          "type": "string"
        },
        "clusterLabel": {
          "type": "string"
        },
        "clusterCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RestResponseListLogClusterDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogClusterDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Frequency": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "riskScore": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseListLogAnalysisCluster": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogFeedback": {
      "type": "object",
      "properties": {
        "sampleMessage": {
          "type": "string"
        },
        "feedbackScore": {
          "type": "string",
          "enum": ["NO_RISK_IGNORE_FREQUENCY", "NO_RISK_CONSIDER_FREQUENCY", "MEDIUM_RISK", "HIGH_RISK", "DEFAULT"]
        },
        "feedbackId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "verificationJobInstanceId": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "updatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "ticket": {
          "$ref": "#/definitions/TicketResponseDto"
        }
      }
    },
    "RestResponseListLogFeedback": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogFeedback"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TicketResponseDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "LogAnalysisDTO": {
      "type": "object",
      "properties": {
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "analysisSummaryMessage": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "analysisMinute": {
          "type": "integer",
          "format": "int64"
        },
        "logClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisCluster"
          }
        },
        "logAnalysisResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalysisResult"
          }
        }
      }
    },
    "RestResponseVoid": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/Void"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Void": {
      "type": "object"
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "label": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ClusterCoordinates": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "ClusterHostFrequencyData": {
      "type": "object",
      "properties": {
        "frequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostFrequencyData"
          }
        },
        "label": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ClusterSummary": {
      "type": "object",
      "properties": {
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "previousClusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "risk": {
          "type": "integer",
          "format": "int32"
        },
        "previousRisk": {
          "type": "integer",
          "format": "int32"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "testFrequencyData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "feedback": {
          "$ref": "#/definitions/LogFeedback"
        },
        "feedbackApplied": {
          "$ref": "#/definitions/LogFeedback"
        },
        "frequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostFrequencyData"
          }
        },
        "riskLevel": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "previousRiskLevel": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        }
      }
    },
    "ControlClusterSummary": {
      "type": "object",
      "properties": {
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "controlFrequencyData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "DeploymentLogAnalysisDTO": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "clusterCoordinates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterCoordinates"
          }
        },
        "resultSummary": {
          "$ref": "#/definitions/ResultSummary"
        },
        "hostSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostSummary"
          }
        }
      }
    },
    "HostFrequencyData": {
      "type": "object",
      "properties": {
        "frequencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimestampFrequencyCount"
          }
        },
        "host": {
          "type": "string"
        }
      }
    },
    "HostSummary": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "resultSummary": {
          "$ref": "#/definitions/ResultSummary"
        }
      }
    },
    "ResultSummary": {
      "type": "object",
      "properties": {
        "risk": {
          "type": "integer",
          "format": "int32"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "controlClusterSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ControlClusterSummary"
          }
        },
        "controlClusterHostFrequencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterHostFrequencyData"
          }
        },
        "testClusterSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterSummary"
          }
        },
        "riskLevel": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        }
      }
    },
    "TimestampFrequencyCount": {
      "type": "object",
      "properties": {
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseDeploymentLogAnalysisDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/DeploymentLogAnalysisDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "MetricSumDTO": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "risk": {
          "type": "number",
          "format": "double"
        },
        "data": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseMapStringMapStringListMetricSumDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricSumDTO"
              }
            }
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseMapStringMapStringListDouble": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseListTimeSeriesMetricDefinition": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesMetricDefinition"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesMetricDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "metricGroupName": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": ["IGNORE", "FAIL"]
        },
        "comparisonType": {
          "type": "string",
          "enum": ["ratio", "delta", "absolute-value"]
        },
        "action": {
          "type": "string",
          "enum": ["FAIL_IMMEDIATELY", "FAIL_AFTER_OCCURRENCES", "FAIL_AFTER_CONSECUTIVE_OCCURRENCES", "IGNORE"]
        },
        "occurrenceCount": {
          "type": "integer",
          "format": "int32"
        },
        "thresholdType": {
          "type": "string",
          "enum": ["ACT_WHEN_LOWER", "ACT_WHEN_HIGHER"]
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "thresholdConfigType": {
          "type": "string",
          "enum": ["DEFAULT", "USER_DEFINED", "CUSTOMER"]
        },
        "deviationType": {
          "type": "string",
          "enum": ["HIGHER_IS_RISKY", "LOWER_IS_RISKY", "BOTH_ARE_RISKY"]
        }
      }
    },
    "ServiceGuardTimeSeriesAnalysisDTO": {
      "type": "object",
      "properties": {
        "verificationTaskId": {
          "type": "string"
        },
        "analysisStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "analysisEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "overallMetricScores": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "txnMetricAnalysisData": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ServiceGuardTxnMetricAnalysisDataDTO"
            }
          }
        }
      }
    },
    "ServiceGuardTxnMetricAnalysisDataDTO": {
      "type": "object",
      "properties": {
        "longTermPattern": {
          "type": "boolean"
        },
        "lastSeenTime": {
          "type": "integer",
          "format": "int64"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "shortTermHistory": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "anomalousPatterns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesAnomaliesDTO"
          }
        },
        "cumulativeSums": {
          "$ref": "#/definitions/MetricSumDTO"
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "keyTransaction": {
          "type": "boolean"
        }
      }
    },
    "TimeSeriesAnomaliesDTO": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "testData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "anomalousTimestamps": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "RestResponseListTimeSeriesRecordDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesRecordDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesRecordDTO": {
      "type": "object",
      "properties": {
        "verificationTaskId": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "epochMinute": {
          "type": "integer",
          "format": "int64"
        },
        "metricValue": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseMapStringMapStringListTimeSeriesAnomaliesDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesAnomaliesDTO"
              }
            }
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DeploymentTimeSeriesAnalysisDTO": {
      "type": "object",
      "properties": {
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "failFast": {
          "type": "boolean"
        },
        "hostSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostInfo"
          }
        },
        "transactionMetricSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionMetricHostData"
          }
        }
      }
    },
    "HostData": {
      "type": "object",
      "properties": {
        "nearestControlHost": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "appliedThresholdIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "controlData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "testData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "anomalous": {
          "type": "boolean"
        }
      }
    },
    "HostInfo": {
      "type": "object",
      "properties": {
        "hostName": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "canary": {
          "type": "boolean"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TransactionMetricHostData": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "hostData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostData"
          }
        },
        "failFast": {
          "type": "boolean"
        },
        "anomalous": {
          "type": "boolean"
        }
      }
    },
    "RestResponseListString": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseSetString": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AdditionalInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["TEST", "CANARY", "BLUE_GREEN", "ROLLING", "AUTO"]
        }
      }
    },
    "DeploymentActivitySummaryDTO": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "envName": {
          "type": "string"
        },
        "envIdentifier": {
          "type": "string"
        },
        "deploymentTag": {
          "type": "string"
        },
        "deploymentVerificationJobInstanceSummary": {
          "$ref": "#/definitions/DeploymentVerificationJobInstanceSummary"
        }
      }
    },
    "DeploymentVerificationJobInstanceSummary": {
      "type": "object",
      "properties": {
        "progressPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "remainingTimeMs": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "durationMs": {
          "type": "integer",
          "format": "int64"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "environmentName": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "verificationJobInstanceId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "IGNORED",
            "NOT_STARTED",
            "VERIFICATION_PASSED",
            "VERIFICATION_FAILED",
            "ERROR",
            "ABORTED",
            "IN_PROGRESS"
          ]
        },
        "additionalInfo": {
          "$ref": "#/definitions/AdditionalInfo"
        },
        "timeSeriesAnalysisSummary": {
          "$ref": "#/definitions/TimeSeriesAnalysisSummary"
        },
        "logsAnalysisSummary": {
          "$ref": "#/definitions/LogsAnalysisSummary"
        },
        "errorAnalysisSummary": {
          "$ref": "#/definitions/ErrorAnalysisSummary"
        }
      }
    },
    "ErrorAnalysisSummary": {
      "type": "object",
      "properties": {
        "totalClusterCount": {
          "type": "integer",
          "format": "int32"
        },
        "anomalousClusterCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LogsAnalysisSummary": {
      "type": "object",
      "properties": {
        "totalClusterCount": {
          "type": "integer",
          "format": "int32"
        },
        "anomalousClusterCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RestResponseDeploymentActivitySummaryDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/DeploymentActivitySummaryDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesAnalysisSummary": {
      "type": "object",
      "properties": {
        "totalNumMetrics": {
          "type": "integer",
          "format": "int32"
        },
        "numAnomMetrics": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "inputSetTemplateYaml": {
          "type": "string"
        }
      }
    },
    "ResponseInputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetTemplateResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetTemplateRequest": {
      "type": "object",
      "properties": {
        "pipelineYaml": {
          "type": "string"
        },
        "templateYaml": {
          "type": "string"
        }
      }
    },
    "HealthSourceDTO": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "verificationType": {
          "type": "string",
          "enum": ["TIME_SERIES", "LOG"]
        }
      }
    },
    "RestResponseSetHealthSourceDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HealthSourceDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Duration": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "integer",
          "format": "int64"
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemporalUnit"
          }
        },
        "negative": {
          "type": "boolean"
        },
        "zero": {
          "type": "boolean"
        },
        "nano": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProgressLog": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "log": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "finalState": {
          "type": "boolean"
        },
        "timeTakenToFinish": {
          "$ref": "#/definitions/Duration"
        },
        "failedStatus": {
          "type": "boolean"
        },
        "verificationJobExecutionStatus": {
          "type": "string",
          "enum": ["QUEUED", "RUNNING", "FAILED", "SUCCESS", "TIMEOUT", "ABORTED"]
        }
      }
    },
    "RestResponseListProgressLog": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgressLog"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TemporalUnit": {
      "type": "object",
      "properties": {
        "duration": {
          "$ref": "#/definitions/Duration"
        },
        "durationEstimated": {
          "type": "boolean"
        },
        "dateBased": {
          "type": "boolean"
        },
        "timeBased": {
          "type": "boolean"
        }
      }
    },
    "NodeRiskCount": {
      "type": "object",
      "properties": {
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "NodeRiskCountDTO": {
      "type": "object",
      "properties": {
        "totalNodeCount": {
          "type": "integer",
          "format": "int32"
        },
        "anomalousNodeCount": {
          "type": "integer",
          "format": "int32"
        },
        "nodeRiskCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeRiskCount"
          }
        }
      }
    },
    "PageTransactionMetricInfo": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionMetricInfo"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponseTransactionMetricInfoSummaryPageDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/TransactionMetricInfoSummaryPageDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeRange": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TransactionMetric": {
      "type": "object",
      "properties": {
        "transactionName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        }
      }
    },
    "TransactionMetricInfo": {
      "type": "object",
      "properties": {
        "transactionMetric": {
          "$ref": "#/definitions/TransactionMetric"
        },
        "connectorName": {
          "type": "string"
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "nodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HostData"
          }
        },
        "nodeRiskCountDTO": {
          "$ref": "#/definitions/NodeRiskCountDTO"
        }
      }
    },
    "TransactionMetricInfoSummaryPageDTO": {
      "type": "object",
      "properties": {
        "pageResponse": {
          "$ref": "#/definitions/PageTransactionMetricInfo"
        },
        "deploymentTimeRange": {
          "$ref": "#/definitions/TimeRange"
        },
        "deploymentStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "deploymentEndTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiCallLogDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGLogDTO"
        },
        {
          "type": "object",
          "properties": {
            "requests": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiCallLogDTOField"
              }
            },
            "responses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiCallLogDTOField"
              }
            },
            "requestTime": {
              "type": "integer",
              "format": "int64"
            },
            "responseTime": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "ApiCallLogDTOField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["JSON", "XML", "NUMBER", "URL", "TEXT", "TIMESTAMP"]
        }
      }
    },
    "CVNGLogDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "traceableId": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVNGLogTag"
          }
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "traceableType": {
          "type": "string",
          "enum": ["ONBOARDING", "VERIFICATION_TASK"]
        },
        "type": {
          "type": "string",
          "enum": ["ApiCallLog", "ExecutionLog"]
        }
      }
    },
    "CVNGLogTag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["TIMESTAMP", "STRING", "DEBUG"]
        }
      }
    },
    "ExecutionLogDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGLogDTO"
        },
        {
          "type": "object",
          "properties": {
            "log": {
              "type": "string"
            },
            "logLevel": {
              "type": "string",
              "enum": ["INFO", "WARN", "ERROR"]
            }
          }
        }
      ]
    },
    "PageCVNGLogDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CVNGLogDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponsePageCVNGLogDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PageCVNGLogDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogAnalysisClusterChartDTO": {
      "type": "object",
      "properties": {
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "text": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        }
      }
    },
    "RestResponseListLogAnalysisClusterChartDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisClusterChartDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogAnalysisRadarChartClusterDTO": {
      "type": "object",
      "properties": {
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "clusterId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "radius": {
          "type": "number",
          "format": "double"
        },
        "angle": {
          "type": "number",
          "format": "double"
        },
        "baseline": {
          "$ref": "#/definitions/LogAnalysisRadarChartClusterDTO"
        },
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "hasControlData": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RestResponseListLogAnalysisRadarChartClusterDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisRadarChartClusterDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "EventCount": {
      "type": "object",
      "properties": {
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "LogAnalysisRadarChartListDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "previousRisk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "previousClusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "testHostFrequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostFrequencyData"
          }
        },
        "totalTestFrequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimestampFrequencyCount"
          }
        },
        "averageControlFrequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimestampFrequencyCount"
          }
        },
        "baseline": {
          "$ref": "#/definitions/LogAnalysisRadarChartListDTO"
        },
        "feedback": {
          "$ref": "#/definitions/LogFeedback"
        },
        "feedbackApplied": {
          "$ref": "#/definitions/LogFeedback"
        },
        "hasControlData": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "LogAnalysisRadarChartListWithCountDTO": {
      "type": "object",
      "properties": {
        "totalClusters": {
          "type": "integer",
          "format": "int32"
        },
        "eventCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventCount"
          }
        },
        "logAnalysisRadarCharts": {
          "$ref": "#/definitions/PageLogAnalysisRadarChartListDTO"
        }
      }
    },
    "PageLogAnalysisRadarChartListDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisRadarChartListDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponseLogAnalysisRadarChartListWithCountDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LogAnalysisRadarChartListWithCountDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogAnalysisClusterDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "label": {
          "type": "integer",
          "format": "int32"
        },
        "clusterType": {
          "type": "string",
          "enum": ["BASELINE", "KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "controlFrequencyData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "testFrequencyData": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "PageLogAnalysisClusterDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogAnalysisClusterDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponsePageLogAnalysisClusterDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PageLogAnalysisClusterDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogAnalysisClusterWithCountDTO": {
      "type": "object",
      "properties": {
        "totalClusters": {
          "type": "integer",
          "format": "int32"
        },
        "eventCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventCount"
          }
        },
        "logAnalysisClusterDTO": {
          "$ref": "#/definitions/PageLogAnalysisClusterDTO"
        }
      }
    },
    "RestResponseLogAnalysisClusterWithCountDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LogAnalysisClusterWithCountDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "HealthSourceV2": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "providerType": {
          "type": "string",
          "enum": ["ERRORS", "LOGS", "METRICS"]
        }
      }
    },
    "AnalysedDeploymentTestDataNode": {
      "type": "object",
      "properties": {
        "nodeIdentifier": {
          "type": "string"
        },
        "analysisResult": {
          "type": "string",
          "enum": ["NO_ANALYSIS", "HEALTHY", "WARNING", "UNHEALTHY"]
        },
        "analysisReason": {
          "type": "string",
          "enum": ["CUSTOM_FAIL_FAST_THRESHOLD", "ML_ANALYSIS", "NO_CONTROL_DATA", "NO_TEST_DATA"]
        },
        "controlDataType": {
          "type": "string",
          "enum": ["AVERAGE", "MINIMUM_DEVIATION"]
        },
        "controlNodeIdentifier": {
          "type": "string"
        },
        "appliedThresholds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "controlData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValueV2"
          }
        },
        "testData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValueV2"
          }
        },
        "normalisedControlData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValueV2"
          }
        },
        "normalisedTestData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValueV2"
          }
        }
      }
    },
    "MetricThresholdCriteriaV2": {
      "type": "object",
      "properties": {
        "actionableCount": {
          "type": "integer",
          "format": "int32"
        },
        "measurementType": {
          "type": "string",
          "enum": ["ratio", "delta", "absolute-value"]
        },
        "greaterThanThreshold": {
          "type": "number",
          "format": "double"
        },
        "lessThanThreshold": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "MetricThresholdV2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "thresholdType": {
          "type": "string",
          "enum": ["FAIL_FAST", "IGNORE"]
        },
        "isUserDefined": {
          "type": "boolean"
        },
        "action": {
          "type": "string",
          "enum": ["Ignore", "FailImmediately", "FailAfterOccurrence", "FailAfterConsecutiveOccurrence"]
        },
        "criteria": {
          "$ref": "#/definitions/MetricThresholdCriteriaV2"
        }
      }
    },
    "MetricValueV2": {
      "type": "object",
      "properties": {
        "timestampInMillis": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "MetricsAnalysis": {
      "type": "object",
      "properties": {
        "metricIdentifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "transactionGroup": {
          "type": "string"
        },
        "metricType": {
          "type": "string",
          "enum": [
            "ERROR",
            "INFRASTRUCTURE",
            "PERFORMANCE_THROUGHPUT",
            "PERFORMANCE_OTHER",
            "PERFORMANCE_RESPONSE_TIME"
          ]
        },
        "healthSource": {
          "$ref": "#/definitions/HealthSourceV2"
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricThresholdV2"
          }
        },
        "analysisResult": {
          "type": "string",
          "enum": ["NO_ANALYSIS", "HEALTHY", "WARNING", "UNHEALTHY"]
        },
        "testDataNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalysedDeploymentTestDataNode"
          }
        },
        "deeplinkURL": {
          "type": "string"
        }
      }
    },
    "PageMetricsAnalysis": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsAnalysis"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "AbstractAnalysedNode": {
      "type": "object",
      "discriminator": "type"
    },
    "AnalysedDeploymentNode": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractAnalysedNode"
        },
        {
          "type": "object",
          "properties": {
            "nodeIdentifier": {
              "type": "string"
            },
            "verificationResult": {
              "type": "string",
              "enum": ["PASSED", "FAILED", "NO_ANALYSIS"]
            },
            "failedMetrics": {
              "type": "integer",
              "format": "int64"
            },
            "failedLogClusters": {
              "type": "integer",
              "format": "int64"
            },
            "failedErrorClusters": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "AnalysedLoadTestNode": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractAnalysedNode"
        },
        {
          "type": "object",
          "properties": {
            "deploymentTag": {
              "type": "string"
            },
            "testStartTimestamp": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "AnalysedNodeOverview": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": ["BASELINE_TEST", "CANARY", "CURRENT_TEST", "POST_DEPLOYMENT", "PRE_DEPLOYMENT", "PRIMARY"]
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractAnalysedNode"
          }
        }
      }
    },
    "ClusterAnalysisOverview": {
      "type": "object",
      "properties": {
        "knownClustersCount": {
          "type": "integer",
          "format": "int32"
        },
        "unknownClustersCount": {
          "type": "integer",
          "format": "int32"
        },
        "unexpectedFrequencyClustersCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MetricsAnalysisOverview": {
      "type": "object",
      "properties": {
        "healthy": {
          "type": "integer",
          "format": "int32"
        },
        "warning": {
          "type": "integer",
          "format": "int32"
        },
        "unhealthy": {
          "type": "integer",
          "format": "int32"
        },
        "noAnalysis": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VerificationOverview": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/VerificationSpec"
        },
        "appliedDeploymentAnalysisType": {
          "type": "string",
          "enum": ["CANARY", "NO_ANALYSIS", "ROLLING", "TEST"]
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "IGNORED",
            "NOT_STARTED",
            "VERIFICATION_PASSED",
            "VERIFICATION_FAILED",
            "ERROR",
            "ABORTED",
            "IN_PROGRESS"
          ]
        },
        "verificationProgressPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "verificationStartTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "verificationEndTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "testNodes": {
          "$ref": "#/definitions/AnalysedNodeOverview"
        },
        "controlNodes": {
          "$ref": "#/definitions/AnalysedNodeOverview"
        },
        "metricsAnalysis": {
          "$ref": "#/definitions/MetricsAnalysisOverview"
        },
        "logClusters": {
          "$ref": "#/definitions/ClusterAnalysisOverview"
        },
        "errorClusters": {
          "$ref": "#/definitions/ClusterAnalysisOverview"
        }
      }
    },
    "VerificationSpec": {
      "type": "object",
      "properties": {
        "analysedServiceIdentifier": {
          "type": "string"
        },
        "analysedEnvIdentifier": {
          "type": "string"
        },
        "monitoredServiceType": {
          "type": "string",
          "enum": ["DEFAULT", "CONFIGURED", "TEMPLATE"]
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "monitoredServiceTemplateIdentifier": {
          "type": "string"
        },
        "monitoredServiceTemplateVersionLabel": {
          "type": "string"
        },
        "analysisType": {
          "type": "string",
          "enum": ["TEST", "CANARY", "BLUE_GREEN", "ROLLING", "AUTO"]
        },
        "sensitivity": {
          "type": "string",
          "enum": ["LOW", "MEDIUM", "HIGH"]
        },
        "durationInMinutes": {
          "type": "integer",
          "format": "int64"
        },
        "isFailOnNoAnalysis": {
          "type": "boolean"
        }
      }
    },
    "AppDynamicsApplication": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageAppDynamicsApplication": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppDynamicsApplication"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageAppDynamicsApplication": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageAppDynamicsApplication"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AppdynamicsMetricDataResponse": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "responseStatus": {
          "type": "string",
          "enum": ["SUCCESS", "NO_DATA", "FAILED"]
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoint"
          }
        }
      }
    },
    "DataPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResponseAppdynamicsMetricDataResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/AppdynamicsMetricDataResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AppdynamicsMetricValueValidationResponse": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "apiResponseStatus": {
          "type": "string",
          "enum": ["SUCCESS", "NO_DATA", "FAILED"]
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "AppdynamicsValidationResponse": {
      "type": "object",
      "properties": {
        "metricPackName": {
          "type": "string"
        },
        "overallStatus": {
          "type": "string",
          "enum": ["SUCCESS", "NO_DATA", "FAILED"]
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppdynamicsMetricValueValidationResponse"
          }
        }
      }
    },
    "ResponseSetAppdynamicsValidationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AppdynamicsValidationResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MetricDefinitionDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "path": {
          "type": "string"
        },
        "validationPath": {
          "type": "string"
        },
        "responseJsonPath": {
          "type": "string"
        },
        "validationResponseJsonPath": {
          "type": "string"
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesThresholdDTO"
          }
        },
        "included": {
          "type": "boolean"
        }
      }
    },
    "MetricPackDTO": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "identifier": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["Performance", "Errors", "Infrastructure"]
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetricDefinitionDTO"
          }
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesThresholdDTO"
          }
        }
      }
    },
    "TimeSeriesThresholdCriteria": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ratio", "delta", "absolute-value"]
        },
        "action": {
          "type": "string",
          "enum": ["FAIL_IMMEDIATELY", "FAIL_AFTER_OCCURRENCES", "FAIL_AFTER_CONSECUTIVE_OCCURRENCES", "IGNORE"]
        },
        "occurrenceCount": {
          "type": "integer",
          "format": "int32"
        },
        "criteria": {
          "type": "string"
        },
        "deviationType": {
          "type": "string",
          "enum": ["HIGHER_IS_RISKY", "LOWER_IS_RISKY", "BOTH_ARE_RISKY"]
        }
      }
    },
    "TimeSeriesThresholdDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "metricPackIdentifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "metricGroupName": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "enum": ["IGNORE", "FAIL"]
        },
        "criteria": {
          "$ref": "#/definitions/TimeSeriesThresholdCriteria"
        }
      }
    },
    "AppDynamicsTier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PageAppDynamicsTier": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppDynamicsTier"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageAppDynamicsTier": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageAppDynamicsTier"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AppDynamicsFileDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["leaf", "folder"]
        }
      }
    },
    "ResponseListAppDynamicsFileDefinition": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppDynamicsFileDefinition"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "string"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AwsPrometheusWorkspaceDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "workspaceId": {
          "type": "string"
        }
      }
    },
    "ResponseListAwsPrometheusWorkspaceDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AwsPrometheusWorkspaceDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponsePageCVNGLogDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageCVNGLogDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "JsonNode": {
      "type": "object"
    },
    "ResponseJsonNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JsonNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "YamlGroup": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        }
      }
    },
    "YamlSchemaDetailsWrapper": {
      "type": "object",
      "properties": {
        "yamlSchemaWithDetailsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YamlSchemaWithDetails"
          }
        }
      }
    },
    "YamlSchemaMetadata": {
      "type": "object",
      "required": ["yamlGroup"],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "modulesSupported": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CD",
              "CI",
              "CV",
              "CF",
              "CE",
              "STO",
              "CHAOS",
              "SRM",
              "IACM",
              "CET",
              "CODE",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "IDP"
            ]
          }
        },
        "featureFlags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "featureRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "yamlGroup": {
          "$ref": "#/definitions/YamlGroup"
        }
      }
    },
    "YamlSchemaWithDetails": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "schemaClassName": {
          "type": "string"
        },
        "moduleType": {
          "type": "string",
          "enum": [
            "CD",
            "CI",
            "CV",
            "CF",
            "CE",
            "STO",
            "CHAOS",
            "SRM",
            "IACM",
            "CET",
            "CODE",
            "CORE",
            "PMS",
            "TEMPLATESERVICE",
            "GOVERNANCE",
            "IDP"
          ]
        },
        "yamlSchemaMetadata": {
          "$ref": "#/definitions/YamlSchemaMetadata"
        },
        "availableAtOrgLevel": {
          "type": "boolean"
        },
        "availableAtAccountLevel": {
          "type": "boolean"
        },
        "availableAtProjectLevel": {
          "type": "boolean"
        }
      }
    },
    "PartialSchemaDTO": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "nodeType": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "skipStageSchema": {
          "type": "boolean"
        },
        "moduleType": {
          "type": "string",
          "enum": [
            "CD",
            "CI",
            "CV",
            "CF",
            "CE",
            "STO",
            "CHAOS",
            "SRM",
            "IACM",
            "CET",
            "CODE",
            "CORE",
            "PMS",
            "TEMPLATESERVICE",
            "GOVERNANCE",
            "IDP"
          ]
        }
      }
    },
    "ResponseListPartialSchemaDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartialSchemaDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseYamlSchemaDetailsWrapper": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/YamlSchemaDetailsWrapper"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CategoryCountDetails": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "countInPrecedingWindow": {
          "type": "integer",
          "format": "int64"
        },
        "percentageChange": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ChangeSummaryDTO": {
      "type": "object",
      "properties": {
        "categoryCountMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CategoryCountDetails"
          }
        },
        "total": {
          "$ref": "#/definitions/CategoryCountDetails"
        }
      }
    },
    "RestResponseChangeSummaryDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/ChangeSummaryDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ChangeTimeline": {
      "type": "object",
      "properties": {
        "categoryTimeline": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TimeRangeDetail"
            }
          }
        }
      }
    },
    "RestResponseChangeTimeline": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/ChangeTimeline"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeRangeDetail": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ChangeEventDTO": {
      "type": "object",
      "required": ["accountId", "metadata", "orgIdentifier", "projectIdentifier"],
      "properties": {
        "id": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "envIdentifier": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "changeSourceIdentifier": {
          "type": "string"
        },
        "eventTime": {
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        "category": {
          "type": "string",
          "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessCDNextGen",
            "PagerDuty",
            "K8sCluster",
            "HarnessCD",
            "HarnessFF",
            "HarnessCE",
            "CustomDeploy",
            "CustomIncident",
            "CustomInfrastructure",
            "CustomFF"
          ]
        }
      }
    },
    "ChangeEventMetadata": {
      "type": "object",
      "description": "This is the change Source entity defined in Harness"
    },
    "CustomChangeEvent": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "changeEventDetailsLink": {
          "type": "string"
        },
        "externalLinkToEntity": {
          "type": "string"
        }
      }
    },
    "CustomChangeEventMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "user": {
              "type": "string"
            },
            "startTime": {
              "type": "integer",
              "format": "int64"
            },
            "endTime": {
              "type": "integer",
              "format": "int64"
            },
            "customChangeEvent": {
              "$ref": "#/definitions/CustomChangeEvent"
            },
            "type": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "HarnessCE",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "DeepLink": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["FETCH_DIFF_DATA", "REDIRECT_URL"]
        },
        "url": {
          "type": "string"
        }
      }
    },
    "HarnessCDCurrentGenEventMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "serviceId": {
              "type": "string"
            },
            "environmentId": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "workflowStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "workflowEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "workflowExecutionId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "artifactType": {
              "type": "string"
            },
            "artifactName": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "HarnessCDEventMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "deploymentStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "deploymentEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "planExecutionId": {
              "type": "string"
            },
            "pipelineId": {
              "type": "string"
            },
            "stageStepId": {
              "type": "string"
            },
            "stageId": {
              "type": "string"
            },
            "artifactType": {
              "type": "string"
            },
            "artifactTag": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "verifyStepSummaries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VerifyStepSummary"
              }
            },
            "pipelinePath": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "InternalChangeEvent": {
      "type": "object",
      "properties": {
        "eventDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "internalLinkToEntity": {
          "$ref": "#/definitions/DeepLink"
        },
        "changeEventDetailsLink": {
          "$ref": "#/definitions/DeepLink"
        }
      }
    },
    "InternalChangeEventMetaData": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "activityType": {
              "type": "string",
              "enum": [
                "DEPLOYMENT",
                "CONFIG",
                "KUBERNETES",
                "HARNESS_CD",
                "PAGER_DUTY",
                "HARNESS_CD_CURRENT_GEN",
                "FEATURE_FLAG",
                "CHAOS_EXPERIMENT",
                "CUSTOM_DEPLOY",
                "CUSTOM_INCIDENT",
                "CUSTOM_INFRA",
                "CUSTOM_FF"
              ]
            },
            "updatedBy": {
              "type": "string"
            },
            "internalChangeEvent": {
              "$ref": "#/definitions/InternalChangeEvent"
            },
            "eventStartTime": {
              "type": "integer",
              "format": "int64"
            },
            "eventEndTime": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "KubernetesChangeEventMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "oldYaml": {
              "type": "string"
            },
            "newYaml": {
              "type": "string"
            },
            "timestamp": {
              "type": "integer",
              "format": "int64"
            },
            "workload": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "resourceType": {
              "type": "string",
              "enum": ["Deployment", "ReplicaSet", "Secret", "Pod", "ConfigMap", "StatefulSet"]
            },
            "action": {
              "type": "string",
              "enum": ["Add", "Update", "Delete"]
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "resourceVersion": {
              "type": "string"
            },
            "dependentMonitoredService": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "PageChangeEventDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeEventDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "PagerDutyEventMetaData": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeEventMetadata"
        },
        {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string"
            },
            "pagerDutyUrl": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "triggeredAt": {
              "type": "integer",
              "format": "int64"
            },
            "urgency": {
              "type": "string"
            },
            "htmlUrl": {
              "type": "string"
            },
            "priority": {
              "type": "string"
            },
            "assignment": {
              "type": "string"
            },
            "assignmentUrl": {
              "type": "string"
            },
            "escalationPolicy": {
              "type": "string"
            },
            "escalationPolicyUrl": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "RestResponsePageChangeEventDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PageChangeEventDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "VerifyStepSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "verificationStatus": {
          "type": "string",
          "enum": [
            "IGNORED",
            "NOT_STARTED",
            "VERIFICATION_PASSED",
            "VERIFICATION_FAILED",
            "ERROR",
            "ABORTED",
            "IN_PROGRESS"
          ]
        }
      }
    },
    "RestResponseChangeEventDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/ChangeEventDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DemoChangeEventDTO": {
      "type": "object",
      "properties": {
        "changeSourceType": {
          "type": "string",
          "enum": [
            "HarnessCDNextGen",
            "PagerDuty",
            "K8sCluster",
            "HarnessCD",
            "HarnessFF",
            "HarnessCE",
            "CustomDeploy",
            "CustomIncident",
            "CustomInfrastructure",
            "CustomFF"
          ]
        },
        "changeSourceIdentifier": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        }
      }
    },
    "ResponseMap": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseObject": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CustomHealthSampleDataRequest": {
      "type": "object",
      "required": ["endTime", "method", "startTime", "urlPath"],
      "properties": {
        "urlPath": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/TimestampInfo"
        },
        "endTime": {
          "$ref": "#/definitions/TimestampInfo"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST"]
        },
        "body": {
          "type": "string"
        }
      }
    },
    "TimestampInfo": {
      "type": "object",
      "properties": {
        "placeholder": {
          "type": "string"
        },
        "timestampFormat": {
          "type": "string",
          "enum": ["SECONDS", "MILLISECONDS", "CUSTOM"]
        },
        "customTimestampFormat": {
          "type": "string"
        }
      }
    },
    "TimeSeriesDataCollectionRecord": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        },
        "metricValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeSeriesDataRecordMetricValue"
          }
        }
      }
    },
    "TimeSeriesDataRecordGroupValue": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "percent": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TimeSeriesDataRecordMetricValue": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "timeSeriesValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeSeriesDataRecordGroupValue"
          }
        }
      }
    },
    "DataCollectionInfo": {
      "type": "object",
      "properties": {
        "dataCollectionDsl": {
          "type": "string"
        },
        "collectHostData": {
          "type": "boolean"
        },
        "verificationType": {
          "type": "string",
          "enum": ["TIME_SERIES", "LOG"]
        }
      }
    },
    "DataCollectionTaskDTO": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "dataCollectionInfo": {
          "$ref": "#/definitions/DataCollectionInfo"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseOptionalDataCollectionTaskDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/DataCollectionTaskDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DataCollectionTaskResult": {
      "type": "object",
      "properties": {
        "dataCollectionTaskId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["FAILED", "QUEUED", "RUNNING", "WAITING", "EXPIRED", "SUCCESS", "ABORTED"]
        },
        "exception": {
          "type": "string"
        },
        "stacktrace": {
          "type": "string"
        },
        "executionLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionLog"
          }
        }
      }
    },
    "ExecutionLog": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string"
        },
        "logLevel": {
          "type": "string",
          "enum": ["INFO", "WARN", "ERROR"]
        }
      }
    },
    "RestResponseListDataCollectionTaskDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataCollectionTaskDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseListLinkedHashMap": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "LogSampleRequestDTO": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      }
    },
    "ResponseListTimeSeriesSampleDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesSampleDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TimeSeriesSampleDTO": {
      "type": "object",
      "properties": {
        "txnName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricValue": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DatadogDashboardDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PageDatadogDashboardDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatadogDashboardDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageDatadogDashboardDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageDatadogDashboardDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DatadogDashboardDetail": {
      "type": "object",
      "properties": {
        "widgetName": {
          "type": "string"
        },
        "dataSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatadogDataSet"
          }
        }
      }
    },
    "DatadogDataSet": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "ResponseListDatadogDashboardDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatadogDashboardDetail"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MetricTagResponseDTO": {
      "type": "object",
      "properties": {
        "metricTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tagKeys": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseMetricTagResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/MetricTagResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AnalysisDTO": {
      "type": "object",
      "properties": {
        "liveMonitoring": {
          "$ref": "#/definitions/LiveMonitoringDTO"
        },
        "deploymentVerification": {
          "$ref": "#/definitions/DeploymentVerificationDTO"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        }
      }
    },
    "AppDMetricDefinitions": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "groupName": {
          "type": "string"
        },
        "baseFolder": {
          "type": "string"
        },
        "metricPath": {
          "type": "string"
        },
        "completeMetricPath": {
          "type": "string"
        },
        "completeServiceInstanceMetricPath": {
          "type": "string"
        }
      }
    },
    "AppDynamicsHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "feature": {
              "type": "string"
            },
            "applicationName": {
              "type": "string"
            },
            "tierName": {
              "type": "string"
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppDMetricDefinitions"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "AwsPrometheusHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["region", "workspaceId"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrometheusMetricDefinition"
              }
            },
            "region": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "CloudWatchMetricDefinition": {
      "type": "object",
      "required": ["expression", "groupName", "identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "groupName": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "responseMapping": {
          "$ref": "#/definitions/MetricResponseMapping"
        }
      }
    },
    "CloudWatchMetricsHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature", "region"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "region": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudWatchMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "CustomHealthLogDefinition": {
      "type": "object",
      "properties": {
        "requestDefinition": {
          "$ref": "#/definitions/CustomHealthRequestDefinition"
        },
        "logMessageJsonPath": {
          "type": "string"
        },
        "timestampJsonPath": {
          "type": "string"
        },
        "serviceInstanceJsonPath": {
          "type": "string"
        },
        "queryName": {
          "type": "string"
        }
      }
    },
    "CustomHealthMetricDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "requestDefinition": {
          "$ref": "#/definitions/CustomHealthRequestDefinition"
        },
        "queryType": {
          "type": "string",
          "enum": ["SERVICE_BASED", "HOST_BASED"]
        },
        "metricResponseMapping": {
          "$ref": "#/definitions/MetricResponseMapping"
        },
        "groupName": {
          "type": "string"
        }
      }
    },
    "CustomHealthRequestDefinition": {
      "type": "object",
      "properties": {
        "urlPath": {
          "type": "string"
        },
        "requestBody": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": ["GET", "POST"]
        },
        "startTimeInfo": {
          "$ref": "#/definitions/TimestampInfo"
        },
        "endTimeInfo": {
          "$ref": "#/definitions/TimestampInfo"
        }
      }
    },
    "CustomHealthSourceLogSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "logDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomHealthLogDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "CustomHealthSourceMetricSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomHealthMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "DatadogLogHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature", "queries"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "queries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryDTO"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "DatadogMetricHealthDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "dashboardId": {
          "type": "string"
        },
        "dashboardName": {
          "type": "string"
        },
        "metricPath": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "groupingQuery": {
          "type": "string"
        },
        "metric": {
          "type": "string"
        },
        "aggregation": {
          "type": "string"
        },
        "serviceInstanceIdentifierTag": {
          "type": "string"
        },
        "metricTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isCustomCreatedMetric": {
          "type": "boolean"
        },
        "isManualQuery": {
          "type": "boolean"
        }
      }
    },
    "DatadogMetricHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "feature": {
              "type": "string"
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DatadogMetricHealthDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "DeploymentVerificationDTO": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "serviceInstanceFieldName": {
          "type": "string"
        },
        "serviceInstanceMetricPath": {
          "type": "string"
        }
      }
    },
    "DynatraceHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "feature": {
              "type": "string"
            },
            "serviceId": {
              "type": "string"
            },
            "serviceName": {
              "type": "string"
            },
            "serviceMethodIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DynatraceMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "DynatraceMetricDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "groupName": {
          "type": "string"
        },
        "metricSelector": {
          "type": "string"
        },
        "isManualQuery": {
          "type": "boolean"
        }
      }
    },
    "ELKHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature", "queries"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "queries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryDTO"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "ErrorTrackingHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature"],
          "properties": {
            "feature": {
              "type": "string"
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "FailMetricCustomThresholdSpec": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FailMetricThresholdSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/MetricThresholdSpec"
        },
        {
          "type": "object",
          "properties": {
            "spec": {
              "$ref": "#/definitions/FailMetricCustomThresholdSpec"
            }
          }
        }
      ]
    },
    "HealthSourceParamsDTO": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        }
      }
    },
    "HealthSourceSpec": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        }
      },
      "description": "This is the Health Source entity defined in Harness"
    },
    "IgnoreMetricThresholdSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/MetricThresholdSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "LiveMonitoringDTO": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "MetricResponseMapping": {
      "type": "object",
      "properties": {
        "metricValueJsonPath": {
          "type": "string"
        },
        "timestampJsonPath": {
          "type": "string"
        },
        "serviceInstanceJsonPath": {
          "type": "string"
        },
        "serviceInstanceListJsonPath": {
          "type": "string"
        },
        "relativeMetricListJsonPath": {
          "type": "string"
        },
        "relativeTimestampJsonPath": {
          "type": "string"
        },
        "relativeMetricValueJsonPath": {
          "type": "string"
        },
        "relativeServiceInstanceValueJsonPath": {
          "type": "string"
        },
        "timestampFormat": {
          "type": "string"
        }
      }
    },
    "MetricThreshold": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "groupName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "metricType": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/MetricThresholdSpec"
        },
        "criteria": {
          "$ref": "#/definitions/MetricThresholdCriteria"
        },
        "type": {
          "type": "string",
          "enum": ["IgnoreThreshold", "FailImmediately"]
        }
      }
    },
    "MetricThresholdCriteria": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Absolute", "Percentage"]
        },
        "spec": {
          "$ref": "#/definitions/MetricThresholdCriteriaSpec"
        }
      }
    },
    "MetricThresholdCriteriaSpec": {
      "type": "object",
      "properties": {
        "lessThan": {
          "type": "number",
          "format": "double"
        },
        "greaterThan": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "MetricThresholdSpec": {
      "type": "object",
      "required": ["action"],
      "discriminator": "type",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["Ignore", "FailImmediately", "FailAfterOccurrence", "FailAfterConsecutiveOccurrence"]
        }
      }
    },
    "NewRelicHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "applicationName": {
              "type": "string"
            },
            "applicationId": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "newRelicMetricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewRelicMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "NewRelicMetricDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "groupName": {
          "type": "string"
        },
        "nrql": {
          "type": "string"
        },
        "responseMapping": {
          "$ref": "#/definitions/MetricResponseMapping"
        }
      }
    },
    "NextGenHealthSourceSpec": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "metricPacks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeSeriesMetricPackDTO"
          }
        },
        "queryDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryDefinition"
          }
        },
        "healthSourceParams": {
          "$ref": "#/definitions/HealthSourceParamsDTO"
        }
      },
      "description": "This is the Health Source entity defined in Harness"
    },
    "PrometheusFilter": {
      "type": "object",
      "properties": {
        "labelName": {
          "type": "string"
        },
        "labelValue": {
          "type": "string"
        }
      }
    },
    "PrometheusHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrometheusMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "PrometheusMetricDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "query": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "serviceInstanceFieldName": {
          "type": "string"
        },
        "prometheusMetric": {
          "type": "string"
        },
        "serviceFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrometheusFilter"
          }
        },
        "envFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrometheusFilter"
          }
        },
        "additionalFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrometheusFilter"
          }
        },
        "aggregation": {
          "type": "string"
        },
        "isManualQuery": {
          "type": "boolean"
        }
      }
    },
    "QueryDTO": {
      "type": "object",
      "required": [
        "index",
        "messageIdentifier",
        "name",
        "query",
        "serviceInstanceIdentifier",
        "timeStampFormat",
        "timeStampIdentifier"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "index": {
          "type": "string"
        },
        "serviceInstanceIdentifier": {
          "type": "string"
        },
        "timeStampIdentifier": {
          "type": "string"
        },
        "timeStampFormat": {
          "type": "string"
        },
        "messageIdentifier": {
          "type": "string"
        }
      }
    },
    "QueryDefinition": {
      "type": "object",
      "required": ["identifier"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "queryParams": {
          "$ref": "#/definitions/QueryParamsDTO"
        },
        "liveMonitoringEnabled": {
          "type": "boolean"
        },
        "continuousVerificationEnabled": {
          "type": "boolean"
        },
        "sliEnabled": {
          "type": "boolean"
        },
        "query": {
          "type": "string"
        },
        "metricThresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricThreshold"
          }
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        }
      }
    },
    "QueryParamsDTO": {
      "type": "object",
      "properties": {
        "serviceInstanceField": {
          "type": "string"
        },
        "index": {
          "type": "string"
        },
        "timeStampIdentifier": {
          "type": "string"
        },
        "timeStampFormat": {
          "type": "string"
        },
        "messageIdentifier": {
          "type": "string"
        }
      }
    },
    "RestResponseHealthSourceSpec": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RiskProfile": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": ["Performance", "Errors", "Infrastructure"]
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "riskCategory": {
          "type": "string",
          "enum": [
            "Errors",
            "Infrastructure",
            "Performance_Throughput",
            "Performance_Other",
            "Performance_ResponseTime"
          ]
        },
        "thresholdTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["ACT_WHEN_LOWER", "ACT_WHEN_HIGHER"]
          }
        }
      }
    },
    "SLIDTO": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "SplunkHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature", "queries"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "queries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryDTO"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "SplunkMetricDefinition": {
      "type": "object",
      "required": ["groupName", "identifier", "metricName", "query"],
      "properties": {
        "groupName": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        }
      }
    },
    "SplunkMetricHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature"],
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "feature": {
              "type": "string"
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SplunkMetricDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "StackdriverDefinition": {
      "type": "object",
      "required": ["identifier", "metricName"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "riskProfile": {
          "$ref": "#/definitions/RiskProfile"
        },
        "analysis": {
          "$ref": "#/definitions/AnalysisDTO"
        },
        "sli": {
          "$ref": "#/definitions/SLIDTO"
        },
        "dashboardName": {
          "type": "string"
        },
        "dashboardPath": {
          "type": "string"
        },
        "jsonMetricDefinition": {
          "type": "object"
        },
        "jsonMetricDefinitionString": {
          "type": "string"
        },
        "metricTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceInstanceField": {
          "type": "string"
        },
        "isManualQuery": {
          "type": "boolean"
        }
      }
    },
    "StackdriverLogHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "required": ["feature", "queries"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "queries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryDTO"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "StackdriverMetricHealthSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/HealthSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metricPacks": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/TimeSeriesMetricPackDTO"
              }
            },
            "metricDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StackdriverDefinition"
              }
            }
          },
          "description": "This is the Health Source entity defined in Harness"
        }
      ]
    },
    "TimeSeriesMetricPackDTO": {
      "type": "object",
      "required": ["identifier"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricThresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricThreshold"
          }
        }
      }
    },
    "DynatraceServiceDTO": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "serviceMethodIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseListDynatraceServiceDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynatraceServiceDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DynatraceMetricDTO": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "metricId": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "ResponseListDynatraceMetricDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynatraceMetricDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseDynatraceServiceDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DynatraceServiceDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MetricPackValidationResponse": {
      "type": "object",
      "properties": {
        "metricValidationResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValidationResponse"
          }
        },
        "metricPackName": {
          "type": "string"
        },
        "overallStatus": {
          "type": "string",
          "enum": ["SUCCESS", "NO_DATA", "FAILED"]
        }
      }
    },
    "MetricValidationResponse": {
      "type": "object",
      "properties": {
        "metricName": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "NO_DATA", "FAILED"]
        }
      }
    },
    "ResponseSetMetricPackValidationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetricPackValidationResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DynatraceValidateDataRequestDTO": {
      "type": "object",
      "properties": {
        "serviceMethodsIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metricPacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricPackDTO"
          }
        }
      }
    },
    "DynatraceSampleDataRequestDTO": {
      "type": "object",
      "properties": {
        "metricSelector": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        }
      }
    },
    "RestResponseString": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogRecord": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "serviceInstance": {
          "type": "string"
        }
      }
    },
    "LogRecordsResponse": {
      "type": "object",
      "properties": {
        "logRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogRecord"
          }
        }
      }
    },
    "RestResponseLogRecordsResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LogRecordsResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "QueryRecordsRequest": {
      "type": "object",
      "required": ["connectorIdentifier", "endTime", "query", "startTime"],
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "healthSourceType": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "providerType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "healthSourceQueryParams": {
          "$ref": "#/definitions/QueryParamsDTO"
        },
        "healthSourceParams": {
          "$ref": "#/definitions/HealthSourceParamsDTO"
        }
      }
    },
    "HealthSourceRecordsResponse": {
      "type": "object",
      "properties": {
        "providerType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "rawRecords": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "RestResponseHealthSourceRecordsResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/HealthSourceRecordsResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "HealthSourceRecordsRequest": {
      "type": "object",
      "required": ["connectorIdentifier", "endTime", "query", "startTime"],
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "healthSourceType": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "providerType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "healthSourceQueryParams": {
          "$ref": "#/definitions/QueryParamsDTO"
        },
        "healthSourceParams": {
          "$ref": "#/definitions/HealthSourceParamsDTO"
        }
      }
    },
    "MetricRecordsResponse": {
      "type": "object",
      "properties": {
        "timeSeriesData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeries"
          }
        }
      }
    },
    "RestResponseMetricRecordsResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/MetricRecordsResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeries": {
      "type": "object",
      "properties": {
        "timeseriesName": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesDataPoint"
          }
        }
      }
    },
    "TimeSeriesDataPoint": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "HealthSourceParamValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HealthSourceParamValuesResponse": {
      "type": "object",
      "properties": {
        "paramName": {
          "type": "string"
        },
        "paramValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthSourceParamValue"
          }
        }
      }
    },
    "RestResponseHealthSourceParamValuesResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/HealthSourceParamValuesResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "HealthSourceParamValuesRequest": {
      "type": "object",
      "required": ["paramName", "providerType"],
      "properties": {
        "paramName": {
          "type": "string"
        },
        "healthSourceQueryParams": {
          "$ref": "#/definitions/QueryParamsDTO"
        },
        "healthSourceParams": {
          "$ref": "#/definitions/HealthSourceParamsDTO"
        },
        "providerType": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "connectorIdentifier": {
          "type": "string"
        }
      }
    },
    "HostRecordDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "hosts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TicketRequestDto": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "exists": {
          "type": "boolean"
        },
        "externalId": {
          "type": "string"
        },
        "identifiers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "issueType": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "RestResponseLogFeedback": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/LogFeedback"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogFeedbackHistory": {
      "type": "object",
      "properties": {
        "logFeedback": {
          "$ref": "#/definitions/LogFeedback"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        }
      }
    },
    "RestResponseListLogFeedbackHistory": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogFeedbackHistory"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LogRecordDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "verificationTaskId": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "RestResponseListMetricPackDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricPackDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "MetricDefinition": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "responseJsonPath": {
          "type": "string"
        },
        "validationResponseJsonPath": {
          "type": "string"
        },
        "included": {
          "type": "boolean"
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesThreshold"
          }
        }
      }
    },
    "MetricPack": {
      "type": "object",
      "required": ["category", "dataSourceType"],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "identifier": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["Performance", "Errors", "Infrastructure"]
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetricDefinition"
          }
        }
      }
    },
    "TimeSeriesThreshold": {
      "type": "object",
      "required": [
        "accountId",
        "action",
        "criteria",
        "dataSourceType",
        "metricIdentifier",
        "metricName",
        "metricPackIdentifier",
        "metricType",
        "orgIdentifier",
        "projectIdentifier"
      ],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "metricPackIdentifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "metricGroupName": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "enum": ["IGNORE", "FAIL"]
        },
        "criteria": {
          "$ref": "#/definitions/TimeSeriesThresholdCriteria"
        },
        "thresholdConfigType": {
          "type": "string",
          "enum": ["DEFAULT", "USER_DEFINED", "CUSTOMER"]
        },
        "deviationType": {
          "type": "string",
          "enum": ["HIGHER_IS_RISKY", "LOWER_IS_RISKY", "BOTH_ARE_RISKY"]
        }
      }
    },
    "HistoricalTrend": {
      "type": "object",
      "properties": {
        "healthScores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskData"
          }
        }
      }
    },
    "ResponseHistoricalTrend": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/HistoricalTrend"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RiskData": {
      "type": "object",
      "properties": {
        "healthScore": {
          "type": "integer",
          "format": "int32"
        },
        "riskStatus": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "timeRangeParams": {
          "$ref": "#/definitions/TimeRangeParams"
        }
      }
    },
    "TimeRangeParams": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "HealthMonitoringFlagResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "healthMonitoringEnabled": {
          "type": "boolean"
        }
      }
    },
    "RestResponseHealthMonitoringFlagResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/HealthMonitoringFlagResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseListHealthSourceDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthSourceDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ChangeSourceDTO": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessCDNextGen",
            "PagerDuty",
            "K8sCluster",
            "HarnessCD",
            "HarnessFF",
            "HarnessCE",
            "CustomDeploy",
            "CustomIncident",
            "CustomInfrastructure",
            "CustomFF"
          ]
        },
        "enabled": {
          "type": "boolean"
        },
        "spec": {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        "category": {
          "type": "string",
          "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
        }
      }
    },
    "ChangeSourceSpec": {
      "type": "object",
      "description": "This is the change Source entity defined in Harness"
    },
    "CustomChangeSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "webhookUrl": {
              "type": "string"
            },
            "webhookCurlCommand": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "HarnessCDChangeSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        {
          "type": "object",
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "HarnessCDCurrentGenChangeSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        {
          "type": "object",
          "required": ["harnessApplicationId", "harnessEnvironmentId", "harnessServiceId"],
          "properties": {
            "harnessApplicationId": {
              "type": "string"
            },
            "harnessServiceId": {
              "type": "string"
            },
            "harnessEnvironmentId": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "HealthSource": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "version": {
          "type": "string",
          "enum": ["v2"]
        },
        "spec": {
          "$ref": "#/definitions/NextGenHealthSourceSpec"
        }
      }
    },
    "KubernetesChangeSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "MonitoredServiceDTO": {
      "type": "object",
      "required": ["identifier", "name", "orgIdentifier", "projectIdentifier", "serviceRef", "type"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Application", "Infrastructure"]
        },
        "description": {
          "type": "string"
        },
        "serviceRef": {
          "type": "string"
        },
        "environmentRef": {
          "type": "string"
        },
        "environmentRefList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sources": {
          "$ref": "#/definitions/Sources"
        },
        "dependencies": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ServiceDependencyDTO"
          }
        },
        "notificationRuleRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRuleRefDTO"
          }
        },
        "template": {
          "$ref": "#/definitions/TemplateDTO"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "MonitoredServiceResponse": {
      "type": "object",
      "required": ["monitoredService"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "monitoredService": {
          "readOnly": true,
          "$ref": "#/definitions/MonitoredServiceDTO"
        }
      }
    },
    "NotificationRuleRefDTO": {
      "type": "object",
      "required": ["enabled", "notificationRuleRef"],
      "properties": {
        "notificationRuleRef": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "PagerDutyChangeSourceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ChangeSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "pagerDutyServiceId": {
              "type": "string"
            }
          },
          "description": "This is the change Source entity defined in Harness"
        }
      ]
    },
    "RestResponseMonitoredServiceResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/MonitoredServiceResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ServiceDependencyDTO": {
      "type": "object",
      "properties": {
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "dependencyMetadata": {
          "$ref": "#/definitions/ServiceDependencyMetadata"
        }
      }
    },
    "ServiceDependencyMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["KUBERNETES"]
        },
        "supportedChangeSourceTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "HarnessCDNextGen",
              "PagerDuty",
              "K8sCluster",
              "HarnessCD",
              "HarnessFF",
              "HarnessCE",
              "CustomDeploy",
              "CustomIncident",
              "CustomInfrastructure",
              "CustomFF"
            ]
          }
        }
      }
    },
    "Sources": {
      "type": "object",
      "properties": {
        "healthSources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HealthSource"
          }
        },
        "changeSources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ChangeSourceDTO"
          }
        }
      }
    },
    "TemplateDTO": {
      "type": "object",
      "required": ["templateRef", "versionLabel"],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        }
      }
    },
    "HealthScoreDTO": {
      "type": "object",
      "properties": {
        "currentHealthScore": {
          "$ref": "#/definitions/RiskData"
        },
        "dependentHealthScore": {
          "$ref": "#/definitions/RiskData"
        }
      }
    },
    "ResponseHealthScoreDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/HealthScoreDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "EnvironmentResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentResponseDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EnvironmentResponseDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "yaml": {
          "type": "string"
        }
      }
    },
    "ResponseListEnvironmentResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AnomaliesSummaryDTO": {
      "type": "object",
      "properties": {
        "logsAnomalies": {
          "type": "integer",
          "format": "int64"
        },
        "timeSeriesAnomalies": {
          "type": "integer",
          "format": "int64"
        },
        "totalAnomalies": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseAnomaliesSummaryDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/AnomaliesSummaryDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "CountServiceDTO": {
      "type": "object",
      "properties": {
        "allServicesCount": {
          "type": "integer",
          "format": "int32"
        },
        "servicesAtRiskCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MetricDTO": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        }
      }
    },
    "RestResponseListMetricDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "MonitoredServiceListItemDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "serviceRef": {
          "type": "string"
        },
        "environmentRef": {
          "type": "string"
        },
        "environmentRefList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceName": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Application", "Infrastructure"]
        },
        "healthMonitoringEnabled": {
          "type": "boolean"
        },
        "currentHealthScore": {
          "$ref": "#/definitions/RiskData"
        },
        "dependentHealthScore": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskData"
          }
        },
        "historicalTrend": {
          "$ref": "#/definitions/HistoricalTrend"
        },
        "changeSummary": {
          "$ref": "#/definitions/ChangeSummaryDTO"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceMonitoringEnabled": {
          "type": "boolean"
        },
        "sloHealthIndicators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SloHealthIndicatorDTO"
          }
        }
      }
    },
    "SloHealthIndicatorDTO": {
      "type": "object",
      "properties": {
        "serviceLevelObjectiveIdentifier": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "errorBudgetRemainingPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetRemainingMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "errorBudgetBurnRate": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetRisk": {
          "type": "string",
          "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
        }
      }
    },
    "PageMonitoredServiceResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageMonitoredServiceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageMonitoredServiceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "HealthSourceSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "MonitoredServiceWithHealthSources": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "healthSources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HealthSourceSummary"
          }
        }
      }
    },
    "ResponseListMonitoredServiceWithHealthSources": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceWithHealthSources"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MonitoredServiceChangeDetailSLO": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "outOfRange": {
          "type": "boolean"
        }
      }
    },
    "RestResponseListMonitoredServiceChangeDetailSLO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceChangeDetailSLO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "CVNGEmailChannelSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGNotificationChannelSpec"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "recipients": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "CVNGMSTeamsChannelSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGNotificationChannelSpec"
        },
        {
          "type": "object",
          "properties": {
            "msTeamKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "CVNGNotificationChannel": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Email", "Slack", "PagerDuty", "MsTeams"]
        },
        "spec": {
          "$ref": "#/definitions/CVNGNotificationChannelSpec"
        }
      }
    },
    "CVNGNotificationChannelSpec": {
      "type": "object"
    },
    "CVNGPagerDutyChannelSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGNotificationChannelSpec"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "integrationKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CVNGSlackChannelSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CVNGNotificationChannelSpec"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "webhookUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ChangeImpactConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "changeEventTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Deployment", "Infrastructure", "Incident"]
              }
            },
            "changeCategories": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
              }
            },
            "threshold": {
              "type": "number",
              "format": "double",
              "minimum": 0,
              "maximum": 100
            },
            "period": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ChangeObservedConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "changeEventTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Deployment", "Infrastructure", "Incident"]
              }
            },
            "changeCategories": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Deployment", "Infrastructure", "Alert", "FeatureFlag", "ChaosExperiment"]
              }
            }
          }
        }
      ]
    },
    "ErrorBudgetBurnRateConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "threshold": {
              "type": "number",
              "format": "double",
              "minimum": 0
            },
            "lookBackDuration": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ErrorBudgetRemainingMinutesConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "threshold": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "ErrorBudgetRemainingPercentageConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "threshold": {
              "type": "number",
              "format": "double",
              "minimum": 0
            }
          }
        }
      ]
    },
    "ErrorTrackingConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "errorTrackingEventTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Exceptions", "LogErrors", "HttpErrors", "CustomErrors", "TimeoutErrors"]
              }
            },
            "errorTrackingEventStatus": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["NewEvents", "CriticalEvents", "ResurfacedEvents"]
              }
            }
          }
        }
      ]
    },
    "HealthScoreConditionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        },
        {
          "type": "object",
          "properties": {
            "threshold": {
              "type": "number",
              "format": "double",
              "minimum": 0,
              "maximum": 100
            },
            "period": {
              "type": "string"
            }
          }
        }
      ]
    },
    "NotificationRuleCondition": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ErrorBudgetRemainingPercentage",
            "ErrorBudgetRemainingMinutes",
            "ErrorBudgetBurnRate",
            "ChangeImpact",
            "HealthScore",
            "ChangeObserved",
            "CodeErrors"
          ]
        },
        "spec": {
          "$ref": "#/definitions/NotificationRuleConditionSpec"
        }
      }
    },
    "NotificationRuleConditionSpec": {
      "type": "object"
    },
    "NotificationRuleDTO": {
      "type": "object",
      "required": ["conditions", "identifier", "name", "notificationMethod", "type"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["MonitoredService", "ServiceLevelObjective"]
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRuleCondition"
          }
        },
        "notificationMethod": {
          "$ref": "#/definitions/CVNGNotificationChannel"
        }
      }
    },
    "NotificationRuleResponse": {
      "type": "object",
      "required": ["notificationRule"],
      "properties": {
        "notificationRule": {
          "$ref": "#/definitions/NotificationRuleDTO"
        },
        "enabled": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageNotificationRuleResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRuleResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageNotificationRuleResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageNotificationRuleResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseMonitoredServiceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/MonitoredServiceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageMonitoredServiceListItemDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceListItemDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageMonitoredServiceListItemDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageMonitoredServiceListItemDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NewRelicApplication": {
      "type": "object",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "applicationId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseListNewRelicApplication": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewRelicApplication"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseMetricPackValidationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/MetricPackValidationResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseLinkedHashMap": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "OnboardingResponseDTO": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "result": {
          "type": "object"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "connectorIdentifier": {
          "type": "string"
        },
        "tracingId": {
          "type": "string"
        }
      }
    },
    "RestResponseOnboardingResponseDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/OnboardingResponseDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AppDynamicsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["accountname", "controllerUrl"],
          "properties": {
            "username": {
              "type": "string"
            },
            "accountname": {
              "type": "string"
            },
            "controllerUrl": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "passwordRef": {
              "type": "string"
            },
            "clientSecretRef": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            },
            "authType": {
              "type": "string",
              "enum": ["UsernamePassword", "ApiClientToken"]
            }
          }
        }
      ]
    },
    "ArtifactoryAuthCredentials": {
      "type": "object"
    },
    "ArtifactoryAuthentication": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/ArtifactoryAuthCredentials"
        }
      }
    },
    "ArtifactoryConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["artifactoryServerUrl"],
          "properties": {
            "artifactoryServerUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/ArtifactoryAuthentication"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ArtifactoryUsernamePasswordAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactoryAuthCredentials"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsCodeCommitAuthenticationDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["HTTPS"]
        },
        "spec": {
          "$ref": "#/definitions/AwsCodeCommitCredentialsDTO"
        }
      }
    },
    "AwsCodeCommitConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/AwsCodeCommitAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": ["Repo", "Region"]
            }
          }
        }
      ]
    },
    "AwsCodeCommitCredentialsDTO": {
      "type": "object"
    },
    "AwsCodeCommitHttpsCredentialsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCodeCommitCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AWSCredentials"]
            },
            "spec": {
              "$ref": "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "AwsCodeCommitHttpsCredentialsSpecDTO": {
      "type": "object"
    },
    "AwsCodeCommitSecretKeyAccessKeyDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCodeCommitHttpsCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessKeyRef": {
              "type": "string"
            },
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/AwsCredential"
            },
            "awsSdkClientBackOffStrategyOverride": {
              "$ref": "#/definitions/AwsSdkClientBackoffStrategy"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AwsCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "crossAccountAccess": {
          "$ref": "#/definitions/CrossAccountAccess"
        },
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig", "Irsa"]
        },
        "spec": {
          "$ref": "#/definitions/AwsCredentialSpec"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "AwsCredentialSpec": {
      "type": "object"
    },
    "AwsCurAttributes": {
      "type": "object",
      "required": ["reportName", "s3BucketName"],
      "properties": {
        "reportName": {
          "type": "string"
        },
        "s3BucketName": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "s3Prefix": {
          "type": "string"
        }
      }
    },
    "AwsEqualJitterBackoffStrategy": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSdkClientBackOffStrategySpec"
        },
        {
          "type": "object",
          "properties": {
            "baseDelay": {
              "type": "integer",
              "format": "int64"
            },
            "maxBackoffTime": {
              "type": "integer",
              "format": "int64"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "AwsFixedDelayBackoffStrategy": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSdkClientBackOffStrategySpec"
        },
        {
          "type": "object",
          "properties": {
            "fixedBackoff": {
              "type": "integer",
              "format": "int64"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "AwsFullJitterBackoffStrategy": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSdkClientBackOffStrategySpec"
        },
        {
          "type": "object",
          "properties": {
            "baseDelay": {
              "type": "integer",
              "format": "int64"
            },
            "maxBackoffTime": {
              "type": "integer",
              "format": "int64"
            },
            "retryCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "AwsKmsConnectorCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["AssumeIAMRole", "AssumeSTSRole", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/AwsKmsCredentialSpec"
        }
      }
    },
    "AwsKmsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential", "kmsArn", "region"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/AwsKmsConnectorCredential"
            },
            "kmsArn": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AwsKmsCredentialSpec": {
      "type": "object"
    },
    "AwsKmsCredentialSpecAssumeIAM": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsKmsCredentialSpec"
        },
        {
          "type": "object",
          "required": ["delegateSelectors"],
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            }
          }
        }
      ]
    },
    "AwsKmsCredentialSpecAssumeSTS": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsKmsCredentialSpec"
        },
        {
          "type": "object",
          "required": ["delegateSelectors", "roleArn"],
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            "roleArn": {
              "type": "string"
            },
            "externalName": {
              "type": "string"
            },
            "assumeStsRoleDuration": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "AwsKmsCredentialSpecManualConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsKmsCredentialSpec"
        },
        {
          "type": "object",
          "required": ["accessKey", "secretKey"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "secretKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsManualConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCredentialSpec"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessKeyRef": {
              "type": "string"
            },
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsSMCredentialSpecAssumeIAM": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSecretManagerCredentialSpec"
        },
        {
          "type": "object"
        }
      ]
    },
    "AwsSMCredentialSpecAssumeSTS": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSecretManagerCredentialSpec"
        },
        {
          "type": "object",
          "required": ["roleArn"],
          "properties": {
            "roleArn": {
              "type": "string"
            },
            "externalId": {
              "type": "string"
            },
            "assumeStsRoleDuration": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "AwsSMCredentialSpecManualConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsSecretManagerCredentialSpec"
        },
        {
          "type": "object",
          "required": ["accessKey", "secretKey"],
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "secretKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsSdkClientBackOffStrategySpec": {
      "type": "object"
    },
    "AwsSdkClientBackoffStrategy": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["FixedDelayBackoffStrategy", "EqualJitterBackoffStrategy", "FullJitterBackoffStrategy"]
        },
        "spec": {
          "$ref": "#/definitions/AwsSdkClientBackOffStrategySpec"
        }
      }
    },
    "AwsSecretManagerCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["AssumeIAMRole", "AssumeSTSRole", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/AwsSecretManagerCredentialSpec"
        }
      }
    },
    "AwsSecretManagerCredentialSpec": {
      "type": "object"
    },
    "AwsSecretManagerDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential", "region"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/AwsSecretManagerCredential"
            },
            "region": {
              "type": "string"
            },
            "secretNamePrefix": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureArtifactsAuthentication": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "spec": {
          "$ref": "#/definitions/AzureArtifactsHttpCredentials"
        }
      }
    },
    "AzureArtifactsConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["auth", "azureArtifactsUrl"],
          "properties": {
            "azureArtifactsUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/AzureArtifactsAuthentication"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureArtifactsHttpCredentials": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["PersonalAccessToken"]
        },
        "spec": {
          "$ref": "#/definitions/AzureArtifactsUsernameToken"
        }
      }
    },
    "AzureArtifactsUsernameToken": {
      "type": "object",
      "required": ["tokenRef"],
      "properties": {
        "tokenRef": {
          "type": "string"
        }
      }
    },
    "AzureAuthCredentialDTO": {
      "type": "object"
    },
    "AzureAuthDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Secret", "Certificate"]
        },
        "spec": {
          "$ref": "#/definitions/AzureAuthCredentialDTO"
        }
      }
    },
    "AzureClientKeyCertDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["certificateRef"],
          "properties": {
            "certificateRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureClientSecretKeyDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["secretRef"],
          "properties": {
            "secretRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["azureEnvironmentType", "credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/AzureCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "azureEnvironmentType": {
              "type": "string",
              "enum": ["AZURE", "AZURE_US_GOVERNMENT"]
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/AzureCredentialSpec"
        }
      }
    },
    "AzureCredentialSpec": {
      "type": "object"
    },
    "AzureInheritFromDelegateDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureCredentialSpec"
        },
        {
          "type": "object",
          "required": ["auth"],
          "properties": {
            "auth": {
              "readOnly": true,
              "$ref": "#/definitions/AzureMSIAuth"
            }
          }
        }
      ]
    },
    "AzureKeyVaultConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["subscription", "vaultName"],
          "properties": {
            "clientId": {
              "type": "string"
            },
            "secretKey": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "vaultName": {
              "type": "string"
            },
            "subscription": {
              "type": "string"
            },
            "azureEnvironmentType": {
              "type": "string",
              "enum": ["AZURE", "AZURE_US_GOVERNMENT"]
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "useManagedIdentity": {
              "type": "boolean"
            },
            "azureManagedIdentityType": {
              "type": "string",
              "enum": ["SystemAssignedManagedIdentity", "UserAssignedManagedIdentity"]
            },
            "managedClientId": {
              "type": "string"
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureMSIAuth": {
      "type": "object"
    },
    "AzureManualDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureCredentialSpec"
        },
        {
          "type": "object",
          "required": ["applicationId", "auth", "tenantId"],
          "properties": {
            "applicationId": {
              "type": "string",
              "readOnly": true
            },
            "tenantId": {
              "type": "string"
            },
            "auth": {
              "readOnly": true,
              "$ref": "#/definitions/AzureAuthDTO"
            }
          }
        }
      ]
    },
    "AzureRepoApiAccess": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Token"]
        },
        "spec": {
          "$ref": "#/definitions/AzureRepoApiAccessSpecDTO"
        }
      }
    },
    "AzureRepoApiAccessSpecDTO": {
      "type": "object"
    },
    "AzureRepoAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/AzureRepoCredentialsDTO"
        }
      }
    },
    "AzureRepoConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "validationRepo": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/AzureRepoAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/AzureRepoApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": ["Project", "Repo"]
            }
          }
        }
      ]
    },
    "AzureRepoCredentialsDTO": {
      "type": "object"
    },
    "AzureRepoHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernameToken"]
            },
            "spec": {
              "$ref": "#/definitions/AzureRepoHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "AzureRepoHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "AzureRepoSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureRepoTokenSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureRepoUsernameToken": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AzureSystemAssignedMSIAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureAuthCredentialDTO"
        },
        {
          "type": "object"
        }
      ]
    },
    "AzureUserAssignedMSIAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["clientId"],
          "properties": {
            "clientId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BambooAuthCredentialsDTO": {
      "type": "object"
    },
    "BambooAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous", "Bearer Token(HTTP Header)"]
        },
        "spec": {
          "$ref": "#/definitions/BambooAuthCredentialsDTO"
        }
      }
    },
    "BambooConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["bambooUrl"],
          "properties": {
            "bambooUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/BambooAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "BambooUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/BambooAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BillingExportSpec": {
      "type": "object",
      "required": ["containerName", "directoryName", "reportName", "storageAccountName", "subscriptionId"],
      "properties": {
        "storageAccountName": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "directoryName": {
          "type": "string"
        },
        "reportName": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "BitbucketApiAccess": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernameToken", "OAuth"]
        },
        "spec": {
          "$ref": "#/definitions/BitbucketApiAccessSpecDTO"
        }
      }
    },
    "BitbucketApiAccessSpecDTO": {
      "type": "object"
    },
    "BitbucketAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        }
      }
    },
    "BitbucketConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "validationRepo": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/BitbucketAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/BitbucketApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo", "Project"]
            }
          }
        }
      ]
    },
    "BitbucketCredentialsDTO": {
      "type": "object"
    },
    "BitbucketHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword"]
            },
            "spec": {
              "$ref": "#/definitions/BitbucketHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "BitbucketHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "BitbucketOauth": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["refreshTokenRef", "tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            },
            "refreshTokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BitbucketUsernameTokenApiAccess": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CEAwsConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["crossAccountAccess"],
          "properties": {
            "crossAccountAccess": {
              "$ref": "#/definitions/CrossAccountAccess"
            },
            "curAttributes": {
              "$ref": "#/definitions/AwsCurAttributes"
            },
            "awsAccountId": {
              "type": "string"
            },
            "isAWSGovCloudAccount": {
              "type": "boolean"
            },
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BILLING",
                  "OPTIMIZATION",
                  "VISIBILITY",
                  "GOVERNANCE",
                  "COMMITMENT_ORCHESTRATOR",
                  "CLUSTER_ORCHESTRATOR"
                ]
              }
            }
          }
        }
      ]
    },
    "CEAzureConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["subscriptionId", "tenantId"],
          "properties": {
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BILLING",
                  "OPTIMIZATION",
                  "VISIBILITY",
                  "GOVERNANCE",
                  "COMMITMENT_ORCHESTRATOR",
                  "CLUSTER_ORCHESTRATOR"
                ]
              }
            },
            "tenantId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "billingExportSpec": {
              "$ref": "#/definitions/BillingExportSpec"
            }
          }
        }
      ]
    },
    "CEKubernetesClusterConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["connectorRef"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BILLING",
                  "OPTIMIZATION",
                  "VISIBILITY",
                  "GOVERNANCE",
                  "COMMITMENT_ORCHESTRATOR",
                  "CLUSTER_ORCHESTRATOR"
                ]
              }
            }
          }
        }
      ]
    },
    "ConnectorConfigDTO": {
      "type": "object",
      "discriminator": "connectorType"
    },
    "ConnectorInfoDTO": {
      "type": "object",
      "required": ["identifier", "name", "spec", "type"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sCluster",
            "Git",
            "Splunk",
            "AppDynamics",
            "Prometheus",
            "Dynatrace",
            "Vault",
            "AzureKeyVault",
            "DockerRegistry",
            "Local",
            "AwsKms",
            "GcpKms",
            "AwsSecretManager",
            "Gcp",
            "Aws",
            "Azure",
            "Artifactory",
            "Jira",
            "Nexus",
            "Github",
            "Gitlab",
            "Bitbucket",
            "Codecommit",
            "CEAws",
            "CEAzure",
            "GcpCloudCost",
            "CEK8sCluster",
            "HttpHelmRepo",
            "NewRelic",
            "Datadog",
            "SumoLogic",
            "PagerDuty",
            "CustomHealth",
            "ServiceNow",
            "ErrorTracking",
            "Pdc",
            "AzureRepo",
            "Jenkins",
            "OciHelmRepo",
            "CustomSecretManager",
            "ElasticSearch",
            "GcpSecretManager",
            "AzureArtifacts",
            "Tas",
            "Spot",
            "Bamboo",
            "TerraformCloud"
          ]
        },
        "spec": {
          "$ref": "#/definitions/ConnectorConfigDTO"
        }
      }
    },
    "CrossAccountAccess": {
      "type": "object",
      "required": ["crossAccountRoleArn"],
      "properties": {
        "crossAccountRoleArn": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "CustomHealthConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["baseURL", "method"],
          "properties": {
            "baseURL": {
              "type": "string"
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomHealthKeyAndValue"
              }
            },
            "params": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomHealthKeyAndValue"
              }
            },
            "method": {
              "type": "string",
              "enum": ["GET", "POST"]
            },
            "validationBody": {
              "type": "string"
            },
            "validationPath": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "CustomHealthKeyAndValue": {
      "type": "object",
      "required": ["key"],
      "properties": {
        "key": {
          "type": "string"
        },
        "encryptedValueRef": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "valueEncrypted": {
          "type": "boolean"
        }
      }
    },
    "CustomSecretManager": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["template"],
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "onDelegate": {
              "type": "boolean"
            },
            "connectorRef": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "workingDirectory": {
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/TemplateLinkConfigForCustomSecretManager"
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "DataCollectionRequest": {
      "type": "object",
      "properties": {
        "connectorInfoDTO": {
          "$ref": "#/definitions/ConnectorInfoDTO"
        },
        "tracingId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "SPLUNK_SAVED_SEARCHES",
            "SPLUNK_SAMPLE_DATA",
            "SPLUNK_LATEST_HISTOGRAM",
            "STACKDRIVER_DASHBOARD_LIST",
            "STACKDRIVER_DASHBOARD_GET",
            "STACKDRIVER_SAMPLE_DATA",
            "STACKDRIVER_LOG_SAMPLE_DATA",
            "APPDYNAMICS_FETCH_APPS",
            "APPDYNAMICS_FETCH_TIERS",
            "APPDYNAMICS_GET_METRIC_DATA",
            "APPDYNAMICS_GET_SINGLE_METRIC_DATA",
            "APPDYNAMICS_FETCH_METRIC_STRUCTURE",
            "NEWRELIC_APPS_REQUEST",
            "NEWRELIC_VALIDATION_REQUEST",
            "PROMETHEUS_METRIC_LIST_GET",
            "PROMETHEUS_LABEL_NAMES_GET",
            "PROMETHEUS_LABEL_VALUES_GET",
            "PROMETHEUS_SAMPLE_DATA",
            "PAGERDUTY_SERVICES",
            "PAGERDUTY_REGISTER_WEBHOOK",
            "PAGERDUTY_DELETE_WEBHOOK",
            "DATADOG_DASHBOARD_LIST",
            "DATADOG_DASHBOARD_DETAILS",
            "DATADOG_METRIC_TAGS",
            "DATADOG_ACTIVE_METRICS",
            "DATADOG_TIME_SERIES_POINTS",
            "DATADOG_LOG_SAMPLE_DATA",
            "DATADOG_LOG_INDEXES",
            "NEWRELIC_SAMPLE_FETCH_REQUEST",
            "SYNC_DATA_COLLECTION",
            "CUSTOM_HEALTH_SAMPLE_DATA",
            "DYNATRACE_SERVICE_LIST_REQUEST",
            "DYNATRACE_SERVICE_DETAILS_REQUEST",
            "DYNATRACE_VALIDATION_REQUEST",
            "DYNATRACE_SAMPLE_DATA_REQUEST",
            "DYNATRACE_METRIC_LIST_REQUEST",
            "SPLUNK_METRIC_SAMPLE_DATA",
            "ELK_SAMPLE_DATA",
            "ELK_INDEX_DATA",
            "CLOUDWATCH_METRIC_SAMPLE_DATA_REQUEST",
            "CLOUDWATCH_METRIC_DATA_REQUEST",
            "CLOUDWATCH_METRICS_METADATA_REQUEST",
            "AWS_GENERIC_DATA_COLLECTION_REQUEST",
            "SUMOLOGIC_METRIC_SAMPLE_DATA",
            "SUMOLOGIC_LOG_SAMPLE_DATA"
          ]
        },
        "baseUrl": {
          "type": "string"
        },
        "dsl": {
          "type": "string"
        }
      }
    },
    "DatadogConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiKeyRef", "applicationKeyRef", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "applicationKeyRef": {
              "type": "string"
            },
            "apiKeyRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "DockerAuthCredentialsDTO": {
      "type": "object"
    },
    "DockerAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/DockerAuthCredentialsDTO"
        }
      }
    },
    "DockerConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["dockerRegistryUrl", "providerType"],
          "properties": {
            "dockerRegistryUrl": {
              "type": "string"
            },
            "providerType": {
              "type": "string",
              "enum": ["DockerHub", "Harbor", "Quay", "Other"]
            },
            "auth": {
              "$ref": "#/definitions/DockerAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "DockerUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/DockerAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DynatraceConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiTokenRef", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "apiTokenRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ELKConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "username": {
              "type": "string"
            },
            "apiKeyId": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            },
            "apiKeyRef": {
              "type": "string"
            },
            "authType": {
              "type": "string",
              "enum": ["UsernamePassword", "ApiClientToken", "None"]
            }
          }
        }
      ]
    },
    "ErrorTrackingConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiKeyRef", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "apiKeyRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GcpBillingExportSpec": {
      "type": "object",
      "required": ["datasetId", "tableId"],
      "properties": {
        "datasetId": {
          "type": "string"
        },
        "tableId": {
          "type": "string"
        }
      }
    },
    "GcpCloudCostConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["projectId", "serviceAccountEmail"],
          "properties": {
            "featuresEnabled": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BILLING",
                  "OPTIMIZATION",
                  "VISIBILITY",
                  "GOVERNANCE",
                  "COMMITMENT_ORCHESTRATOR",
                  "CLUSTER_ORCHESTRATOR"
                ]
              }
            },
            "projectId": {
              "type": "string"
            },
            "serviceAccountEmail": {
              "type": "string"
            },
            "billingExportSpec": {
              "$ref": "#/definitions/GcpBillingExportSpec"
            }
          }
        }
      ]
    },
    "GcpConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/GcpConnectorCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GcpConnectorCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/GcpCredentialSpec"
        }
      }
    },
    "GcpCredentialSpec": {
      "type": "object"
    },
    "GcpKmsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credentials", "keyName", "keyRing", "projectId", "region"],
          "properties": {
            "projectId": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "keyRing": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "credentials": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GcpManualDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/GcpCredentialSpec"
        },
        {
          "type": "object",
          "required": ["secretKeyRef"],
          "properties": {
            "secretKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GcpSecretManager": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credentialsRef"],
          "properties": {
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GitAuthenticationDTO": {
      "type": "object",
      "discriminator": "type"
    },
    "GitConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["connectionType", "spec", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "validationRepo": {
              "type": "string"
            },
            "branchName": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": ["Http", "Ssh"]
            },
            "connectionType": {
              "type": "string",
              "enum": ["Account", "Repo", "Project"]
            },
            "spec": {
              "$ref": "#/definitions/GitAuthenticationDTO"
            }
          }
        }
      ]
    },
    "GitHTTPAuthenticationDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/GitAuthenticationDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitSSHAuthenticationDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/GitAuthenticationDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubApiAccess": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["GithubApp", "Token", "OAuth"]
        },
        "spec": {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        }
      }
    },
    "GithubApiAccessSpecDTO": {
      "type": "object"
    },
    "GithubAppSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["privateKeyRef"],
          "properties": {
            "installationId": {
              "type": "string"
            },
            "applicationId": {
              "type": "string"
            },
            "installationIdRef": {
              "type": "string"
            },
            "applicationIdRef": {
              "type": "string"
            },
            "privateKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/GithubCredentialsDTO"
        }
      }
    },
    "GithubConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "validationRepo": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/GithubAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/GithubApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo", "Project"]
            }
          }
        }
      ]
    },
    "GithubCredentialsDTO": {
      "type": "object"
    },
    "GithubHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword", "UsernameToken", "OAuth"]
            },
            "spec": {
              "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "GithubHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "GithubOauth": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubTokenSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubUsernameToken": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabApiAccess": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Token", "OAuth"]
        },
        "spec": {
          "$ref": "#/definitions/GitlabApiAccessSpecDTO"
        }
      }
    },
    "GitlabApiAccessSpecDTO": {
      "type": "object"
    },
    "GitlabAuthentication": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "Ssh"]
        },
        "spec": {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        }
      }
    },
    "GitlabConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["authentication", "type", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "validationRepo": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/GitlabAuthentication"
            },
            "apiAccess": {
              "$ref": "#/definitions/GitlabApiAccess"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": ["Account", "Repo", "Project"]
            }
          }
        }
      ]
    },
    "GitlabCredentialsDTO": {
      "type": "object"
    },
    "GitlabHttpCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UsernamePassword", "UsernameToken", "Kerberos", "OAuth"]
            },
            "spec": {
              "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
            }
          }
        }
      ]
    },
    "GitlabHttpCredentialsSpecDTO": {
      "type": "object"
    },
    "GitlabKerberos": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["kerberosKeyRef"],
          "properties": {
            "kerberosKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabOauth": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["refreshTokenRef", "tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            },
            "refreshTokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabSshCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["sshKeyRef"],
          "properties": {
            "sshKeyRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabTokenSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabApiAccessSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            },
            "apiUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabUsernamePassword": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GitlabUsernameToken": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabHttpCredentialsSpecDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HostDTO": {
      "type": "object",
      "required": ["hostname"],
      "properties": {
        "hostname": {
          "type": "string"
        },
        "hostAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "HttpHelmAuthCredentialsDTO": {
      "type": "object"
    },
    "HttpHelmAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/HttpHelmAuthCredentialsDTO"
        }
      }
    },
    "HttpHelmConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["helmRepoUrl"],
          "properties": {
            "helmRepoUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/HttpHelmAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "HttpHelmUsernamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/HttpHelmAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JenkinsAuthCredentialsDTO": {
      "type": "object"
    },
    "JenkinsAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous", "Bearer Token(HTTP Header)"]
        },
        "spec": {
          "$ref": "#/definitions/JenkinsAuthCredentialsDTO"
        }
      }
    },
    "JenkinsBearerTokenDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/JenkinsAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["tokenRef"],
          "properties": {
            "tokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JenkinsConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["jenkinsUrl"],
          "properties": {
            "jenkinsUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/JenkinsAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JenkinsUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/JenkinsAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraAuthCredentialsDTO": {
      "type": "object"
    },
    "JiraAuthenticationDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "PersonalAccessToken"]
        },
        "spec": {
          "$ref": "#/definitions/JiraAuthCredentialsDTO"
        }
      }
    },
    "JiraConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["auth", "jiraUrl"],
          "properties": {
            "jiraUrl": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "auth": {
              "$ref": "#/definitions/JiraAuthenticationDTO"
            }
          }
        }
      ]
    },
    "JiraPATDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/JiraAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["patRef"],
          "properties": {
            "patRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/JiraAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesAuthCredentialDTO": {
      "type": "object"
    },
    "KubernetesAuthDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "ClientKeyCert", "ServiceAccount", "OpenIdConnect"]
        },
        "spec": {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        }
      }
    },
    "KubernetesClientKeyCertDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["clientCertRef", "clientKeyRef"],
          "properties": {
            "caCertRef": {
              "type": "string"
            },
            "clientCertRef": {
              "type": "string"
            },
            "clientKeyRef": {
              "type": "string"
            },
            "clientKeyPassphraseRef": {
              "type": "string"
            },
            "clientKeyAlgo": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesClusterConfigDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/KubernetesCredentialDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "KubernetesClusterDetailsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesCredentialSpecDTO"
        },
        {
          "type": "object",
          "required": ["auth", "masterUrl"],
          "properties": {
            "masterUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/KubernetesAuthDTO"
            }
          }
        }
      ]
    },
    "KubernetesCredentialDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["InheritFromDelegate", "ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/KubernetesCredentialSpecDTO"
        }
      }
    },
    "KubernetesCredentialSpecDTO": {
      "type": "object"
    },
    "KubernetesOpenIdConnectDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["oidcClientIdRef", "oidcPasswordRef"],
          "properties": {
            "oidcIssuerUrl": {
              "type": "string"
            },
            "oidcUsername": {
              "type": "string"
            },
            "oidcUsernameRef": {
              "type": "string"
            },
            "oidcClientIdRef": {
              "type": "string"
            },
            "oidcPasswordRef": {
              "type": "string"
            },
            "oidcSecretRef": {
              "type": "string"
            },
            "oidcScopes": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesServiceAccountDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["serviceAccountTokenRef"],
          "properties": {
            "serviceAccountTokenRef": {
              "type": "string"
            },
            "caCertRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "KubernetesUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesAuthCredentialDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "LocalConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "NameValuePairWithDefault": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "useAsDefault": {
          "type": "boolean"
        }
      }
    },
    "NewRelicConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiKeyRef", "newRelicAccountId", "url"],
          "properties": {
            "newRelicAccountId": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "apiKeyRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NexusAuthCredentials": {
      "type": "object"
    },
    "NexusAuthentication": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/NexusAuthCredentials"
        }
      }
    },
    "NexusConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["nexusServerUrl", "version"],
          "properties": {
            "nexusServerUrl": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/NexusAuthentication"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NexusUsernamePasswordAuth": {
      "allOf": [
        {
          "$ref": "#/definitions/NexusAuthCredentials"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "OciHelmAuthCredentialsDTO": {
      "type": "object"
    },
    "OciHelmAuthenticationDTO": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "Anonymous"]
        },
        "spec": {
          "$ref": "#/definitions/OciHelmAuthCredentialsDTO"
        }
      }
    },
    "OciHelmConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["helmRepoUrl"],
          "properties": {
            "helmRepoUrl": {
              "type": "string"
            },
            "auth": {
              "$ref": "#/definitions/OciHelmAuthenticationDTO"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "OciHelmUsernamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/OciHelmAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "OnboardingRequestDTO": {
      "type": "object",
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "tracingId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "dataCollectionRequest": {
          "$ref": "#/definitions/DataCollectionRequest"
        }
      }
    },
    "PagerDutyConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["apiTokenRef"],
          "properties": {
            "apiTokenRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PhysicalDataCenterConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "properties": {
            "hosts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostDTO"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PrometheusConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomHealthKeyAndValue"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ServiceNowADFSDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceNowAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["adfsUrl", "certificateRef", "clientIdRef", "privateKeyRef", "resourceIdRef"],
          "properties": {
            "certificateRef": {
              "type": "string"
            },
            "privateKeyRef": {
              "type": "string"
            },
            "clientIdRef": {
              "type": "string"
            },
            "resourceIdRef": {
              "type": "string"
            },
            "adfsUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ServiceNowAuthCredentialsDTO": {
      "type": "object"
    },
    "ServiceNowAuthenticationDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["UsernamePassword", "AdfsClientCredentialsWithCertificate"]
        },
        "spec": {
          "$ref": "#/definitions/ServiceNowAuthCredentialsDTO"
        }
      }
    },
    "ServiceNowConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["auth", "serviceNowUrl"],
          "properties": {
            "serviceNowUrl": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "auth": {
              "$ref": "#/definitions/ServiceNowAuthenticationDTO"
            }
          }
        }
      ]
    },
    "ServiceNowUserNamePasswordDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceNowAuthCredentialsDTO"
        },
        {
          "type": "object",
          "required": ["passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SplunkConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["accountId", "passwordRef", "splunkUrl"],
          "properties": {
            "splunkUrl": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "accountId": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SpotConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/SpotCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SpotCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["PermanentTokenConfig"]
        },
        "spec": {
          "$ref": "#/definitions/SpotCredentialSpec"
        }
      }
    },
    "SpotCredentialSpec": {
      "type": "object"
    },
    "SpotPermanentTokenConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/SpotCredentialSpec"
        },
        {
          "type": "object",
          "required": ["apiTokenRef"],
          "properties": {
            "spotAccountId": {
              "type": "string"
            },
            "spotAccountIdRef": {
              "type": "string"
            },
            "apiTokenRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SumoLogicConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["accessIdRef", "accessKeyRef", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "accessIdRef": {
              "type": "string"
            },
            "accessKeyRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TasConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential"],
          "properties": {
            "credential": {
              "$ref": "#/definitions/TasCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "TasCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ManualConfig"]
        },
        "spec": {
          "$ref": "#/definitions/TasCredentialSpec"
        }
      }
    },
    "TasCredentialSpec": {
      "type": "object"
    },
    "TasManualDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/TasCredentialSpec"
        },
        {
          "type": "object",
          "required": ["endpointUrl", "passwordRef"],
          "properties": {
            "username": {
              "type": "string"
            },
            "endpointUrl": {
              "type": "string",
              "readOnly": true
            },
            "usernameRef": {
              "type": "string"
            },
            "passwordRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TemplateLinkConfigForCustomSecretManager": {
      "type": "object",
      "required": ["templateRef", "versionLabel"],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        },
        "templateInputs": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NameValuePairWithDefault"
            }
          }
        }
      }
    },
    "TerraformCloudConnector": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["credential", "terraformCloudUrl"],
          "properties": {
            "terraformCloudUrl": {
              "type": "string"
            },
            "credential": {
              "$ref": "#/definitions/TerraformCloudCredential"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "executeOnDelegate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "TerraformCloudCredential": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ApiToken"]
        },
        "spec": {
          "$ref": "#/definitions/TerraformCloudCredentialSpec"
        }
      }
    },
    "TerraformCloudCredentialSpec": {
      "type": "object"
    },
    "TerraformCloudTokenCredentials": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformCloudCredentialSpec"
        },
        {
          "type": "object",
          "required": ["apiToken"],
          "properties": {
            "apiToken": {
              "type": "string",
              "readOnly": true
            }
          }
        }
      ]
    },
    "VaultConnectorDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectorConfigDTO"
        },
        {
          "type": "object",
          "required": ["renewalIntervalMinutes", "vaultUrl"],
          "properties": {
            "authToken": {
              "type": "string"
            },
            "basePath": {
              "type": "string"
            },
            "vaultUrl": {
              "type": "string"
            },
            "renewalIntervalMinutes": {
              "type": "integer",
              "format": "int64"
            },
            "secretEngineManuallyConfigured": {
              "type": "boolean"
            },
            "secretEngineName": {
              "type": "string"
            },
            "appRoleId": {
              "type": "string"
            },
            "secretId": {
              "type": "string"
            },
            "secretEngineVersion": {
              "type": "integer",
              "format": "int32"
            },
            "delegateSelectors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "namespace": {
              "type": "string"
            },
            "sinkPath": {
              "type": "string"
            },
            "useVaultAgent": {
              "type": "boolean"
            },
            "useAwsIam": {
              "type": "boolean"
            },
            "awsRegion": {
              "type": "string"
            },
            "vaultAwsIamRole": {
              "type": "string"
            },
            "xvaultAwsIamServerId": {
              "type": "string"
            },
            "useK8sAuth": {
              "type": "boolean"
            },
            "vaultK8sAuthRole": {
              "type": "string"
            },
            "serviceAccountTokenPath": {
              "type": "string"
            },
            "k8sAuthEndpoint": {
              "type": "string"
            },
            "renewAppRoleToken": {
              "type": "boolean"
            },
            "accessType": {
              "type": "string",
              "enum": ["APP_ROLE", "TOKEN", "VAULT_AGENT", "AWS_IAM", "K8s_AUTH"]
            },
            "readOnly": {
              "type": "boolean"
            },
            "default": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "PagerDutyServiceDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "RestResponseListPagerDutyServiceDetail": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerDutyServiceDetail"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SampleDataDTO": {
      "type": "object",
      "required": ["groupName", "jsonResponse", "metricValueJSONPath", "timestampJSONPath"],
      "properties": {
        "jsonResponse": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "metricValueJSONPath": {
          "type": "string"
        },
        "timestampJSONPath": {
          "type": "string"
        },
        "timestampFormat": {
          "type": "string"
        }
      }
    },
    "PrometheusSampleData": {
      "type": "object",
      "properties": {
        "metricDetails": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoint"
          }
        }
      }
    },
    "ResponseListPrometheusSampleData": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrometheusSampleData"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponseListRiskCategoryDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskCategoryDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RiskCategoryDTO": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "enum": [
            "Errors",
            "Infrastructure",
            "Performance_Throughput",
            "Performance_Other",
            "Performance_ResponseTime"
          ]
        },
        "displayName": {
          "type": "string"
        },
        "timeSeriesMetricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "cvMonitoringCategory": {
          "type": "string",
          "enum": ["Performance", "Errors", "Infrastructure"]
        }
      }
    },
    "DataPoints": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MetricGraph": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoints"
          }
        },
        "metricName": {
          "type": "string"
        },
        "metricIdentifier": {
          "type": "string"
        }
      }
    },
    "MetricOnboardingGraph": {
      "type": "object",
      "properties": {
        "metricGraphs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetricGraph"
          }
        },
        "metricPercentageGraph": {
          "$ref": "#/definitions/RatioMetricPercentageGraph"
        }
      }
    },
    "RatioMetricPercentageGraph": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoints"
          }
        },
        "metricIdentifier1": {
          "type": "string"
        },
        "metricIdentifier2": {
          "type": "string"
        }
      }
    },
    "RestResponseMetricOnboardingGraph": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/MetricOnboardingGraph"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseTimeGraphResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/TimeGraphResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeGraphResponse": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoints"
          }
        }
      }
    },
    "RatioSLIMetricSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/SLIMetricSpec"
        },
        {
          "type": "object",
          "required": ["eventType", "metric1", "metric2", "thresholdType", "thresholdValue"],
          "properties": {
            "eventType": {
              "type": "string",
              "enum": ["Good", "Bad"]
            },
            "metric1": {
              "type": "string"
            },
            "metric2": {
              "type": "string"
            },
            "thresholdValue": {
              "type": "number",
              "format": "double"
            },
            "thresholdType": {
              "type": "string",
              "enum": [">", "<", ">=", "<="]
            },
            "considerConsecutiveMinutes": {
              "type": "integer",
              "format": "int32",
              "maximum": 30
            },
            "considerAllConsecutiveMinutesFromStartAsBad": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "RequestBasedServiceLevelIndicatorSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceLevelIndicatorSpec"
        },
        {
          "type": "object",
          "required": ["eventType", "metric1", "metric2"],
          "properties": {
            "eventType": {
              "type": "string",
              "enum": ["Good", "Bad"]
            },
            "metric1": {
              "type": "string"
            },
            "metric2": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SLIMetricSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "ServiceLevelIndicatorDTO": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Window", "Request"]
        },
        "spec": {
          "$ref": "#/definitions/ServiceLevelIndicatorSpec"
        },
        "healthSourceRef": {
          "type": "string"
        }
      }
    },
    "ServiceLevelIndicatorSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "ThresholdSLIMetricSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/SLIMetricSpec"
        },
        {
          "type": "object",
          "required": ["metric1", "thresholdType", "thresholdValue"],
          "properties": {
            "metric1": {
              "type": "string"
            },
            "thresholdValue": {
              "type": "number",
              "format": "double"
            },
            "thresholdType": {
              "type": "string",
              "enum": [">", "<", ">=", "<="]
            },
            "considerConsecutiveMinutes": {
              "type": "integer",
              "format": "int32",
              "maximum": 30
            },
            "considerAllConsecutiveMinutesFromStartAsBad": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "WindowBasedServiceLevelIndicatorSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceLevelIndicatorSpec"
        },
        {
          "type": "object",
          "required": ["spec"],
          "properties": {
            "spec": {
              "$ref": "#/definitions/SLIMetricSpec"
            },
            "sliMissingDataType": {
              "type": "string",
              "enum": ["Good", "Bad", "Ignore"]
            },
            "type": {
              "type": "string",
              "enum": ["Threshold", "Ratio"]
            }
          }
        }
      ]
    },
    "RestResponseSLIOnboardingGraphs": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/SLIOnboardingGraphs"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SLIOnboardingGraphs": {
      "type": "object",
      "properties": {
        "sliGraph": {
          "$ref": "#/definitions/TimeGraphResponse"
        },
        "metricGraphs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MetricGraph"
          }
        }
      }
    },
    "RestResponseListSplunkSavedSearch": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SplunkSavedSearch"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SplunkSavedSearch": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "searchQuery": {
          "type": "string"
        }
      }
    },
    "RestResponseListLinkedHashMap": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseSortedSetTimeSeriesSampleDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeSeriesSampleDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseSetTimeSeriesSampleDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeSeriesSampleDTO"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PageStackdriverDashboardDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackdriverDashboardDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageStackdriverDashboardDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageStackdriverDashboardDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StackdriverDashboardDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "DataSet": {
      "type": "object",
      "properties": {
        "timeSeriesQuery": {
          "type": "object"
        },
        "metricName": {
          "type": "string"
        }
      }
    },
    "ResponseListStackdriverDashboardDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackdriverDashboardDetail"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StackdriverDashboardDetail": {
      "type": "object",
      "properties": {
        "widgetName": {
          "type": "string"
        },
        "dataSetList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSet"
          }
        }
      }
    },
    "MetricData": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        }
      }
    },
    "RestResponseTimeSeriesTestDataDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/TimeSeriesTestDataDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesTestDataDTO": {
      "type": "object",
      "properties": {
        "cvConfigId": {
          "type": "string"
        },
        "transactionMetricValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        },
        "metricGroupValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricData"
              }
            }
          }
        }
      }
    },
    "PagerDutyIncidentDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "self": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "urgency": {
          "type": "string"
        },
        "html_url": {
          "type": "string",
          "readOnly": true
        },
        "priority": {
          "$ref": "#/definitions/PagerDutyObject"
        },
        "assignees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagerDutyObject"
          }
        },
        "escalation_policy": {
          "readOnly": true,
          "$ref": "#/definitions/PagerDutyObject"
        }
      }
    },
    "PagerDutyObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "html_url": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PagerDutyWebhookEvent": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/PagerDutyWebhookEventDTO"
        }
      }
    },
    "PagerDutyWebhookEventDTO": {
      "type": "object",
      "properties": {
        "event_type": {
          "type": "string",
          "readOnly": true
        },
        "occurred_at": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "data": {
          "$ref": "#/definitions/PagerDutyIncidentDTO"
        }
      }
    },
    "CustomChangeWebhookEventDetail": {
      "type": "object",
      "required": ["description", "name"],
      "properties": {
        "description": {
          "type": "string"
        },
        "changeEventDetailsLink": {
          "type": "string"
        },
        "externalLinkToEntity": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomChangeWebhookPayload": {
      "type": "object",
      "required": ["endTime", "eventDetail", "startTime", "user"],
      "properties": {
        "eventIdentifier": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "type": "string"
        },
        "eventDetail": {
          "$ref": "#/definitions/CustomChangeWebhookEventDetail"
        }
      }
    },
    "AnalyzedLogDataDTO": {
      "type": "object",
      "properties": {
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "logData": {
          "$ref": "#/definitions/LogData"
        }
      }
    },
    "FrequencyDTO": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LogData": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "label": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "riskScore": {
          "type": "number",
          "format": "double"
        },
        "riskStatus": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "trend": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrequencyDTO"
          }
        },
        "tag": {
          "type": "string",
          "enum": ["KNOWN", "UNEXPECTED", "UNKNOWN"]
        }
      }
    },
    "PageAnalyzedLogDataDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzedLogDataDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponsePageAnalyzedLogDataDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PageAnalyzedLogDataDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LiveMonitoringLogAnalysisClusterDTO": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "tag": {
          "type": "string",
          "enum": ["KNOWN", "UNEXPECTED", "UNKNOWN"]
        }
      }
    },
    "RestResponseListLiveMonitoringLogAnalysisClusterDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveMonitoringLogAnalysisClusterDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AnalyzedRadarChartLogDataDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "label": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "riskScore": {
          "type": "number",
          "format": "double"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "frequencyData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrequencyDTO"
          }
        },
        "clusterType": {
          "type": "string",
          "enum": ["KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        }
      }
    },
    "AnalyzedRadarChartLogDataWithCountDTO": {
      "type": "object",
      "properties": {
        "totalClusters": {
          "type": "integer",
          "format": "int32"
        },
        "eventCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveMonitoringEventCount"
          }
        },
        "logAnalysisRadarCharts": {
          "$ref": "#/definitions/PageAnalyzedRadarChartLogDataDTO"
        }
      }
    },
    "LiveMonitoringEventCount": {
      "type": "object",
      "properties": {
        "clusterType": {
          "type": "string",
          "enum": ["KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "PageAnalyzedRadarChartLogDataDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzedRadarChartLogDataDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponseAnalyzedRadarChartLogDataWithCountDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/AnalyzedRadarChartLogDataWithCountDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "LiveMonitoringLogAnalysisRadarChartClusterDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "risk": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "angle": {
          "type": "number",
          "format": "double"
        },
        "radius": {
          "type": "number",
          "format": "double"
        },
        "clusterType": {
          "type": "string",
          "enum": ["KNOWN_EVENT", "UNEXPECTED_FREQUENCY", "UNKNOWN_EVENT"]
        }
      }
    },
    "RestResponseListLiveMonitoringLogAnalysisRadarChartClusterDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveMonitoringLogAnalysisRadarChartClusterDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "Edge": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "RestResponseServiceDependencyGraphDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/ServiceDependencyGraphDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ServiceDependencyGraphDTO": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSummaryDetails"
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Edge"
          }
        }
      }
    },
    "ServiceSummaryDetails": {
      "type": "object",
      "properties": {
        "identifierRef": {
          "type": "string"
        },
        "serviceRef": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "environmentRef": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "riskScore": {
          "type": "number",
          "format": "double"
        },
        "riskLevel": {
          "type": "string",
          "enum": ["NO_DATA", "NO_ANALYSIS", "HEALTHY", "OBSERVE", "NEED_ATTENTION", "UNHEALTHY"]
        },
        "riskData": {
          "$ref": "#/definitions/RiskData"
        },
        "type": {
          "type": "string",
          "enum": ["Application", "Infrastructure"]
        }
      }
    },
    "PageTimeSeriesMetricDataDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesMetricDataDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "RestResponsePageTimeSeriesMetricDataDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/PageTimeSeriesMetricDataDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "TimeSeriesMetricDataDTO": {
      "type": "object",
      "properties": {
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "metricType": {
          "type": "string",
          "enum": ["INFRA", "RESP_TIME", "THROUGHPUT", "ERROR", "APDEX", "OTHER"]
        },
        "dataSourceType": {
          "type": "string",
          "enum": [
            "APP_DYNAMICS",
            "SPLUNK",
            "SPLUNK_METRIC",
            "STACKDRIVER",
            "STACKDRIVER_LOG",
            "KUBERNETES",
            "NEW_RELIC",
            "PROMETHEUS",
            "DATADOG_METRICS",
            "DATADOG_LOG",
            "ERROR_TRACKING",
            "DYNATRACE",
            "CUSTOM_HEALTH_METRIC",
            "CUSTOM_HEALTH_LOG",
            "ELASTICSEARCH",
            "CLOUDWATCH_METRICS",
            "AWS_PROMETHEUS",
            "SUMOLOGIC_METRICS",
            "SUMOLOGIC_LOG"
          ]
        },
        "monitoredServiceDataSourceType": {
          "type": "string",
          "enum": [
            "AppDynamics",
            "NewRelic",
            "StackdriverLog",
            "Stackdriver",
            "Prometheus",
            "Splunk",
            "DatadogMetrics",
            "DatadogLog",
            "Dynatrace",
            "ErrorTracking",
            "CustomHealthMetric",
            "CustomHealthLog",
            "SplunkMetric",
            "ElasticSearch",
            "CloudWatchMetrics",
            "AwsPrometheus",
            "SumologicMetrics",
            "SumologicLogs"
          ]
        },
        "category": {
          "type": "string",
          "enum": ["Performance", "Errors", "Infrastructure"]
        },
        "groupName": {
          "type": "string"
        },
        "metricName": {
          "type": "string"
        },
        "metricDataList": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetricData"
          }
        }
      }
    },
    "AffectedEntity": {
      "type": "object",
      "required": ["envName", "monitoredServiceIdentifier", "serviceName"],
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "envName": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        }
      }
    },
    "AllEntitiesRule": {
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesRule"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "DowntimeDTO": {
      "type": "object",
      "required": ["category", "entitiesRule", "identifier", "name", "orgIdentifier", "projectIdentifier", "spec"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "category": {
          "type": "string",
          "enum": ["ScheduledMaintenance", "Deployment", "Other"]
        },
        "scope": {
          "type": "string",
          "enum": ["Project", "Entity"]
        },
        "spec": {
          "$ref": "#/definitions/DowntimeSpecDTO"
        },
        "entitiesRule": {
          "$ref": "#/definitions/EntitiesRule"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "DowntimeDuration": {
      "type": "object",
      "required": ["durationType", "durationValue"],
      "properties": {
        "durationType": {
          "type": "string",
          "enum": ["Minutes", "Hours", "Days", "Weeks"]
        },
        "durationValue": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DowntimeRecurrence": {
      "type": "object",
      "required": ["recurrenceType", "recurrenceValue"],
      "properties": {
        "recurrenceType": {
          "type": "string",
          "enum": ["Day", "Week", "Month", "Year"]
        },
        "recurrenceValue": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DowntimeResponse": {
      "type": "object",
      "required": ["downtime"],
      "properties": {
        "downtime": {
          "readOnly": true,
          "$ref": "#/definitions/DowntimeDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DowntimeSpec": {
      "type": "object",
      "required": ["timezone"],
      "discriminator": "type",
      "properties": {
        "timezone": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "startDateTime": {
          "type": "string"
        }
      }
    },
    "DowntimeSpecDTO": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Onetime", "Recurring"]
        },
        "spec": {
          "$ref": "#/definitions/DowntimeSpec"
        }
      }
    },
    "EntitiesRule": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "affectedEntity": {
          "$ref": "#/definitions/AffectedEntity"
        },
        "type": {
          "type": "string",
          "enum": ["All", "Identifiers"]
        }
      }
    },
    "EntityDetails": {
      "type": "object",
      "required": ["entityRef"],
      "properties": {
        "entityRef": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "EntityIdentifiersRule": {
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesRule"
        },
        {
          "type": "object",
          "required": ["entityIdentifiers"],
          "properties": {
            "entityIdentifiers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityDetails"
              }
            }
          }
        }
      ]
    },
    "OnetimeDowntimeSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DowntimeSpec"
        },
        {
          "type": "object",
          "required": ["spec"],
          "properties": {
            "spec": {
              "$ref": "#/definitions/OnetimeSpec"
            },
            "type": {
              "type": "string",
              "enum": ["Duration", "EndTime"]
            }
          }
        }
      ]
    },
    "OnetimeDurationBasedSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/OnetimeSpec"
        },
        {
          "type": "object",
          "required": ["downtimeDuration"],
          "properties": {
            "downtimeDuration": {
              "$ref": "#/definitions/DowntimeDuration"
            }
          }
        }
      ]
    },
    "OnetimeEndTimeBasedSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/OnetimeSpec"
        },
        {
          "type": "object",
          "properties": {
            "endTime": {
              "type": "integer",
              "format": "int64"
            },
            "endDateTime": {
              "type": "string"
            }
          }
        }
      ]
    },
    "OnetimeSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "RecurringDowntimeSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DowntimeSpec"
        },
        {
          "type": "object",
          "required": ["downtimeDuration", "downtimeRecurrence"],
          "properties": {
            "recurrenceEndTime": {
              "type": "integer",
              "format": "int64"
            },
            "recurrenceEndDateTime": {
              "type": "string"
            },
            "downtimeDuration": {
              "$ref": "#/definitions/DowntimeDuration"
            },
            "downtimeRecurrence": {
              "$ref": "#/definitions/DowntimeRecurrence"
            }
          }
        }
      ]
    },
    "RestResponseDowntimeResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/DowntimeResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "DowntimeListView": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["ScheduledMaintenance", "Deployment", "Other"]
        },
        "affectedEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffectedEntity"
          }
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/DowntimeDuration"
        },
        "downtimeStatusDetails": {
          "$ref": "#/definitions/DowntimeStatusDetails"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastModified": {
          "$ref": "#/definitions/LastModified"
        },
        "spec": {
          "$ref": "#/definitions/DowntimeSpecDTO"
        },
        "pastOrActiveInstancesCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DowntimeStatusDetails": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["Active", "Scheduled"]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "endDateTime": {
          "type": "string"
        }
      }
    },
    "LastModified": {
      "type": "object",
      "properties": {
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageDowntimeListView": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DowntimeListView"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageDowntimeListView": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageDowntimeListView"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DowntimeHistoryView": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": ["ScheduledMaintenance", "Deployment", "Other"]
        },
        "affectedEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffectedEntity"
          }
        },
        "duration": {
          "$ref": "#/definitions/DowntimeDuration"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "startDateTime": {
          "type": "string"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "endDateTime": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/DowntimeSpecDTO"
        },
        "downtimeDetails": {
          "$ref": "#/definitions/DowntimeSpecDTO"
        }
      }
    },
    "PageDowntimeHistoryView": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DowntimeHistoryView"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageDowntimeHistoryView": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageDowntimeHistoryView"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MonitoredServiceDetail": {
      "type": "object",
      "properties": {
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "monitoredServiceName": {
          "type": "string"
        },
        "healthSourceIdentifier": {
          "type": "string"
        },
        "healthSourceName": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "projectParams": {
          "$ref": "#/definitions/ProjectParams"
        },
        "projectName": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        }
      }
    },
    "ProjectParams": {
      "type": "object",
      "required": ["accountIdentifier"],
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        }
      }
    },
    "RestResponseListMonitoredServiceDetail": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceDetail"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "MSDropdownResponse": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "serviceRef": {
          "type": "string"
        },
        "environmentRef": {
          "type": "string"
        }
      }
    },
    "PageMSDropdownResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MSDropdownResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageMSDropdownResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageMSDropdownResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponseNotificationRuleResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/NotificationRuleResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "AnnotationDTO": {
      "type": "object",
      "required": ["endTime", "message", "sloIdentifier", "startTime"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "sloIdentifier": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AnnotationResponse": {
      "type": "object",
      "required": ["annotation"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "annotation": {
          "readOnly": true,
          "$ref": "#/definitions/AnnotationDTO"
        }
      }
    },
    "RestResponseAnnotationResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/AnnotationResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "PageSLOHealthListView": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SLOHealthListView"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageSLOHealthListView": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageSLOHealthListView"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SLOError": {
      "type": "object",
      "required": ["failedState"],
      "properties": {
        "failedState": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        },
        "sloErrorType": {
          "type": "string",
          "enum": ["DataCollectionFailure", "SimpleSLODeletion"]
        }
      }
    },
    "SLOHealthListView": {
      "type": "object",
      "required": [
        "burnRate",
        "errorBudgetRemaining",
        "errorBudgetRemainingPercentage",
        "errorBudgetRisk",
        "evaluationType",
        "name",
        "noOfActiveAlerts",
        "projectParams",
        "sloIdentifier",
        "sloTargetPercentage",
        "sloType",
        "totalErrorBudget"
      ],
      "properties": {
        "sloIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "monitoredServiceName": {
          "type": "string"
        },
        "healthSourceIdentifier": {
          "type": "string"
        },
        "healthSourceName": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "userJourneyName": {
          "type": "string"
        },
        "userJourneys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJourneyDTO"
          }
        },
        "burnRate": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetRemainingPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetRemaining": {
          "type": "integer",
          "format": "int32"
        },
        "totalErrorBudget": {
          "type": "integer",
          "format": "int32"
        },
        "sloTargetType": {
          "type": "string",
          "enum": ["Rolling", "Calender"]
        },
        "sliType": {
          "type": "string",
          "enum": ["Availability", "Latency"]
        },
        "sloType": {
          "type": "string",
          "enum": ["Simple", "Composite"]
        },
        "sloTargetPercentage": {
          "type": "number",
          "format": "double"
        },
        "noOfActiveAlerts": {
          "type": "integer",
          "format": "int32"
        },
        "evaluationType": {
          "type": "string",
          "enum": ["Window", "Request"]
        },
        "downtimeStatusDetails": {
          "$ref": "#/definitions/DowntimeStatusDetails"
        },
        "projectParams": {
          "$ref": "#/definitions/ProjectParams"
        },
        "sloError": {
          "$ref": "#/definitions/SLOError"
        },
        "errorBudgetRisk": {
          "type": "string",
          "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
        }
      }
    },
    "UserJourneyDTO": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResponseListUnavailabilityInstancesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnavailabilityInstancesResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UnavailabilityInstancesResponse": {
      "type": "object",
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "MonitoredServiceDisabled",
            "MaintenanceWindow",
            "DataCollectionFailed",
            "DataRecollectionPassed",
            "DataRestored"
          ]
        },
        "entityIdentifier": {
          "type": "string"
        },
        "entityType": {
          "type": "string",
          "enum": ["MaintenanceWindow", "Slo", "MonitoredService"]
        }
      }
    },
    "ResponseListSecondaryEventsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecondaryEventsResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecondaryEventsResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Downtime", "DataCollectionFailure", "Annotation", "ErrorBudgetReset"]
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AnnotationInstance": {
      "type": "object",
      "required": ["message", "uuid"],
      "properties": {
        "uuid": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AnnotationInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryEventDetails"
        },
        {
          "type": "object",
          "properties": {
            "annotations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnnotationInstance"
              }
            }
          }
        }
      ]
    },
    "DataCollectionFailureInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryEventDetails"
        },
        {
          "type": "object",
          "required": ["message"],
          "properties": {
            "message": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DowntimeInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryEventDetails"
        },
        {
          "type": "object"
        }
      ]
    },
    "ResponseSecondaryEventDetailsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SecondaryEventDetailsResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SLOErrorBudgetResetInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/SecondaryEventDetails"
        },
        {
          "type": "object",
          "properties": {
            "errorBudgetIncrementMinutes": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "SecondaryEventDetails": {
      "type": "object",
      "discriminator": "type"
    },
    "SecondaryEventDetailsResponse": {
      "type": "object",
      "required": ["details", "startTime", "type"],
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": ["Downtime", "DataCollectionFailure", "Annotation", "ErrorBudgetReset"]
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "$ref": "#/definitions/SecondaryEventDetails"
        }
      }
    },
    "CalenderSLOTargetSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/SLOTargetSpec"
        },
        {
          "type": "object",
          "required": ["spec"],
          "properties": {
            "spec": {
              "$ref": "#/definitions/CalenderSpec"
            },
            "type": {
              "type": "string",
              "enum": ["Weekly", "Monthly", "Quarterly"]
            }
          }
        }
      ]
    },
    "CalenderSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "MonthlyCalenderSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CalenderSpec"
        },
        {
          "type": "object",
          "required": ["dayOfMonth"],
          "properties": {
            "dayOfMonth": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "QuarterlyCalenderSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CalenderSpec"
        },
        {
          "type": "object"
        }
      ]
    },
    "RollingSLOTargetSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/SLOTargetSpec"
        },
        {
          "type": "object",
          "required": ["periodLength"],
          "properties": {
            "periodLength": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SLODashboardApiFilter": {
      "type": "object",
      "properties": {
        "userJourneyIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "sliTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Availability", "Latency"]
          }
        },
        "targetTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Rolling", "Calender"]
          }
        },
        "errorBudgetRisks": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
          }
        },
        "searchFilter": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Simple", "Composite"]
        },
        "sloTargetFilterDTO": {
          "$ref": "#/definitions/SLOTargetFilterDTO"
        },
        "compositeSLOIdentifier": {
          "type": "string"
        },
        "evaluationType": {
          "type": "string",
          "enum": ["Window", "Request"]
        },
        "childResource": {
          "type": "boolean"
        }
      }
    },
    "SLOTargetFilterDTO": {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Rolling", "Calender"]
        },
        "spec": {
          "$ref": "#/definitions/SLOTargetSpec"
        }
      }
    },
    "SLOTargetSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "WeeklyCalendarSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CalenderSpec"
        },
        {
          "type": "object",
          "required": ["dayOfWeek"],
          "properties": {
            "dayOfWeek": {
              "type": "string",
              "enum": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
            }
          }
        }
      ]
    },
    "BurnRate": {
      "type": "object",
      "required": ["currentRatePercentage"],
      "properties": {
        "currentRatePercentage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Point": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "ResponseSLODashboardDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SLODashboardDetail"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SLODashboardDetail": {
      "type": "object",
      "properties": {
        "sloDashboardWidget": {
          "$ref": "#/definitions/SLODashboardWidget"
        },
        "description": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "timeRangeFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeRangeFilter"
          }
        }
      }
    },
    "SLODashboardWidget": {
      "type": "object",
      "required": [
        "burnRate",
        "currentPeriodEndTime",
        "currentPeriodLengthDays",
        "currentPeriodStartTime",
        "errorBudgetBurndown",
        "errorBudgetRemaining",
        "errorBudgetRemainingPercentage",
        "errorBudgetRisk",
        "sloIdentifier",
        "sloPerformanceTrend",
        "sloTargetPercentage",
        "sloTargetType",
        "sloType",
        "timeRemainingDays",
        "title",
        "totalErrorBudget"
      ],
      "properties": {
        "sloIdentifier": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "monitoredServiceName": {
          "type": "string"
        },
        "healthSourceIdentifier": {
          "type": "string"
        },
        "healthSourceName": {
          "type": "string"
        },
        "serviceIdentifier": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "monitoredServiceDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitoredServiceDetail"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": ["Availability", "Latency"]
        },
        "evaluationType": {
          "type": "string",
          "enum": ["Window", "Request"]
        },
        "sloType": {
          "type": "string",
          "enum": ["Simple", "Composite"]
        },
        "burnRate": {
          "$ref": "#/definitions/BurnRate"
        },
        "timeRemainingDays": {
          "type": "integer",
          "format": "int32"
        },
        "errorBudgetRemainingPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetRemaining": {
          "type": "integer",
          "format": "int64"
        },
        "totalErrorBudget": {
          "type": "integer",
          "format": "int64"
        },
        "sloTargetType": {
          "type": "string",
          "enum": ["Rolling", "Calender"]
        },
        "currentPeriodLengthDays": {
          "type": "integer",
          "format": "int32"
        },
        "currentPeriodStartTime": {
          "type": "integer",
          "format": "int64"
        },
        "currentPeriodEndTime": {
          "type": "integer",
          "format": "int64"
        },
        "sloTargetPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetBurndown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "sloPerformanceTrend": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point"
          }
        },
        "sloError": {
          "$ref": "#/definitions/SLOError"
        },
        "recalculatingSLI": {
          "type": "boolean"
        },
        "errorBudgetRisk": {
          "type": "string",
          "enum": ["EXHAUSTED", "UNHEALTHY", "NEED_ATTENTION", "OBSERVE", "HEALTHY"]
        },
        "calculatingSLI": {
          "type": "boolean"
        },
        "totalErrorBudgetApplicable": {
          "type": "boolean"
        }
      }
    },
    "TimeRangeFilter": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "durationMilliSeconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageSLOConsumptionBreakdown": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SLOConsumptionBreakdown"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageSLOConsumptionBreakdown": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageSLOConsumptionBreakdown"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SLOConsumptionBreakdown": {
      "type": "object",
      "required": [
        "contributedErrorBudgetBurned",
        "errorBudgetBurned",
        "projectParams",
        "sliStatusPercentage",
        "sloIdentifier",
        "sloName",
        "sloTargetPercentage",
        "weightagePercentage"
      ],
      "properties": {
        "sloIdentifier": {
          "type": "string"
        },
        "sloName": {
          "type": "string"
        },
        "monitoredServiceIdentifier": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "environmentIdentifier": {
          "type": "string"
        },
        "sliType": {
          "type": "string",
          "enum": ["Availability", "Latency"]
        },
        "weightagePercentage": {
          "type": "number",
          "format": "double"
        },
        "sloTargetPercentage": {
          "type": "number",
          "format": "double"
        },
        "sliStatusPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetBurned": {
          "type": "integer",
          "format": "int64"
        },
        "contributedErrorBudgetBurned": {
          "type": "integer",
          "format": "int32"
        },
        "projectParams": {
          "$ref": "#/definitions/ProjectParams"
        },
        "orgName": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "sloError": {
          "$ref": "#/definitions/SLOError"
        }
      }
    },
    "ResponseSLORiskCountResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SLORiskCountResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RiskCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "identifier": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "SLORiskCountResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "riskCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskCount"
          }
        }
      }
    },
    "CompositeServiceLevelObjectiveSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceLevelObjectiveSpec"
        },
        {
          "type": "object",
          "required": ["serviceLevelObjectivesDetails"],
          "properties": {
            "serviceLevelObjectivesDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceLevelObjectiveDetailsDTO"
              },
              "maxItems": 20,
              "minItems": 2
            },
            "evaluationType": {
              "type": "string",
              "enum": ["Window", "Request"]
            }
          }
        }
      ]
    },
    "ServiceLevelObjectiveDetailsDTO": {
      "type": "object",
      "required": [
        "accountId",
        "orgIdentifier",
        "projectIdentifier",
        "serviceLevelObjectiveRef",
        "weightagePercentage"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "serviceLevelObjectiveRef": {
          "type": "string"
        },
        "weightagePercentage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "RestResponseServiceLevelObjectiveV2Response": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/ServiceLevelObjectiveV2Response"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SLOTargetDTO": {
      "type": "object",
      "required": ["sloTargetPercentage", "spec"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Rolling", "Calender"]
        },
        "sloTargetPercentage": {
          "type": "number",
          "format": "double"
        },
        "spec": {
          "$ref": "#/definitions/SLOTargetSpec"
        }
      }
    },
    "ServiceLevelObjectiveSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "ServiceLevelObjectiveV2DTO": {
      "type": "object",
      "required": ["identifier", "name", "sloTarget", "spec", "type", "userJourneyRefs"],
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userJourneyRefs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sloTarget": {
          "$ref": "#/definitions/SLOTargetDTO"
        },
        "type": {
          "type": "string",
          "enum": ["Simple", "Composite"]
        },
        "spec": {
          "$ref": "#/definitions/ServiceLevelObjectiveSpec"
        },
        "notificationRuleRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRuleRefDTO"
          }
        }
      }
    },
    "ServiceLevelObjectiveV2Response": {
      "type": "object",
      "required": ["serviceLevelObjectiveV2"],
      "properties": {
        "serviceLevelObjectiveV2": {
          "readOnly": true,
          "$ref": "#/definitions/ServiceLevelObjectiveV2DTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SimpleServiceLevelObjectiveSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceLevelObjectiveSpec"
        },
        {
          "type": "object",
          "required": ["healthSourceRef", "monitoredServiceRef", "serviceLevelIndicators"],
          "properties": {
            "monitoredServiceRef": {
              "type": "string"
            },
            "healthSourceRef": {
              "type": "string"
            },
            "serviceLevelIndicatorType": {
              "type": "string",
              "enum": ["Availability", "Latency"]
            },
            "serviceLevelIndicators": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceLevelIndicatorDTO"
              }
            }
          }
        }
      ]
    },
    "PageServiceLevelObjectiveV2Response": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceLevelObjectiveV2Response"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageServiceLevelObjectiveV2Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageServiceLevelObjectiveV2Response"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponseSLOErrorBudgetResetDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/SLOErrorBudgetResetDTO"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "SLOErrorBudgetResetDTO": {
      "type": "object",
      "properties": {
        "serviceLevelObjectiveIdentifier": {
          "type": "string"
        },
        "errorBudgetIncrementPercentage": {
          "type": "number",
          "format": "double"
        },
        "errorBudgetIncrementMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "remainingErrorBudgetAtReset": {
          "type": "integer",
          "format": "int32"
        },
        "errorBudgetAtReset": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string"
        },
        "validUntil": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RestResponseListSLOErrorBudgetResetDTO": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SLOErrorBudgetResetDTO"
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseUserJourneyResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "$ref": "#/definitions/UserJourneyResponse"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "UserJourneyResponse": {
      "type": "object",
      "required": ["userJourney"],
      "properties": {
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "userJourney": {
          "readOnly": true,
          "$ref": "#/definitions/UserJourneyDTO"
        }
      }
    },
    "PageUserJourneyResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJourneyResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "ResponsePageUserJourneyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageUserJourneyResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ReferenceDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseSRMLicenseUsageDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/SRMLicenseUsageDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SRMLicenseUsageDTO": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "activeServices": {
          "$ref": "#/definitions/UsageDataDTO"
        }
      }
    },
    "UsageDataDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "displayName": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDTO"
          }
        }
      }
    }
  }
}
