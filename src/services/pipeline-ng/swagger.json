{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "PMS API Reference",
    "contact": {}
  },
  "host": "localhost",
  "tags": [
    {
      "name": "filters"
    },
    {
      "name": "triggers"
    },
    {
      "name": "webhook"
    },
    {
      "name": "landingDashboards"
    },
    {
      "name": "pipelines"
    },
    {
      "name": "dashboard"
    },
    {
      "name": "approvals"
    },
    {
      "name": "barriers"
    },
    {
      "name": "health"
    },
    {
      "name": "inputSets"
    },
    {
      "name": "opa"
    },
    {
      "name": "pipelinesexecution"
    },
    {
      "name": "pipelineexecution-input"
    },
    {
      "name": "pipelineexecute"
    },
    {
      "name": "resource-constraints"
    },
    {
      "name": "yaml-schema"
    },
    {
      "name": "refresh-template"
    },
    {
      "name": "waitStep"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/filters/{identifier}": {
      "get": {
        "tags": ["filters"],
        "summary": "Get Filter",
        "description": "",
        "operationId": "getFilter",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["filters"],
        "summary": "Delete a filter",
        "description": "",
        "operationId": "deleteFilter",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/filters": {
      "get": {
        "tags": ["filters"],
        "summary": "Get Filter",
        "description": "",
        "operationId": "getFilterList",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["filters"],
        "summary": "Create a Filter",
        "description": "",
        "operationId": "postFilter",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDTO"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["filters"],
        "summary": "Update a Filter",
        "description": "",
        "operationId": "updateFilter",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterDTO"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseFilterDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/triggers/{triggerIdentifier}": {
      "get": {
        "tags": ["triggers"],
        "summary": "Gets a trigger by identifier",
        "description": "",
        "operationId": "getTrigger",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGTriggerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["triggers"],
        "summary": "Update a trigger by identifier",
        "description": "",
        "operationId": "updateTrigger",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NGTriggerConfigV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGTriggerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["triggers"],
        "summary": "Delete a trigger by identifier",
        "description": "",
        "operationId": "deleteTrigger",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/triggers": {
      "get": {
        "tags": ["triggers"],
        "summary": "Gets paginated Triggers list for target",
        "description": "",
        "operationId": "getTriggerListForTarget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageNGTriggerDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["triggers"],
        "summary": "Create Trigger",
        "description": "",
        "operationId": "createTrigger",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withServiceV2",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NGTriggerConfigV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGTriggerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/triggers/{triggerIdentifier}/details": {
      "get": {
        "tags": ["triggers"],
        "summary": "Fetches Trigger details for a specific pipeline and trigger identifier, ",
        "description": "",
        "operationId": "getTriggerDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGTriggerDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/triggers/regenerateToken": {
      "get": {
        "tags": ["triggers"],
        "summary": "Regenerate webhook token",
        "description": "",
        "operationId": "generateWebhookToken",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/triggers/{triggerIdentifier}/status": {
      "put": {
        "tags": ["triggers"],
        "summary": "Update a trigger's status by identifier",
        "description": "",
        "operationId": "updateTriggerStatus",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/githubIssueCommentActions": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getGithubIssueCommentActions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGithubIssueCommentAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/triggerExecutionDetails/{eventId}": {
      "get": {
        "tags": ["webhook"],
        "summary": "fetch webhook event details with execution summary",
        "description": "",
        "operationId": "triggerExecutionDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWebhookExecutionDetails"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/sourceRepos": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getSourceRepoToEvent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMapWebhookSourceRepoListWebhookEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/gitTriggerEventDetails": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get trigger git actions with Events",
        "description": "",
        "operationId": "getGitTriggerEventDetails",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMapStringMapStringListString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/webhookTriggerTypes": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getWebhookTriggerTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListWebhookTriggerType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/githubTriggerEvents": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getGithubTriggerEvents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGithubTriggerEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/githubPRActions": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getGithubPRActions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGithubPRAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/gitlabTriggerEvents": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getGitlabTriggerEvents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGitlabTriggerEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/gitlabPRActions": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getGitlabPRActions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListGitlabPRAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/bitbucketTriggerEvents": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getBitbucketTriggerEvents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListBitbucketTriggerEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/bitbucketPRActions": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Source Repo types with Events",
        "description": "",
        "operationId": "getBitbucketPRActions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListBitbucketPRAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/actions": {
      "get": {
        "tags": ["webhook"],
        "summary": "Get Actions for event type and source",
        "description": "",
        "operationId": "getActionsList",
        "parameters": [
          {
            "name": "sourceRepo",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["AZURE_REPO", "GITHUB", "GITLAB", "BITBUCKET", "AWS_CODECOMMIT", "CUSTOM"]
          },
          {
            "name": "event",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListWebhookAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/custom": {
      "post": {
        "tags": ["webhook"],
        "summary": "accept custom webhook event",
        "description": "",
        "operationId": "customWebhookEndpoint",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/trigger": {
      "post": {
        "tags": ["webhook"],
        "summary": "accept webhook event",
        "description": "",
        "operationId": "webhookEndpoint",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/custom/v2": {
      "post": {
        "tags": ["webhook"],
        "summary": "accept custom webhook event V2",
        "description": "",
        "operationId": "customWebhookEndpointV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "triggerIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNGProcessWebhookResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/webhook/triggerProcessingDetails": {
      "get": {
        "tags": ["webhook"],
        "summary": "fetch webhook event details",
        "description": "",
        "operationId": "triggerProcessingDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWebhookEventProcessingDetails"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/landingDashboards/pipelinesCount": {
      "post": {
        "tags": ["landingDashboards"],
        "summary": "Get pipelines count",
        "description": "",
        "operationId": "getPipelinesCount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LandingDashboardRequestPMS"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelinesCount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/pipelineExecution": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Get pipeline execution",
        "description": "",
        "operationId": "getPipelineExecution",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleInfo",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardPipelineExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipelines/pipelineHealth": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Get pipeline health",
        "description": "",
        "operationId": "getPipelinedHealth",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleInfo",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardPipelineHealthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/dashboard/pipelineExecution": {
      "get": {
        "tags": ["dashboard"],
        "summary": "Get pipeline dashboard Execution",
        "description": "",
        "operationId": "getPipelineDashboardExecution",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleInfo",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardPipelineExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboard/pipelineHealth": {
      "get": {
        "tags": ["dashboard"],
        "summary": "Get pipeline health",
        "description": "",
        "operationId": "fetchPipelineHealth",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleInfo",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardPipelineHealthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/approvals/{approvalInstanceId}/harness/authorization": {
      "get": {
        "tags": ["approvals"],
        "summary": "Gets a Harness Approval Instance authorization for the current user",
        "description": "",
        "operationId": "getHarnessApprovalInstanceAuthorization",
        "parameters": [
          {
            "name": "approvalInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseHarnessApprovalInstanceAuthorization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/approvals/{approvalInstanceId}": {
      "get": {
        "tags": ["approvals"],
        "summary": "Gets an Approval Instance by identifier",
        "description": "",
        "operationId": "getApprovalInstance",
        "parameters": [
          {
            "name": "approvalInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseApprovalInstanceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/approvals/stage-yaml-snippet": {
      "get": {
        "tags": ["approvals"],
        "summary": "Gets the initial yaml snippet for Approval stage",
        "description": "",
        "operationId": "getInitialStageYamlSnippet",
        "parameters": [
          {
            "name": "approvalType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["HarnessApproval", "JiraApproval", "CustomApproval", "ServiceNowApproval"]
          },
          {
            "name": "routingId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/approvals/{approvalInstanceId}/harness/activity": {
      "post": {
        "tags": ["approvals"],
        "summary": "Approve or Reject a Pipeline Execution",
        "description": "",
        "operationId": "addHarnessApprovalActivity",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "approvalInstanceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HarnessApprovalActivityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseApprovalInstanceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/barriers/setupInfo": {
      "put": {
        "tags": ["barriers"],
        "summary": "Gets barriers setup info list",
        "description": "",
        "operationId": "getBarriersSetupInfoList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListBarrierSetupInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/barriers/executionInfo": {
      "get": {
        "tags": ["barriers"],
        "summary": "Gets barriers execution info list",
        "description": "",
        "operationId": "getBarriersExecutionInfo",
        "parameters": [
          {
            "name": "stageSetupId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListBarrierExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/barriers/info": {
      "get": {
        "tags": ["barriers"],
        "summary": "Gets barriers info",
        "description": "",
        "operationId": "getBarrierInfo",
        "parameters": [
          {
            "name": "barrierSetupId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBarrierInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "get health for PMS service",
        "description": "",
        "operationId": "getPMSHealthStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          }
        }
      }
    },
    "/inputSets/{inputSetIdentifier}": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets an InputSet by identifier",
        "description": "",
        "operationId": "getInputSetForPipeline",
        "parameters": [
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["inputSets"],
        "summary": "Update an InputSet by identifier",
        "description": "",
        "operationId": "updateInputSetForPipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": ["inputSets"],
        "summary": "Delete an InputSet by identifier",
        "description": "",
        "operationId": "deleteInputSetForPipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/mergeWithTemplateYaml": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Merges given runtime input YAML on pipeline and return Input Set template format of applied pipeline",
        "description": "",
        "operationId": "getMergeInputSetFromPipelineTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMergeInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/merge": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Merges given Input Sets list on pipeline and return Input Set template format of applied pipeline",
        "description": "",
        "operationId": "getMergeInputSetFromPipelineTemplateWithListInput",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseMergeInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets InputSets list for a pipeline",
        "description": "",
        "operationId": "getInputSetsListForPipeline",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputSetType",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": ["ALL", "INPUT_SET", "OVERLAY_INPUT_SET"]
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrders",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePageInputSetSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["inputSets"],
        "summary": "Create an InputSet For Pipeline",
        "description": "",
        "operationId": "createInputSetForPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/overlay": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Create an Overlay InputSet For Pipeline",
        "description": "",
        "operationId": "createOverlayInputSetForPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/overlay/{inputSetIdentifier}": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Gets an Overlay InputSet by identifier",
        "description": "",
        "operationId": "getOverlayInputSetForPipeline",
        "parameters": [
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["inputSets"],
        "summary": "Update an Overlay InputSet by identifier",
        "description": "",
        "operationId": "updateOverlayInputSetForPipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseOverlayInputSetResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/{inputSetIdentifier}/sanitise": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Sanitise an InputSet",
        "description": "",
        "operationId": "sanitiseInputSet",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetSanitiseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/{inputSetIdentifier}/yaml-diff": {
      "get": {
        "tags": ["inputSets"],
        "summary": "Get sanitised YAML for an InputSet",
        "description": "",
        "operationId": "yamlDiffForInputSet",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetYamlDiff"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/template": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Get template from a pipeline YAML",
        "description": "",
        "operationId": "getTemplateFromPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputSetTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetTemplateWithReplacedExpressionsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/inputSets/import/{inputSetIdentifier}": {
      "post": {
        "tags": ["inputSets"],
        "summary": "Get Input Set YAML from Git Repository",
        "description": "",
        "operationId": "importInputSet",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForceImport",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputSetImportRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetImportResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/opa/getPipelineOpaContextFromEvaluation/{planExecutionId}": {
      "get": {
        "tags": ["opa"],
        "summary": "get pipeline opa context from evaluation",
        "description": "",
        "operationId": "getPipelineOpaContextFromEvaluation",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "opaAction",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineOpaEvaluationContext"
            }
          }
        }
      }
    },
    "/opa/getPipelineOpaContext": {
      "post": {
        "tags": ["opa"],
        "summary": "get pipeline opa context",
        "description": "",
        "operationId": "getPipelineOpaContext",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "opaAction",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineOpaEvaluationContext"
            }
          }
        }
      }
    },
    "/pipelines/validate-pipeline-with-schema": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Validate a Pipeline",
        "description": "",
        "operationId": "validatePipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/resolved-templates-pipeline-yaml/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets template resolved pipeline yaml",
        "description": "",
        "operationId": "getTemplateResolvedPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseTemplatesResolvedPipelineResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/v2": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Create a Pipeline",
        "description": "",
        "operationId": "createPipelineV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineSaveResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/clone": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Clone a Pipeline",
        "description": "",
        "operationId": "clonePipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ClonePipelineProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineSaveResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/variables": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Create variables for Pipeline",
        "description": "",
        "operationId": "createVariables",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseVariableMergeServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/v2/variables": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Create variables for Pipeline",
        "description": "",
        "operationId": "createVariablesV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseVariableMergeServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets a pipeline by identifier",
        "description": "",
        "operationId": "getPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getTemplatesResolvedPipeline",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePMSPipelineResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": ["pipelines"],
        "summary": "Update a Pipeline",
        "description": "",
        "operationId": "putPipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["pipelines"],
        "summary": "Delete a pipeline",
        "description": "",
        "operationId": "softDeletePipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/v2/{pipelineIdentifier}": {
      "put": {
        "tags": ["pipelines"],
        "summary": "Update a Pipeline",
        "description": "",
        "operationId": "putPipelineV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "lastCommitId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineSaveResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/list": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Gets Pipeline list",
        "description": "",
        "operationId": "getPipelineList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PipelineFilterProperties"
            }
          },
          {
            "name": "getDistinctFromBranches",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePagePMSPipelineSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/summary/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Pipeline Summary of a pipeline",
        "description": "",
        "operationId": "getPipelineSummary",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePMSPipelineSummaryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/import/{pipelineIdentifier}": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Get Pipeline YAML from Git Repository",
        "description": "",
        "operationId": "importPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForceImport",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PipelineImportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineSaveResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/expandedJSON/{pipelineIdentifier}": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Gets Pipeline JSON with extra info for some fields",
        "description": "",
        "operationId": "getExpandedPipelineJSON",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExpandedJson"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/notification": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Get Notification Schema",
        "description": "",
        "operationId": "getNotificationSchema",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseNotificationRules"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/getExecutionNode": {
      "get": {
        "tags": ["pipelines"],
        "summary": "get execution node",
        "description": "",
        "operationId": "getExecutionNode",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseExecutionNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/dummy-pmsSteps-api": {
      "get": {
        "tags": ["pipelines"],
        "summary": "This is dummy api to expose pmsSteps",
        "description": "",
        "operationId": "dummyPmsStepsApi",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePmsAbstractStepNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/dummy-templateStep-api": {
      "get": {
        "tags": ["pipelines"],
        "summary": "This is dummy api to expose templateStepNode",
        "description": "",
        "operationId": "dummyTemplateStepApi",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseTemplateStepNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/dummy-templateStage-api": {
      "get": {
        "tags": ["pipelines"],
        "summary": "This is dummy api to expose templateStageNode",
        "description": "",
        "operationId": "dummyTemplateStageApi",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseTemplateStageNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/ffCache/refresh": {
      "get": {
        "tags": ["pipelines"],
        "summary": "Refresh the feature flag cache",
        "description": "",
        "operationId": "refreshFFCache",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/validate-yaml-with-schema": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Validate a Pipeline YAML",
        "description": "",
        "operationId": "validatePipelineByYAML",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Create a Pipeline",
        "description": "",
        "operationId": "createPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "rootFolder",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "commitMsg",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "baseBranch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "connectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "storeType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["INLINE", "REMOTE"]
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipelines/v2/steps": {
      "post": {
        "tags": ["pipelines"],
        "summary": "Get Steps for given modules Version 2",
        "description": "",
        "operationId": "getStepsV2",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StepPalleteFilterWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStepCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execution/summary": {
      "post": {
        "tags": ["pipelinesexecution"],
        "summary": "Gets Executions list",
        "description": "",
        "operationId": "getListOfExecutions",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FilterProperties"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Running",
                "AsyncWaiting",
                "TaskWaiting",
                "TimedWaiting",
                "Failed",
                "Errored",
                "IgnoreFailed",
                "NotStarted",
                "Expired",
                "Aborted",
                "Discontinuing",
                "Queued",
                "Paused",
                "ResourceWaiting",
                "InterventionWaiting",
                "ApprovalWaiting",
                "Success",
                "Suspended",
                "Skipped",
                "Pausing",
                "ApprovalRejected",
                "InputWaiting",
                "NOT_STARTED",
                "INTERVENTION_WAITING",
                "APPROVAL_WAITING",
                "APPROVAL_REJECTED",
                "WAITING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "myDeployments",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePagePipelineExecutionSummary"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execution/v2/{planExecutionId}": {
      "get": {
        "tags": ["pipelinesexecution"],
        "summary": "Gets Execution Detail V2",
        "description": "",
        "operationId": "getExecutionDetailV2",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "stageNodeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "stageNodeExecutionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "renderFullBottomGraph",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execution/{planExecutionId}": {
      "get": {
        "tags": ["pipelinesexecution"],
        "summary": "Gets Execution Detail",
        "description": "",
        "operationId": "getExecutionDetail",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "stageNodeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "stageNodeExecutionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipelines/execution/{planExecutionId}/metadata": {
      "get": {
        "tags": ["pipelinesexecution"],
        "summary": "Get metadata of an execution",
        "description": "",
        "operationId": "getExecutionData",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseExecutionDataResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execution/{planExecutionId}/inputset": {
      "get": {
        "tags": ["pipelinesexecution"],
        "summary": "Gets  inputsetYaml",
        "description": "",
        "operationId": "getInputsetYaml",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "resolveExpressions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipelines/execution/{planExecutionId}/inputsetV2": {
      "get": {
        "tags": ["pipelinesexecution"],
        "summary": "Gets  inputsetYaml",
        "description": "",
        "operationId": "getInputsetYamlV2",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "resolveExpressions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseInputSetTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "TemplateRefs Resolved failed in pipeline yaml.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execution-input/variables": {
      "post": {
        "tags": ["pipelineexecution-input"],
        "summary": "Create variables for Pipeline at execution time",
        "description": "",
        "operationId": "createVariablesForPipelineExecution",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseExecutionInputVariablesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execution-input/{nodeExecutionId}": {
      "get": {
        "tags": ["pipelineexecution-input"],
        "summary": "Get the template for Execution time inputs for any step",
        "description": "",
        "operationId": "getExecutionInputTemplate",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseExecutionInputDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["pipelineexecution-input"],
        "summary": "Submit the Execution Input for a Stage/Step and continue Pipeline execution",
        "description": "",
        "operationId": "submitExecutionInput",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseExecutionInputStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/{identifier}/v2": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Execute a pipeline with inputSet pipeline YAML V2",
        "description": "",
        "operationId": "postPipelineExecuteWithInputSetYamlv2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/{identifier}/stages": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Execute a pipeline with inputSet pipeline yaml",
        "description": "",
        "operationId": "runStagesWithRuntimeInputYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RunStageRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/rerun/{originalExecutionId}/{identifier}/stages": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Rerun a pipeline with inputSet pipeline yaml",
        "description": "",
        "operationId": "rerunStagesWithRuntimeInputYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "originalExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RunStageRequestDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/rerun/{originalExecutionId}/{identifier}": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Re Execute a pipeline with inputSet pipeline yaml",
        "description": "",
        "operationId": "rePostPipelineExecuteWithInputSetYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "originalExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/rerun/v2/{originalExecutionId}/{identifier}": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Re Execute a pipeline with inputSet pipeline yaml Version 2",
        "description": "",
        "operationId": "rePostPipelineExecuteWithInputSetYamlV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "originalExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/{identifier}/inputSetList": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Execute a pipeline with input set references list",
        "description": "",
        "operationId": "postPipelineExecuteWithInputSetList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/rerun/{originalExecutionId}/{identifier}/inputSetList": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Execute a pipeline with input set references list",
        "description": "",
        "operationId": "rePostPipelineExecuteWithInputSetList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "originalExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeInputSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/manualIntervention/interrupt/{planExecutionId}/{nodeExecutionId}": {
      "put": {
        "tags": ["pipelineexecute"],
        "summary": "Ignore,Abort,MarkAsSuccess,Retry on post manual intervention",
        "description": "",
        "operationId": "handleManualInterventionInterrupt",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "interruptType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "AbortAll",
              "Abort",
              "Pause",
              "Resume",
              "Ignore",
              "StageRollback",
              "StepGroupRollback",
              "MarkAsSuccess",
              "ExpireAll",
              "Retry"
            ]
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionInterrupt"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/retry/{identifier}": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Retry a executed pipeline with inputSet pipeline yaml",
        "description": "",
        "operationId": "retryPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "retryStages",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "runAllStages",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/{identifier}": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "Execute a pipeline with inputSet pipeline YAML",
        "description": "",
        "operationId": "postPipelineExecuteWithInputSetYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "moduleType",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "notifyOnlyUser",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePlanExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/{planExecutionId}/retryStages": {
      "get": {
        "tags": ["pipelineexecute"],
        "summary": "Get retry stages for failed pipeline",
        "description": "",
        "operationId": "getRetryStages",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseRetryInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/interrupt/{planExecutionId}": {
      "put": {
        "tags": ["pipelineexecute"],
        "summary": "pause, resume or stop the pipeline executions",
        "description": "",
        "operationId": "handleInterrupt",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "interruptType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "AbortAll",
              "Abort",
              "Pause",
              "Resume",
              "Ignore",
              "StageRollback",
              "StepGroupRollback",
              "MarkAsSuccess",
              "ExpireAll",
              "Retry"
            ]
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionInterrupt"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/interrupt/{planExecutionId}/{nodeExecutionId}": {
      "put": {
        "tags": ["pipelineexecute"],
        "summary": "pause, resume or stop the stage executions",
        "description": "",
        "operationId": "handleStageInterrupt",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "interruptType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "AbortAll",
              "Abort",
              "Pause",
              "Resume",
              "Ignore",
              "StageRollback",
              "StepGroupRollback",
              "MarkAsSuccess",
              "ExpireAll",
              "Retry"
            ]
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineExecutionInterrupt"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/preflightCheck": {
      "post": {
        "tags": ["pipelineexecute"],
        "summary": "initiate pre flight check",
        "description": "",
        "operationId": "startPreflightCheck",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseString"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/getPreflightCheckResponse": {
      "get": {
        "tags": ["pipelineexecute"],
        "summary": "get preflight check response",
        "description": "",
        "operationId": "getPreflightCheckResponse",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "preflightCheckId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePreFlightDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/stagesExecutionList": {
      "get": {
        "tags": ["pipelineexecute"],
        "summary": "get list of stages for stage execution",
        "description": "",
        "operationId": "getStagesExecutionList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseListStageExecutionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/retryHistory/{planExecutionId}": {
      "get": {
        "tags": ["pipelineexecute"],
        "summary": "Retry History for a given execution",
        "description": "",
        "operationId": "retryHistory",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseRetryHistoryResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pipeline/execute/latestExecutionId/{planExecutionId}": {
      "get": {
        "tags": ["pipelineexecute"],
        "summary": "Latest ExecutionId from Retry Executions",
        "description": "",
        "operationId": "latestExecutionId",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseRetryLatestExecutionResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resource-constraints/executionInfo": {
      "get": {
        "tags": ["resource-constraints"],
        "summary": "Gets resource constraints execution info",
        "description": "",
        "operationId": "getResourceConstraintsExecutionInfo",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceUnit",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseResourceConstraintExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema/dummyApiForSwaggerSchemaCheck": {
      "get": {
        "tags": ["yaml-schema"],
        "summary": "dummy api for checking pms schema",
        "description": "",
        "operationId": "dummyApiForSwaggerSchemaCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePipelineConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema": {
      "get": {
        "tags": ["yaml-schema"],
        "summary": "Get Yaml Schema",
        "description": "",
        "operationId": "getSchemaYaml",
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "CreatePR",
              "GITOPS_MERGE_PR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "GovernancePolicies",
              "POLICY_STEP",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AZURE_SLOT_DEPLOYMENT_STEP",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback"
            ]
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseJsonNode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema/invalidate-cache": {
      "post": {
        "tags": ["yaml-schema"],
        "summary": "Invalidate yaml schema cache",
        "description": "",
        "operationId": "invalidateYamlSchemaCache",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/yaml-schema/get": {
      "get": {
        "tags": ["yaml-schema"],
        "summary": "Get step YAML schema",
        "description": "",
        "operationId": "getStepYamlSchema",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "yamlGroup",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatePR",
              "GITOPS_MERGE_PR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "GovernancePolicies",
              "POLICY_STEP",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AZURE_SLOT_DEPLOYMENT_STEP",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback"
            ]
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseYamlSchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-template": {
      "post": {
        "tags": ["refresh-template"],
        "summary": "This refreshes and update template inputs in pipeline",
        "description": "",
        "operationId": "refreshAndUpdateTemplateInputs",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-template/validate-template-inputs": {
      "get": {
        "tags": ["refresh-template"],
        "summary": "This validates whether yaml of pipeline is valid or not",
        "description": "",
        "operationId": "validateTemplateInputs",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseValidateTemplateInputsResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-template/show-diff": {
      "get": {
        "tags": ["refresh-template"],
        "summary": "This returns original yaml and refresh yaml of pipeline",
        "description": "",
        "operationId": "getYamlDiff",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseYamlDiffResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/refresh-template/refresh-all": {
      "post": {
        "tags": ["refresh-template"],
        "summary": "This recursively refresh and update template inputs in pipeline",
        "description": "",
        "operationId": "refreshAll",
        "consumes": ["application/json", "application/yaml"],
        "produces": ["application/json", "application/yaml"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parentEntityConnectorRef",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityRepoName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityAccountIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityOrgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentEntityProjectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseBoolean"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/waitStep/executionDetails/{nodeExecutionId}": {
      "get": {
        "tags": ["waitStep"],
        "summary": "Get Wait Step execution details",
        "description": "",
        "operationId": "executionDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWaitStepExecutionDetailsDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/waitStep/{nodeExecutionId}": {
      "post": {
        "tags": ["waitStep"],
        "summary": "Marks the Wait Step as fail or success",
        "description": "",
        "operationId": "markWaitStep",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeExecutionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WaitStepRequestDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWaitStepResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuditFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "scopes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceScopeDTO"
              }
            },
            "resources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceDTO"
              }
            },
            "modules": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["CD", "CI", "CV", "CF", "CE", "STO", "CORE", "PMS", "TEMPLATESERVICE", "GOVERNANCE", "CHAOS"]
              }
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CREATE",
                  "UPDATE",
                  "RESTORE",
                  "DELETE",
                  "UPSERT",
                  "INVITE",
                  "RESEND_INVITE",
                  "REVOKE_INVITE",
                  "ADD_COLLABORATOR",
                  "REMOVE_COLLABORATOR",
                  "CREATE_TOKEN",
                  "REVOKE_TOKEN",
                  "LOGIN",
                  "LOGIN2FA",
                  "UNSUCCESSFUL_LOGIN",
                  "ADD_MEMBERSHIP",
                  "REMOVE_MEMBERSHIP",
                  "ERROR_BUDGET_RESET"
                ]
              }
            },
            "environments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Environment"
              }
            },
            "principals": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Principal"
              }
            },
            "staticFilter": {
              "type": "string",
              "enum": ["EXCLUDE_LOGIN_EVENTS", "EXCLUDE_SYSTEM_EVENTS"]
            },
            "startTime": {
              "type": "integer",
              "format": "int64"
            },
            "endTime": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "CcmConnectorFilter": {
      "type": "object",
      "properties": {
        "featuresEnabled": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["BILLING", "OPTIMIZATION", "VISIBILITY"]
          }
        },
        "awsAccountId": {
          "type": "string"
        },
        "azureSubscriptionId": {
          "type": "string"
        },
        "azureTenantId": {
          "type": "string"
        },
        "gcpProjectId": {
          "type": "string"
        },
        "k8sConnectorRef": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConnectorFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "connectorNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "connectorIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "types": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "K8sCluster",
                  "Git",
                  "Splunk",
                  "AppDynamics",
                  "Prometheus",
                  "Dynatrace",
                  "Vault",
                  "AzureKeyVault",
                  "DockerRegistry",
                  "Local",
                  "AwsKms",
                  "GcpKms",
                  "AwsSecretManager",
                  "Gcp",
                  "Aws",
                  "Azure",
                  "Artifactory",
                  "Jira",
                  "Nexus",
                  "Github",
                  "Gitlab",
                  "Bitbucket",
                  "Codecommit",
                  "CEAws",
                  "CEAzure",
                  "GcpCloudCost",
                  "CEK8sCluster",
                  "HttpHelmRepo",
                  "NewRelic",
                  "Datadog",
                  "SumoLogic",
                  "PagerDuty",
                  "CustomHealth",
                  "ServiceNow",
                  "ErrorTracking",
                  "Pdc",
                  "AzureRepo",
                  "Jenkins",
                  "OciHelmRepo",
                  "CustomSecretManager",
                  "ELK"
                ]
              }
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CLOUD_PROVIDER",
                  "SECRET_MANAGER",
                  "CLOUD_COST",
                  "ARTIFACTORY",
                  "CODE_REPO",
                  "MONITORING",
                  "TICKETING"
                ]
              }
            },
            "connectivityStatuses": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["SUCCESS", "FAILURE", "PARTIAL", "UNKNOWN"]
              }
            },
            "inheritingCredentialsFromDelegate": {
              "type": "boolean"
            },
            "connectorConnectivityModes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["DELEGATE", "MANAGER"]
              }
            },
            "ccmConnectorFilter": {
              "$ref": "#/definitions/CcmConnectorFilter"
            }
          }
        }
      ]
    },
    "Environment": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["PreProduction", "Production"]
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "FilterDTO": {
      "type": "object",
      "required": ["filterProperties", "identifier", "name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "filterProperties": {
          "$ref": "#/definitions/FilterProperties"
        },
        "filterVisibility": {
          "type": "string",
          "enum": ["EveryOne", "OnlyCreator"]
        }
      }
    },
    "FilterProperties": {
      "type": "object",
      "discriminator": "filterType",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "filterType": {
          "type": "string",
          "enum": [
            "Connector",
            "DelegateProfile",
            "Delegate",
            "PipelineSetup",
            "PipelineExecution",
            "Deployment",
            "Audit",
            "Template",
            "EnvironmentGroup",
            "FileStore",
            "CCMRecommendation",
            "Anomaly",
            "Environment"
          ]
        }
      }
    },
    "NGTag": {
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PipelineExecutionFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "pipelineTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGTag"
              }
            },
            "status": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Running",
                  "AsyncWaiting",
                  "TaskWaiting",
                  "TimedWaiting",
                  "Failed",
                  "Errored",
                  "IgnoreFailed",
                  "NotStarted",
                  "Expired",
                  "Aborted",
                  "Discontinuing",
                  "Queued",
                  "Paused",
                  "ResourceWaiting",
                  "InterventionWaiting",
                  "ApprovalWaiting",
                  "Success",
                  "Suspended",
                  "Skipped",
                  "Pausing",
                  "ApprovalRejected",
                  "InputWaiting",
                  "NOT_STARTED",
                  "INTERVENTION_WAITING",
                  "APPROVAL_WAITING",
                  "APPROVAL_REJECTED",
                  "WAITING"
                ]
              }
            },
            "pipelineName": {
              "type": "string"
            },
            "timeRange": {
              "$ref": "#/definitions/TimeRange"
            },
            "moduleProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "PipelineFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "pipelineTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGTag"
              }
            },
            "pipelineIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "moduleProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "Principal": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["USER", "SYSTEM", "API_KEY", "SERVICE_ACCOUNT"]
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "ResourceDTO": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ORGANIZATION",
            "PROJECT",
            "USER_GROUP",
            "SECRET",
            "RESOURCE_GROUP",
            "USER",
            "ROLE",
            "ROLE_ASSIGNMENT",
            "PIPELINE",
            "TRIGGER",
            "TEMPLATE",
            "INPUT_SET",
            "DELEGATE_CONFIGURATION",
            "DELEGATE_GROUPS",
            "SERVICE",
            "ENVIRONMENT",
            "DELEGATE",
            "SERVICE_ACCOUNT",
            "CONNECTOR",
            "API_KEY",
            "TOKEN",
            "DELEGATE_TOKEN",
            "GOVERNANCE_POLICY",
            "GOVERNANCE_POLICY_SET",
            "VARIABLE",
            "CHAOS_HUB",
            "MONITORED_SERVICE",
            "CHAOS_DELEGATE",
            "CHAOS_SCENARIO",
            "STO_TARGET",
            "STO_EXEMPTION",
            "CHAOS_GITOPS",
            "SERVICE_LEVEL_OBJECTIVE",
            "PERSPECTIVE",
            "PERSPECTIVE_BUDGET",
            "PERSPECTIVE_REPORT",
            "COST_CATEGORY",
            "SMTP",
            "PERSPECTIVE_FOLDER",
            "AUTOSTOPPING_RULE",
            "AUTOSTOPPING_LB",
            "AUTOSTOPPING_STARTSTOP",
            "SETTING",
            "NG_LOGIN_SETTINGS"
          ]
        },
        "identifier": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceScopeDTO": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseFilterDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/FilterDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TemplateFilterProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/FilterProperties"
        },
        {
          "type": "object",
          "properties": {
            "templateNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "templateIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "templateEntityTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Step",
                  "Stage",
                  "Pipeline",
                  "CustomDeployment",
                  "MonitoredService",
                  "SecretManager",
                  "ArtifactSource"
                ]
              }
            },
            "childTypes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TimeRange": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Failure": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "EntityGitDetails": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "repoIdentifier": {
          "type": "string"
        },
        "rootFolder": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "commitId": {
          "type": "string"
        },
        "fileUrl": {
          "type": "string"
        },
        "repoUrl": {
          "type": "string"
        }
      }
    },
    "EntityValidityDetails": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "invalidYaml": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "detailedMessage": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        },
        "metadata": {
          "$ref": "#/definitions/ErrorMetadataDTO"
        }
      }
    },
    "ErrorMetadata": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR"
          ]
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ErrorMetadataDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ErrorNodeSummary": {
      "type": "object",
      "properties": {
        "nodeInfo": {
          "$ref": "#/definitions/NodeInfo"
        },
        "templateInfo": {
          "$ref": "#/definitions/TemplateInfo"
        },
        "templateResponse": {
          "$ref": "#/definitions/TemplateResponse"
        },
        "childrenErrorNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorNodeSummary"
          }
        }
      }
    },
    "FilterCreatorErrorResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorMetadataList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ErrorMetadata"
              }
            }
          }
        }
      ]
    },
    "InputSetError": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "InputSetErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputSetError"
          }
        }
      }
    },
    "InputSetErrorWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorPipelineYaml": {
              "type": "string"
            },
            "uuidToErrorResponseMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/InputSetErrorResponse"
              }
            },
            "invalidInputSetReferences": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "InvalidFieldsDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "NodeErrorInfo": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "fqn": {
          "type": "string"
        }
      }
    },
    "NodeInfo": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "localFqn": {
          "type": "string"
        }
      }
    },
    "OverlayInputSetErrorWrapper": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "invalidReferences": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "INVALID_FORMAT",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "INVALID_AGENT_MTLS_AUTHORITY",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "WINRM_COMMAND_EXECUTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "EMAIL_ERROR",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "CUSTOM_APPROVAL_ERROR",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_GLOBAL_DELEGATE_ACCOUNT",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "SECRET_MANAGER_ID_NOT_FOUND",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "CG_LICENSE_USAGE_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_CONFLICT_ERROR_V2",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "SCM_BAD_REQUEST",
            "SCM_INTERNAL_SERVER_ERROR",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "APPROVAL_STEP_NG_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION",
            "ENTITY_REFERENCE_EXCEPTION",
            "INVALID_INPUT_SET",
            "INVALID_OVERLAY_INPUT_SET",
            "RESOURCE_ALREADY_EXISTS",
            "INVALID_JSON_PAYLOAD",
            "POLICY_EVALUATION_FAILURE",
            "POLICY_SET_ERROR",
            "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
            "INVALID_NEXUS_REGISTRY_REQUEST",
            "ENTITY_NOT_FOUND",
            "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
            "AZURE_AUTHENTICATION_ERROR",
            "AZURE_CONFIG_ERROR",
            "DATA_PROCESSING_ERROR",
            "INVALID_AZURE_AKS_REQUEST",
            "AWS_IAM_ERROR",
            "AWS_CF_ERROR",
            "AWS_INSTANCE_ERROR",
            "AWS_VPC_ERROR",
            "AWS_TAG_ERROR",
            "AWS_ASG_ERROR",
            "AWS_LOAD_BALANCER_ERROR",
            "SCM_INTERNAL_SERVER_ERROR_V2",
            "SCM_UNAUTHORIZED_ERROR_V2",
            "TOO_MANY_REQUESTS",
            "INVALID_IDENTIFIER_REF",
            "SPOTINST_NULL_ERROR",
            "SCM_UNEXPECTED_ERROR",
            "DUPLICATE_FILE_IMPORT",
            "AZURE_APP_SERVICES_TASK_EXCEPTION",
            "MEDIA_NOT_SUPPORTED",
            "AWS_ECS_ERROR",
            "AWS_APPLICATION_AUTO_SCALING",
            "AWS_ECS_SERVICE_NOT_ACTIVE",
            "AWS_ECS_CLIENT_ERROR",
            "AWS_STS_ERROR"
          ]
        },
        "level": {
          "type": "string",
          "enum": ["INFO", "ERROR"]
        },
        "message": {
          "type": "string"
        },
        "exception": {
          "$ref": "#/definitions/Throwable"
        },
        "failureTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR",
              "POLICY_EVALUATION_FAILURE",
              "EXECUTION_INPUT_TIMEOUT_FAILURE"
            ]
          }
        }
      }
    },
    "SampleErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "sampleMap": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ScmErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "conflictCommitId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "classLoaderName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "moduleVersion": {
          "type": "string"
        },
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "TemplateInfo": {
      "type": "object",
      "properties": {
        "templateIdentifier": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        },
        "templateEntityType": {
          "type": "string",
          "enum": [
            "Step",
            "Stage",
            "Pipeline",
            "CustomDeployment",
            "MonitoredService",
            "SecretManager",
            "ArtifactSource"
          ]
        }
      }
    },
    "TemplateInputsErrorDTO": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "identifierOfErrorSource": {
          "type": "string"
        }
      }
    },
    "TemplateInputsErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "errorYaml": {
              "type": "string"
            },
            "errorMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/TemplateInputsErrorDTO"
              }
            }
          }
        }
      ]
    },
    "TemplateResponse": {
      "type": "object",
      "required": ["accountId", "identifier", "name"],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "yaml": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        },
        "templateEntityType": {
          "type": "string",
          "enum": [
            "Step",
            "Stage",
            "Pipeline",
            "CustomDeployment",
            "MonitoredService",
            "SecretManager",
            "ArtifactSource"
          ]
        },
        "childType": {
          "type": "string"
        },
        "templateScope": {
          "type": "string",
          "enum": ["account", "org", "project", "unknown"]
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "stableTemplate": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "localizedMessage": {
          "type": "string"
        }
      }
    },
    "ValidateTemplateInputsResponseDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "validYaml": {
              "type": "boolean"
            },
            "errorNodeSummary": {
              "$ref": "#/definitions/ErrorNodeSummary"
            }
          }
        }
      ]
    },
    "YamlSchemaErrorDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageWithFQN": {
          "type": "string"
        },
        "stageInfo": {
          "$ref": "#/definitions/NodeErrorInfo"
        },
        "stepInfo": {
          "$ref": "#/definitions/NodeErrorInfo"
        },
        "fqn": {
          "type": "string"
        },
        "hintMessage": {
          "type": "string"
        }
      }
    },
    "YamlSchemaErrorWrapperDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "schemaErrors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/YamlSchemaErrorDTO"
              }
            }
          }
        }
      ]
    },
    "Page": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PageFilterDTO": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterDTO"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageFilterDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageFilterDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseBoolean": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "boolean"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NGTriggerResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Webhook", "Artifact", "Manifest", "Scheduled"]
        },
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "targetIdentifier": {
          "type": "string"
        },
        "yaml": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseNGTriggerResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGTriggerResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AcrSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "registry": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AmazonS3RegistrySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "region": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePathRegex": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ArtifactTriggerConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NGTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "stageIdentifier": {
              "type": "string"
            },
            "artifactRef": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "Gcr",
                "Ecr",
                "DockerRegistry",
                "Nexus3Registry",
                "ArtifactoryRegistry",
                "Acr",
                "AmazonS3",
                "Jenkins",
                "GoogleArtifactRegistry",
                "GithubPackageRegistry"
              ]
            },
            "spec": {
              "$ref": "#/definitions/ArtifactTypeSpec"
            }
          }
        }
      ]
    },
    "ArtifactTypeSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "ArtifactoryRegistrySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "artifactDirectory": {
              "type": "string"
            },
            "artifactPath": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string"
            },
            "repositoryUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsCodeCommitEventSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "AwsCodeCommitPushSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AwsCodeCommitEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsCodeCommitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Push"]
            },
            "spec": {
              "$ref": "#/definitions/AwsCodeCommitEventSpec"
            }
          }
        }
      ]
    },
    "AzureRepoEventSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "AzureRepoIssueCommentSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create", "Edit", "Delete"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureRepoPRSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create", "Update", "Merge"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureRepoPushSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureRepoEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "AzureRepoSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["PullRequest", "Push", "IssueComment"]
            },
            "spec": {
              "$ref": "#/definitions/AzureRepoEventSpec"
            }
          }
        }
      ]
    },
    "BitbucketEventSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "BitbucketPRCommentSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create", "Edit", "Delete"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "BitbucketPRSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create", "Update", "Merge", "Decline"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "BitbucketPushSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BitbucketEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "BitbucketSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["PullRequest", "Push", "PRComment"]
            },
            "spec": {
              "$ref": "#/definitions/BitbucketEventSpec"
            }
          }
        }
      ]
    },
    "BuildStore": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Http", "S3", "Gcs"]
        },
        "spec": {
          "$ref": "#/definitions/BuildStoreTypeSpec"
        }
      }
    },
    "BuildStoreTypeSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "CronTriggerSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduledTriggerSpec"
        },
        {
          "type": "object",
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomTriggerSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DockerRegistrySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EcrSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "imagePath": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GarSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "version": {
              "type": "string"
            },
            "pkg": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "project": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GcrSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "registryHostname": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GcsBuildStoreTypeSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildStoreTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubEventSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "GithubIssueCommentSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create", "Edit", "Delete"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GithubPRSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Close", "Edit", "Open", "Reopen", "Label", "Unlabel", "Synchronize"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GithubPackagesSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "org": {
              "type": "string"
            },
            "packageName": {
              "type": "string"
            },
            "packageType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GithubPushSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GithubEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GithubSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["PullRequest", "Push", "IssueComment"]
            },
            "spec": {
              "$ref": "#/definitions/GithubEventSpec"
            }
          }
        }
      ]
    },
    "GitlabEventSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "GitlabMRCommentSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Create"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GitlabPRSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Open", "Close", "Reopen", "Merge", "Update", "Sync"]
              }
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GitlabPushSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/GitlabEventSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "headerConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "payloadConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jexlCondition": {
              "type": "string"
            },
            "autoAbortPreviousExecutions": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "GitlabSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["MergeRequest", "Push", "MRComment"]
            },
            "spec": {
              "$ref": "#/definitions/GitlabEventSpec"
            }
          }
        }
      ]
    },
    "HelmManifestSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "chartName": {
              "type": "string"
            },
            "chartVersion": {
              "type": "string"
            },
            "helmVersion": {
              "type": "string",
              "enum": ["V2", "V3", "V380"]
            },
            "store": {
              "$ref": "#/definitions/BuildStore"
            }
          }
        }
      ]
    },
    "HttpBuildStoreTypeSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildStoreTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JenkinsRegistrySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "jobName": {
              "type": "string"
            },
            "artifactPath": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ManifestTriggerConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NGTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "stageIdentifier": {
              "type": "string"
            },
            "manifestRef": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": ["HelmChart"]
            },
            "spec": {
              "$ref": "#/definitions/ManifestTypeSpec"
            }
          }
        }
      ]
    },
    "ManifestTypeSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "NGTriggerConfigV2": {
      "type": "object",
      "required": ["identifier"],
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputYaml": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/NGTriggerSourceV2"
        },
        "pipelineBranchName": {
          "type": "string"
        },
        "inputSetRefs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "NGTriggerSourceV2": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Webhook", "Artifact", "Manifest", "Scheduled"]
        },
        "pollInterval": {
          "type": "string",
          "pattern": "(((([1-9])+\\d*[mh])+(\\s/?\\d+[mh])*)|(^$)|(0))$"
        },
        "spec": {
          "$ref": "#/definitions/NGTriggerSpecV2"
        }
      }
    },
    "NGTriggerSpecV2": {
      "type": "object",
      "discriminator": "type"
    },
    "NexusRegistrySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "eventConditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerEventDataCondition"
              }
            },
            "repositoryName": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "S3BuildStoreTypeSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildStoreTypeSpec"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ScheduledTriggerConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/NGTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ScheduledTriggerSpec"
            }
          }
        }
      ]
    },
    "ScheduledTriggerSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "TriggerEventDataCondition": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": ["In", "Equals", "NotEquals", "NotIn", "Regex", "EndsWith", "StartsWith", "Contains"]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "WebhookTriggerConfigV2": {
      "allOf": [
        {
          "$ref": "#/definitions/NGTriggerSpecV2"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AzureRepo", "Github", "Gitlab", "Bitbucket", "Custom", "AwsCodeCommit"]
            },
            "spec": {
              "$ref": "#/definitions/WebhookTriggerSpecV2"
            }
          }
        }
      ]
    },
    "WebhookTriggerSpecV2": {
      "type": "object",
      "discriminator": "type"
    },
    "BuildDetails": {
      "type": "object",
      "properties": {
        "buildType": {
          "type": "string"
        }
      }
    },
    "LastTriggerExecutionDetails": {
      "type": "object",
      "properties": {
        "lastExecutionTime": {
          "type": "integer",
          "format": "int64"
        },
        "lastExecutionSuccessful": {
          "type": "boolean"
        },
        "lastExecutionStatus": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NGTriggerDetailsResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Webhook", "Artifact", "Manifest", "Scheduled"]
        },
        "triggerStatus": {
          "$ref": "#/definitions/TriggerStatus"
        },
        "lastTriggerExecutionDetails": {
          "$ref": "#/definitions/LastTriggerExecutionDetails"
        },
        "webhookDetails": {
          "$ref": "#/definitions/WebhookDetails"
        },
        "buildDetails": {
          "$ref": "#/definitions/BuildDetails"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "executions": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "yaml": {
          "type": "string"
        },
        "webhookUrl": {
          "type": "string"
        },
        "registrationStatus": {
          "type": "string",
          "enum": ["SUCCESS", "FAILED", "ERROR", "TIMEOUT", "UNAVAILABLE"]
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "PageNGTriggerDetailsResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGTriggerDetailsResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PollingSubscriptionStatus": {
      "type": "object",
      "properties": {
        "statusResult": {
          "type": "string",
          "enum": ["SUCCESS", "FAILED", "UNKNOWN"]
        },
        "detailedMessage": {
          "type": "string"
        }
      }
    },
    "ResponsePageNGTriggerDetailsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageNGTriggerDetailsResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TriggerStatus": {
      "type": "object",
      "properties": {
        "pollingSubscriptionStatus": {
          "$ref": "#/definitions/PollingSubscriptionStatus"
        },
        "validationStatus": {
          "$ref": "#/definitions/ValidationStatus"
        },
        "webhookAutoRegistrationStatus": {
          "$ref": "#/definitions/WebhookAutoRegistrationStatus"
        },
        "webhookInfo": {
          "$ref": "#/definitions/WebhookInfo"
        }
      }
    },
    "ValidationStatus": {
      "type": "object",
      "properties": {
        "statusResult": {
          "type": "string",
          "enum": ["SUCCESS", "FAILED", "UNKNOWN"]
        },
        "detailedMessage": {
          "type": "string"
        }
      }
    },
    "WebhookAutoRegistrationStatus": {
      "type": "object",
      "properties": {
        "registrationResult": {
          "type": "string",
          "enum": ["SUCCESS", "FAILED", "ERROR", "TIMEOUT", "UNAVAILABLE"]
        },
        "detailedMessage": {
          "type": "string"
        }
      }
    },
    "WebhookDetails": {
      "type": "object",
      "properties": {
        "webhookSecret": {
          "type": "string"
        },
        "webhookSourceRepo": {
          "type": "string"
        }
      }
    },
    "WebhookInfo": {
      "type": "object",
      "properties": {
        "webhookId": {
          "type": "string"
        }
      }
    },
    "ResponseNGTriggerDetailsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGTriggerDetailsResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseString": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "ResponseListGithubIssueCommentAction": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Create", "Edit", "Delete"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseWebhookExecutionDetails": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/WebhookExecutionDetails"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "WebhookEventProcessingDetails": {
      "type": "object",
      "properties": {
        "eventFound": {
          "type": "boolean"
        },
        "eventId": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "triggerIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "pipelineExecutionId": {
          "type": "string"
        },
        "exceptionOccured": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "eventCreatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "runtimeInput": {
          "type": "string"
        }
      }
    },
    "WebhookExecutionDetails": {
      "type": "object",
      "properties": {
        "webhookProcessingDetails": {
          "$ref": "#/definitions/WebhookEventProcessingDetails"
        },
        "executionDetails": {
          "type": "object"
        }
      }
    },
    "ResponseMapWebhookSourceRepoListWebhookEvent": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Pull Request",
                "Push",
                "Issue Comment",
                "MR Comment",
                "PR Comment",
                "Delete",
                "Merge Request",
                "Repository",
                "Branch",
                "Tag"
              ]
            }
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseMapStringMapStringListString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListWebhookTriggerType": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["AzureRepo", "Github", "Gitlab", "Bitbucket", "Custom", "AwsCodeCommit"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListGithubTriggerEvent": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PullRequest", "Push", "IssueComment"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListGithubPRAction": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Close", "Edit", "Open", "Reopen", "Label", "Unlabel", "Synchronize"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListGitlabTriggerEvent": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["MergeRequest", "Push", "MRComment"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListGitlabPRAction": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Open", "Close", "Reopen", "Merge", "Update", "Sync"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListBitbucketTriggerEvent": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["PullRequest", "Push", "PRComment"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListBitbucketPRAction": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Create", "Update", "Merge", "Decline"]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListWebhookAction": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "created",
              "closed",
              "edited",
              "updated",
              "opened",
              "reopened",
              "labeled",
              "unlabeled",
              "deleted",
              "synchronized",
              "synced",
              "merged",
              "sync",
              "open",
              "close",
              "reopen",
              "merge",
              "update",
              "mr comment create",
              "pull request created",
              "pull request updated",
              "pull request merged",
              "pull request declined",
              "pr comment created",
              "pr comment edited",
              "pr comment deleted"
            ]
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "string"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NGProcessWebhookResponse": {
      "type": "object",
      "properties": {
        "eventCorrelationId": {
          "type": "string"
        },
        "apiUrl": {
          "type": "string"
        },
        "uiUrl": {
          "type": "string"
        },
        "uiSetupUrl": {
          "type": "string"
        }
      }
    },
    "ResponseNGProcessWebhookResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NGProcessWebhookResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseWebhookEventProcessingDetails": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/WebhookEventProcessingDetails"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PipelinesCount": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "newCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponsePipelinesCount": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelinesCount"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "LandingDashboardRequestPMS": {
      "type": "object",
      "required": ["orgProjectIdentifiers"],
      "properties": {
        "orgProjectIdentifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgProjectIdentifier"
          }
        }
      }
    },
    "OrgProjectIdentifier": {
      "type": "object",
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        }
      }
    },
    "DashboardPipelineExecutionInfo": {
      "type": "object",
      "properties": {
        "pipelineExecutionInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineExecutionInfo"
          }
        }
      }
    },
    "PipelineCountInfo": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "success": {
          "type": "integer",
          "format": "int64"
        },
        "failure": {
          "type": "integer",
          "format": "int64"
        },
        "expired": {
          "type": "integer",
          "format": "int64"
        },
        "aborted": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PipelineExecutionInfo": {
      "type": "object",
      "properties": {
        "date": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "$ref": "#/definitions/PipelineCountInfo"
        }
      }
    },
    "ResponseDashboardPipelineExecutionInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardPipelineExecutionInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "DashboardPipelineHealthInfo": {
      "type": "object",
      "properties": {
        "executions": {
          "$ref": "#/definitions/PipelineHealthInfo"
        }
      }
    },
    "MeanMedianInfo": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PipelineHealthInfo": {
      "type": "object",
      "properties": {
        "total": {
          "$ref": "#/definitions/TotalHealthInfo"
        },
        "success": {
          "$ref": "#/definitions/SuccessHealthInfo"
        },
        "meanInfo": {
          "$ref": "#/definitions/MeanMedianInfo"
        },
        "medianInfo": {
          "$ref": "#/definitions/MeanMedianInfo"
        }
      }
    },
    "ResponseDashboardPipelineHealthInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardPipelineHealthInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SuccessHealthInfo": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "double"
        },
        "rate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TotalHealthInfo": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "HarnessApprovalInstanceAuthorization": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ResponseHarnessApprovalInstanceAuthorization": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/HarnessApprovalInstanceAuthorization"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ApprovalInstanceDetailsDTO": {
      "type": "object"
    },
    "ApprovalInstanceResponse": {
      "type": "object",
      "required": ["details", "status", "type"],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["HarnessApproval", "JiraApproval", "CustomApproval", "ServiceNowApproval"]
        },
        "status": {
          "type": "string",
          "enum": ["WAITING", "APPROVED", "REJECTED", "FAILED", "ABORTED", "EXPIRED"]
        },
        "deadline": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "$ref": "#/definitions/ApprovalInstanceDetailsDTO"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastModifiedAt": {
          "type": "integer",
          "format": "int64"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ApproverInput": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ApproverInputInfoDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "ApproversDTO": {
      "type": "object",
      "properties": {
        "userGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minimumCount": {
          "type": "integer",
          "format": "int32"
        },
        "disallowPipelineExecutor": {
          "type": "boolean"
        }
      }
    },
    "ConditionDTO": {
      "type": "object",
      "required": ["key", "operator", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": ["equals", "not equals", "in", "not in"]
        }
      }
    },
    "CriteriaSpecDTO": {
      "type": "object"
    },
    "CriteriaSpecWrapperDTO": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Jexl", "KeyValues"]
        },
        "spec": {
          "$ref": "#/definitions/CriteriaSpecDTO"
        }
      }
    },
    "EmbeddedUser": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "externalUserId": {
          "type": "string"
        }
      }
    },
    "HarnessApprovalActivity": {
      "type": "object",
      "required": ["action", "user"],
      "properties": {
        "user": {
          "$ref": "#/definitions/EmbeddedUser"
        },
        "action": {
          "type": "string",
          "enum": ["APPROVE", "REJECT"]
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApproverInput"
          }
        },
        "comments": {
          "type": "string"
        },
        "approvedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "HarnessApprovalInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/ApprovalInstanceDetailsDTO"
        },
        {
          "type": "object",
          "required": ["approvalMessage", "approvers"],
          "properties": {
            "approvalMessage": {
              "type": "string"
            },
            "includePipelineExecutionHistory": {
              "type": "boolean"
            },
            "approvers": {
              "$ref": "#/definitions/ApproversDTO"
            },
            "approvalActivities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HarnessApprovalActivity"
              }
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproverInputInfoDTO"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["expression"],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraApprovalInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/ApprovalInstanceDetailsDTO"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "issue", "rejectionCriteria"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issue": {
              "$ref": "#/definitions/JiraIssueKeyNG"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapperDTO"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapperDTO"
            }
          }
        }
      ]
    },
    "JiraIssueKeyNG": {
      "type": "object",
      "required": ["key", "url"],
      "properties": {
        "url": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "ResponseApprovalInstanceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ApprovalInstanceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceNowApprovalInstanceDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/ApprovalInstanceDetailsDTO"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "ticket"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "ticket": {
              "$ref": "#/definitions/ServiceNowTicketKeyNG"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapperDTO"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapperDTO"
            },
            "changeWindowSpec": {
              "$ref": "#/definitions/ServiceNowChangeWindowSpec"
            }
          }
        }
      ]
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": ["endField", "startField"],
      "properties": {
        "startField": {
          "type": "string"
        },
        "endField": {
          "type": "string"
        }
      }
    },
    "ServiceNowTicketKeyNG": {
      "type": "object",
      "required": ["key", "ticketType", "url"],
      "properties": {
        "url": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        }
      }
    },
    "keyValueCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpecDTO"
        },
        {
          "type": "object",
          "required": ["conditions"],
          "properties": {
            "matchAnyCondition": {
              "type": "boolean"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConditionDTO"
              }
            }
          }
        }
      ]
    },
    "HarnessApprovalActivityRequest": {
      "type": "object",
      "required": ["action"],
      "properties": {
        "action": {
          "type": "string",
          "enum": ["APPROVE", "REJECT"]
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApproverInput"
          }
        },
        "comments": {
          "type": "string"
        }
      }
    },
    "BarrierSetupInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageDetail"
          }
        }
      }
    },
    "ResponseListBarrierSetupInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BarrierSetupInfo"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StageDetail": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "BarrierExecutionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64"
        },
        "started": {
          "type": "boolean"
        },
        "timeoutIn": {
          "type": "integer",
          "format": "int64"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageDetail"
          }
        }
      }
    },
    "ResponseListBarrierExecutionInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BarrierExecutionInfo"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "BarrierInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "timeoutIn": {
          "type": "integer",
          "format": "int64"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageDetail"
          }
        }
      }
    },
    "ResponseBarrierInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/BarrierInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MergeInputSetResponse": {
      "type": "object",
      "properties": {
        "pipelineYaml": {
          "type": "string"
        },
        "completePipelineYaml": {
          "type": "string"
        },
        "inputSetErrorWrapper": {
          "$ref": "#/definitions/InputSetErrorWrapper"
        },
        "errorResponse": {
          "type": "boolean"
        }
      }
    },
    "ResponseMergeInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/MergeInputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "MergeInputSetTemplateRequest": {
      "type": "object",
      "properties": {
        "runtimeInputYaml": {
          "type": "string"
        }
      }
    },
    "MergeInputSetRequest": {
      "type": "object",
      "properties": {
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "withMergedPipelineYaml": {
          "type": "boolean"
        },
        "stageIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InputSetResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "inputSetYaml": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputSetErrorWrapper": {
          "$ref": "#/definitions/InputSetErrorWrapper"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "errorResponse": {
          "type": "boolean"
        },
        "outdated": {
          "type": "boolean"
        }
      }
    },
    "ResponseInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "OverlayInputSetResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "overlayInputSetYaml": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "invalidInputSetReferences": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "errorResponse": {
          "type": "boolean"
        },
        "outdated": {
          "type": "boolean"
        }
      }
    },
    "ResponseOverlayInputSetResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/OverlayInputSetResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputSetType": {
          "type": "string",
          "enum": ["INPUT_SET", "OVERLAY_INPUT_SET"]
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "isOutdated": {
          "type": "boolean"
        },
        "inputSetErrorDetails": {
          "$ref": "#/definitions/InputSetErrorWrapper"
        },
        "overlaySetErrorDetails": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "modules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        }
      }
    },
    "PageInputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int64"
        },
        "totalItems": {
          "type": "integer",
          "format": "int64"
        },
        "pageItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputSetSummaryResponse"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int64"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ResponsePageInputSetSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PageInputSetSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetSanitiseResponse": {
      "type": "object",
      "properties": {
        "inputSetUpdateResponse": {
          "$ref": "#/definitions/InputSetResponse"
        },
        "shouldDeleteInputSet": {
          "type": "boolean"
        }
      }
    },
    "ResponseInputSetSanitiseResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetSanitiseResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetYamlDiff": {
      "type": "object",
      "properties": {
        "oldYAML": {
          "type": "string"
        },
        "newYAML": {
          "type": "string"
        },
        "noUpdatePossible": {
          "type": "boolean"
        },
        "invalidReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "inputSetEmpty": {
          "type": "boolean"
        }
      }
    },
    "ResponseInputSetYamlDiff": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetYamlDiff"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetTemplateWithReplacedExpressionsResponse": {
      "type": "object",
      "properties": {
        "inputSetTemplateYaml": {
          "type": "string"
        },
        "replacedExpressions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "modules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "hasInputSets": {
          "type": "boolean"
        }
      }
    },
    "ResponseInputSetTemplateWithReplacedExpressionsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetTemplateWithReplacedExpressionsResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetTemplateRequest": {
      "type": "object",
      "properties": {
        "stageIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InputSetImportResponseDTO": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "ResponseInputSetImportResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetImportResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetImportRequestDTO": {
      "type": "object",
      "properties": {
        "inputSetName": {
          "type": "string"
        },
        "inputSetDescription": {
          "type": "string"
        }
      }
    },
    "PipelineOpaEvaluationContext": {
      "type": "object",
      "properties": {
        "pipeline": {
          "type": "object"
        },
        "user": {
          "$ref": "#/definitions/UserOpaEvaluationContext"
        },
        "action": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResponsePipelineOpaEvaluationContext": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineOpaEvaluationContext"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UserOpaEvaluationContext": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "ResponseTemplatesResolvedPipelineResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/TemplatesResolvedPipelineResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TemplatesResolvedPipelineResponseDTO": {
      "type": "object",
      "properties": {
        "yamlPipeline": {
          "type": "string"
        },
        "resolvedTemplatesPipelineYaml": {
          "type": "string"
        }
      }
    },
    "GovernanceMetadata": {
      "type": "object"
    },
    "PipelineSaveResponse": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "governanceMetadata": {
          "$ref": "#/definitions/GovernanceMetadata"
        }
      }
    },
    "ResponsePipelineSaveResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineSaveResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CloneConfig": {
      "type": "object",
      "properties": {
        "inputSets": {
          "type": "boolean"
        },
        "triggers": {
          "type": "boolean"
        },
        "connectors": {
          "type": "boolean"
        },
        "templates": {
          "type": "boolean"
        }
      }
    },
    "ClonePipelineProperties": {
      "type": "object",
      "properties": {
        "sourceConfig": {
          "$ref": "#/definitions/SourceIdentifierConfig"
        },
        "destinationConfig": {
          "$ref": "#/definitions/DestinationPipelineConfig"
        },
        "cloneConfig": {
          "$ref": "#/definitions/CloneConfig"
        }
      }
    },
    "DestinationPipelineConfig": {
      "type": "object",
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "pipelineName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SourceIdentifierConfig": {
      "type": "object",
      "properties": {
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        }
      }
    },
    "ResponseVariableMergeServiceResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/VariableMergeServiceResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceExpressionProperties": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      }
    },
    "VariableMergeServiceResponse": {
      "type": "object",
      "properties": {
        "yaml": {
          "type": "string"
        },
        "metadataMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableResponseMapValue"
          }
        },
        "errorResponses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceExpressionPropertiesList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceExpressionProperties"
          }
        }
      }
    },
    "VariableResponseMapValue": {
      "type": "object",
      "properties": {
        "yamlProperties": {
          "$ref": "#/definitions/YamlProperties"
        },
        "yamlOutputProperties": {
          "$ref": "#/definitions/YamlOutputProperties"
        },
        "yamlExtraProperties": {
          "$ref": "#/definitions/YamlExtraProperties"
        }
      }
    },
    "YamlExtraProperties": {
      "type": "object"
    },
    "YamlOutputProperties": {
      "type": "object"
    },
    "YamlProperties": {
      "type": "object"
    },
    "PMSPipelineResponseDTO": {
      "type": "object",
      "properties": {
        "yamlPipeline": {
          "type": "string"
        },
        "resolvedTemplatesPipelineYaml": {
          "type": "string"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "modules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "governanceMetadata": {
          "$ref": "#/definitions/GovernanceMetadata"
        },
        "yamlSchemaErrorWrapper": {
          "$ref": "#/definitions/YamlSchemaErrorWrapperDTO"
        },
        "validateTemplateInputsResponse": {
          "$ref": "#/definitions/ValidateTemplateInputsResponseDTO"
        }
      }
    },
    "ResponsePMSPipelineResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PMSPipelineResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutorInfoDTO": {
      "type": "object",
      "properties": {
        "triggerType": {
          "type": "string",
          "enum": ["NOOP", "MANUAL", "WEBHOOK", "WEBHOOK_CUSTOM", "SCHEDULER_CRON", "UNRECOGNIZED"]
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "PMSPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "numOfStages": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "modules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "executionSummaryInfo": {
          "$ref": "#/definitions/executionSummaryInfo"
        },
        "recentExecutionsInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecentExecutionInfoDTO"
          }
        },
        "filters": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "stageNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "entityValidityDetails": {
          "$ref": "#/definitions/EntityValidityDetails"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "PagePMSPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PMSPipelineSummaryResponse"
          }
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "paged": {
          "type": "boolean"
        },
        "unpaged": {
          "type": "boolean"
        }
      }
    },
    "RecentExecutionInfoDTO": {
      "type": "object",
      "properties": {
        "executorInfo": {
          "$ref": "#/definitions/ExecutorInfoDTO"
        },
        "planExecutionId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "runSequence": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponsePagePMSPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PagePMSPipelineSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "unsorted": {
          "type": "boolean"
        },
        "sorted": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "executionSummaryInfo": {
      "type": "object",
      "properties": {
        "numOfErrors": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "lastExecutionTs": {
          "type": "integer",
          "format": "int64"
        },
        "lastExecutionStatus": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "lastExecutionId": {
          "type": "string"
        }
      }
    },
    "ResponsePMSPipelineSummaryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PMSPipelineSummaryResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PipelineImportRequest": {
      "type": "object",
      "properties": {
        "pipelineName": {
          "type": "string"
        },
        "pipelineDescription": {
          "type": "string"
        }
      }
    },
    "PipelineExpandedJson": {
      "type": "object",
      "properties": {
        "expandedJson": {
          "type": "string"
        }
      }
    },
    "ResponsePipelineExpandedJson": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineExpandedJson"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "NotificationChannelWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/PmsNotificationChannel"
        }
      }
    },
    "NotificationRules": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "pipelineEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineEvent"
          }
        },
        "notificationMethod": {
          "$ref": "#/definitions/NotificationChannelWrapper"
        }
      }
    },
    "PipelineEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AllEvents",
            "PipelineStart",
            "PipelineSuccess",
            "PipelineFailed",
            "PipelineEnd",
            "PipelinePaused",
            "StageSuccess",
            "StageFailed",
            "StageStart",
            "StepFailed"
          ]
        },
        "forStages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PmsEmailChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "recipients": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PmsMSTeamChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "msTeamKeys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "PmsNotificationChannel": {
      "type": "object",
      "discriminator": "type"
    },
    "PmsPagerDutyChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "integrationKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PmsSlackChannel": {
      "allOf": [
        {
          "$ref": "#/definitions/PmsNotificationChannel"
        },
        {
          "type": "object",
          "properties": {
            "userGroups": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "webhookUrl": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponseNotificationRules": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/NotificationRules"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AdviserIssuer": {
      "type": "object",
      "required": ["adviseType"],
      "properties": {
        "adviseType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "NEXT_STEP",
            "RETRY",
            "INTERVENTION_WAIT",
            "END_PLAN",
            "MARK_SUCCESS",
            "IGNORE_FAILURE",
            "PROCEED_WITH_DEFAULT",
            "UNRECOGNIZED"
          ]
        }
      }
    },
    "DelegateInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "taskName": {
          "type": "string"
        }
      }
    },
    "ExecutableResponse": {
      "type": "object"
    },
    "ExecutionNode": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "setupId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "baseFqn": {
          "type": "string"
        },
        "outcomes": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "stepParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "stepType": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "failureInfo": {
          "$ref": "#/definitions/FailureInfoDTO"
        },
        "skipInfo": {
          "$ref": "#/definitions/SkipInfo"
        },
        "nodeRunInfo": {
          "$ref": "#/definitions/NodeRunInfo"
        },
        "executableResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutableResponse"
          }
        },
        "unitProgresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitProgress"
          }
        },
        "progressData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "delegateInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DelegateInfo"
          }
        },
        "interruptHistories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterruptEffectDTO"
          }
        },
        "stepDetails": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "strategyMetadata": {
          "$ref": "#/definitions/StrategyMetadata"
        },
        "executionInputConfigured": {
          "type": "boolean"
        }
      }
    },
    "FailureInfoDTO": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "failureTypeList": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR",
              "POLICY_EVALUATION_FAILURE",
              "EXECUTION_INPUT_TIMEOUT_FAILURE"
            ]
          }
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "InterruptConfig": {
      "type": "object",
      "required": ["issuedBy"],
      "properties": {
        "issuedBy": {
          "$ref": "#/definitions/IssuedBy"
        },
        "retryInterruptConfig": {
          "$ref": "#/definitions/RetryInterruptConfig"
        }
      }
    },
    "InterruptEffectDTO": {
      "type": "object",
      "required": ["interruptConfig", "interruptId", "interruptType", "tookEffectAt"],
      "properties": {
        "interruptId": {
          "type": "string"
        },
        "tookEffectAt": {
          "type": "integer",
          "format": "int64"
        },
        "interruptType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "ABORT",
            "ABORT_ALL",
            "PAUSE",
            "PAUSE_ALL",
            "RESUME",
            "RESUME_ALL",
            "RETRY",
            "IGNORE",
            "WAITING_FOR_MANUAL_INTERVENTION",
            "MARK_FAILED",
            "MARK_SUCCESS",
            "NEXT_STEP",
            "END_EXECUTION",
            "MARK_EXPIRED",
            "CUSTOM_FAILURE",
            "EXPIRE_ALL",
            "PROCEED_WITH_DEFAULT",
            "UNRECOGNIZED"
          ]
        },
        "interruptConfig": {
          "$ref": "#/definitions/InterruptConfig"
        }
      }
    },
    "IssuedBy": {
      "type": "object",
      "required": ["issueTime"],
      "properties": {
        "issueTime": {
          "type": "integer",
          "format": "int64"
        },
        "manualIssuer": {
          "$ref": "#/definitions/ManualIssuer"
        },
        "adviserIssuer": {
          "$ref": "#/definitions/AdviserIssuer"
        },
        "timeoutIssuer": {
          "$ref": "#/definitions/TimeoutIssuer"
        },
        "triggerIssuer": {
          "$ref": "#/definitions/TriggerIssuer"
        }
      }
    },
    "ManualIssuer": {
      "type": "object",
      "required": ["email_id", "identifier", "type", "user_id"],
      "properties": {
        "email_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "NodeRunInfo": {
      "type": "object"
    },
    "ResponseExecutionNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ExecutionNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryInterruptConfig": {
      "type": "object",
      "required": ["retryId"],
      "properties": {
        "retryId": {
          "type": "string"
        }
      }
    },
    "SkipInfo": {
      "type": "object"
    },
    "StrategyMetadata": {
      "type": "object"
    },
    "TimeoutIssuer": {
      "type": "object",
      "required": ["timeoutInstanceId"],
      "properties": {
        "timeoutInstanceId": {
          "type": "string"
        }
      }
    },
    "TriggerIssuer": {
      "type": "object",
      "required": ["abortPrevConcurrentExecution", "triggerRef"],
      "properties": {
        "triggerRef": {
          "type": "string"
        },
        "abortPrevConcurrentExecution": {
          "type": "boolean"
        }
      }
    },
    "UnitProgress": {
      "type": "object"
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Abort"]
            }
          }
        }
      ]
    },
    "ExcludeConfig": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValue"
          ]
        }
      }
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": ["onFailure"],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      }
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "times": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "maxConcurrency": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partitionSize": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "unit": {
          "type": "string",
          "enum": ["Percentage", "Count"]
        }
      }
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Ignore"]
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "validatorType": {
          "type": "string",
          "enum": ["ALLOWED_VALUES", "REGEX"]
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": ["onTimeout", "timeout"],
      "properties": {
        "timeout": {
          "type": "string"
        },
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        }
      }
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["ManualIntervention"]
            }
          }
        }
      ]
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["MarkAsSuccess"]
            }
          }
        }
      ]
    },
    "MatrixConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/MatrixConfigInterface"
        },
        {
          "type": "object",
          "properties": {
            "exclude": {
              "$ref": "#/definitions/ParameterFieldListExcludeConfig"
            },
            "maxConcurrency": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        }
      ]
    },
    "MatrixConfigInterface": {
      "type": "object",
      "discriminator": "type"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": ["action", "errors"],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "ExecutionInputTimeoutError"
            ]
          }
        },
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        },
        "defaultValue": {
          "type": "object"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "ParameterFieldListExcludeConfig": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExcludeConfig"
          }
        },
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExcludeConfig"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["PipelineRollback"]
            }
          }
        }
      ]
    },
    "PmsAbstractStepNode": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["ProceedWithDefaultValue"]
            }
          }
        }
      ]
    },
    "ResponsePmsAbstractStepNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PmsAbstractStepNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["Retry"]
            }
          }
        }
      ]
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": ["onRetryFailure", "retryCount", "retryIntervals"],
      "properties": {
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StageRollback"]
            }
          }
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StepGroupRollback"]
            }
          }
        }
      ]
    },
    "StepWhenCondition": {
      "type": "object",
      "required": ["stageStatus"],
      "properties": {
        "stageStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "$ref": "#/definitions/MatrixConfigInterface"
        },
        "repeat": {
          "$ref": "#/definitions/HarnessForConfig"
        },
        "parallelism": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "JsonNode": {
      "type": "object"
    },
    "ResponseTemplateStepNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/TemplateStepNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": ["templateRef"],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        },
        "templateInputs": {
          "$ref": "#/definitions/JsonNode"
        },
        "templateVariables": {
          "$ref": "#/definitions/JsonNode"
        }
      }
    },
    "TemplateStepNode": {
      "type": "object",
      "required": ["identifier", "name", "template"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        }
      }
    },
    "ResponseTemplateStageNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/TemplateStageNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "TemplateStageNode": {
      "type": "object",
      "required": ["identifier", "name", "template"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        }
      }
    },
    "ResponseStepCategory": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StepCategory"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StepCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "stepsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepData"
          }
        },
        "stepCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepCategory"
          }
        }
      }
    },
    "StepData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "featureRestrictionName": {
          "type": "string",
          "enum": [
            "TEST1",
            "TEST2",
            "TEST3",
            "TEST4",
            "TEST5",
            "TEST6",
            "TEST7",
            "PERSPECTIVES",
            "CCM_K8S_CLUSTERS",
            "CCM_AUTOSTOPPING_RULES",
            "MULTIPLE_ORGANIZATIONS",
            "MULTIPLE_PROJECTS",
            "INTEGRATED_APPROVALS_WITH_HARNESS_UI",
            "INTEGRATED_APPROVALS_WITH_CUSTOM_SCRIPT",
            "INTEGRATED_APPROVALS_WITH_JIRA",
            "SECRET_MANAGERS",
            "DEPLOYMENTS",
            "INITIAL_DEPLOYMENTS",
            "DEPLOYMENTS_PER_MONTH",
            "SERVICES",
            "BUILDS",
            "SAML_SUPPORT",
            "OAUTH_SUPPORT",
            "LDAP_SUPPORT",
            "TWO_FACTOR_AUTH_SUPPORT",
            "CUSTOM_ROLES",
            "CUSTOM_RESOURCE_GROUPS",
            "MAX_TOTAL_BUILDS",
            "MAX_BUILDS_PER_MONTH",
            "ACTIVE_COMMITTERS",
            "TEST_INTELLIGENCE",
            "TEMPLATE_SERVICE",
            "SRM_SERVICES",
            "K8S_BG_SWAP_SERVICES",
            "K8S_BLUE_GREEN_DEPLOY",
            "K8S_APPLY",
            "K8S_DELETE",
            "K8S_CANARY_DELETE",
            "K8S_ROLLING_DEPLOY",
            "K8S_CANARY_DEPLOY",
            "K8S_SCALE",
            "K8S_ROLLING_ROLLBACK",
            "TERRAFORM_APPLY",
            "TERRAFORM_PLAN",
            "TERRAFORM_DESTROY",
            "TERRAFORM_ROLLBACK",
            "INTEGRATED_APPROVALS_WITH_SERVICE_NOW",
            "CREATE_STACK",
            "DELETE_STACK",
            "ROLLBACK_STACK",
            "COMMAND",
            "AZURE_SLOT_DEPLOYMENT",
            "AZURE_TRAFFIC_SHIFT",
            "AZURE_SWAP_SLOT",
            "AZURE_WEBAPP_ROLLBACK",
            "JENKINS_BUILD",
            "AZURE_CREATE_ARM_RESOURCE",
            "AZURE_CREATE_BP_RESOURCE",
            "AZURE_ROLLBACK_ARM_RESOURCE",
            "SECURITY",
            "DEVELOPERS",
            "MONTHLY_ACTIVE_USERS",
            "JENKINS_ARTIFACT",
            "STRATEGY_MAX_CONCURRENT",
            "MAX_CHAOS_SCENARIO_RUNS_PER_MONTH",
            "MAX_CHAOS_DELEGATES"
          ]
        }
      }
    },
    "StepPalleteFilterWrapper": {
      "type": "object",
      "properties": {
        "stepPalleteModuleInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepPalleteModuleInfo"
          }
        }
      }
    },
    "StepPalleteModuleInfo": {
      "type": "object",
      "properties": {
        "module": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "shouldShowCommonSteps": {
          "type": "boolean"
        },
        "commonStepCategory": {
          "type": "string"
        }
      }
    },
    "EdgeLayoutList": {
      "type": "object",
      "properties": {
        "currentNodeChildren": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionErrorInfo": {
      "type": "object"
    },
    "ExecutionTriggerInfo": {
      "type": "object"
    },
    "GraphLayoutNode": {
      "type": "object",
      "properties": {
        "nodeType": {
          "type": "string"
        },
        "nodeGroup": {
          "type": "string"
        },
        "nodeIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeUuid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "module": {
          "type": "string"
        },
        "moduleInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "edgeLayoutList": {
          "$ref": "#/definitions/EdgeLayoutList"
        },
        "skipInfo": {
          "$ref": "#/definitions/SkipInfo"
        },
        "nodeRunInfo": {
          "$ref": "#/definitions/NodeRunInfo"
        },
        "barrierFound": {
          "type": "boolean"
        },
        "failureInfo": {
          "$ref": "#/definitions/ExecutionErrorInfo"
        },
        "failureInfoDTO": {
          "$ref": "#/definitions/FailureInfoDTO"
        },
        "stepDetails": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "hidden": {
          "type": "boolean"
        },
        "nodeExecutionId": {
          "type": "string"
        },
        "strategyMetadata": {
          "$ref": "#/definitions/StrategyMetadata"
        },
        "executionInputConfigured": {
          "type": "boolean"
        }
      }
    },
    "PagePipelineExecutionSummary": {
      "type": "object",
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineExecutionSummary"
          }
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "last": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "PipelineExecutionSummary": {
      "type": "object",
      "properties": {
        "pipelineIdentifier": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGTag"
          }
        },
        "executionTriggerInfo": {
          "$ref": "#/definitions/ExecutionTriggerInfo"
        },
        "executionErrorInfo": {
          "$ref": "#/definitions/ExecutionErrorInfo"
        },
        "governanceMetadata": {
          "$ref": "#/definitions/GovernanceMetadata"
        },
        "failureInfo": {
          "$ref": "#/definitions/FailureInfoDTO"
        },
        "moduleInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "layoutNodeMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GraphLayoutNode"
          }
        },
        "modules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startingNodeId": {
          "type": "string"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "canRetry": {
          "type": "boolean"
        },
        "showRetryHistory": {
          "type": "boolean"
        },
        "runSequence": {
          "type": "integer",
          "format": "int32"
        },
        "successfulStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "runningStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "failedStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalStagesCount": {
          "type": "integer",
          "format": "int64"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        },
        "storeType": {
          "type": "string",
          "enum": ["INLINE", "REMOTE"]
        },
        "connectorRef": {
          "type": "string"
        },
        "executionInputConfigured": {
          "type": "boolean"
        },
        "stagesExecuted": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stagesExecutedNames": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allowStageExecutions": {
          "type": "boolean"
        },
        "stagesExecution": {
          "type": "boolean"
        }
      }
    },
    "ResponsePagePipelineExecutionSummary": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PagePipelineExecutionSummary"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionGraph": {
      "type": "object",
      "properties": {
        "rootNodeId": {
          "type": "string"
        },
        "nodeMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExecutionNode"
          }
        },
        "nodeAdjacencyListMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExecutionNodeAdjacencyList"
          }
        },
        "representationStrategy": {
          "type": "string",
          "enum": ["camelCase"]
        }
      }
    },
    "ExecutionNodeAdjacencyList": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PipelineExecutionDetail": {
      "type": "object",
      "properties": {
        "pipelineExecutionSummary": {
          "$ref": "#/definitions/PipelineExecutionSummary"
        },
        "executionGraph": {
          "$ref": "#/definitions/ExecutionGraph"
        }
      }
    },
    "ResponsePipelineExecutionDetail": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineExecutionDetail"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionDataResponse": {
      "type": "object",
      "properties": {
        "executionId": {
          "type": "string"
        },
        "executionYaml": {
          "type": "string"
        }
      }
    },
    "ResponseExecutionDataResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ExecutionDataResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "InputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "inputSetTemplateYaml": {
          "type": "string"
        },
        "inputSetYaml": {
          "type": "string"
        },
        "latestTemplateYaml": {
          "type": "string"
        },
        "expressionValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResponseInputSetTemplateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/InputSetTemplateResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionInputVariablesResponse": {
      "type": "object",
      "properties": {
        "variableMergeServiceResponse": {
          "$ref": "#/definitions/VariableMergeServiceResponse"
        },
        "pipelineYaml": {
          "type": "string"
        }
      }
    },
    "ResponseExecutionInputVariablesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ExecutionInputVariablesResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionInputDTO": {
      "type": "object",
      "properties": {
        "nodeExecutionId": {
          "type": "string"
        },
        "inputInstanceId": {
          "type": "string"
        },
        "inputTemplate": {
          "type": "string"
        },
        "userInput": {
          "type": "string"
        },
        "fieldYaml": {
          "type": "string"
        }
      }
    },
    "ResponseExecutionInputDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ExecutionInputDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionInputStatus": {
      "type": "object",
      "properties": {
        "nodeExecutionId": {
          "type": "string"
        },
        "inputInstanceId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["Failed", "Success"]
        }
      }
    },
    "ResponseExecutionInputStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ExecutionInputStatus"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ExecutionMetadata": {
      "type": "object"
    },
    "PlanExecution": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "planId": {
          "type": "string"
        },
        "setupAbstractions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "NO_OP",
            "RUNNING",
            "INTERVENTION_WAITING",
            "TIMED_WAITING",
            "ASYNC_WAITING",
            "TASK_WAITING",
            "DISCONTINUING",
            "PAUSING",
            "QUEUED",
            "SKIPPED",
            "PAUSED",
            "ABORTED",
            "ERRORED",
            "FAILED",
            "EXPIRED",
            "SUSPENDED",
            "SUCCEEDED",
            "IGNORE_FAILED",
            "APPROVAL_WAITING",
            "RESOURCE_WAITING",
            "APPROVAL_REJECTED",
            "INPUT_WAITING",
            "WAIT_STEP_RUNNING",
            "UNRECOGNIZED"
          ]
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "$ref": "#/definitions/ExecutionMetadata"
        },
        "governanceMetadata": {
          "$ref": "#/definitions/GovernanceMetadata"
        },
        "lastUpdatedAt": {
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "nextIteration": {
          "type": "integer",
          "format": "int64"
        },
        "nodeType": {
          "type": "string",
          "enum": ["PLAN", "PLAN_NODE", "IDENTITY_PLAN_NODE"]
        },
        "nodeId": {
          "type": "string"
        }
      }
    },
    "PlanExecutionResponseDto": {
      "type": "object",
      "properties": {
        "planExecution": {
          "$ref": "#/definitions/PlanExecution"
        },
        "gitDetails": {
          "$ref": "#/definitions/EntityGitDetails"
        }
      }
    },
    "ResponsePlanExecutionResponseDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PlanExecutionResponseDto"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RunStageRequestDTO": {
      "type": "object",
      "properties": {
        "runtimeInputYaml": {
          "type": "string"
        },
        "stageIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expressionValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResponsePipelineExecutionInterrupt": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/pipelineExecutionInterrupt"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "pipelineExecutionInterrupt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "AbortAll",
            "Abort",
            "Pause",
            "Resume",
            "Ignore",
            "StageRollback",
            "StepGroupRollback",
            "MarkAsSuccess",
            "ExpireAll",
            "Retry"
          ]
        },
        "planExecutionId": {
          "type": "string"
        }
      }
    },
    "ResponseRetryInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/RetryInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryGroup": {
      "type": "object",
      "properties": {
        "info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetryStageInfo"
          }
        }
      }
    },
    "RetryInfo": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetryGroup"
          }
        },
        "resumable": {
          "type": "boolean"
        }
      }
    },
    "RetryStageInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "parentId": {
          "type": "string"
        },
        "nextId": {
          "type": "string"
        }
      }
    },
    "ConnectorCheckResponse": {
      "type": "object",
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/PreFlightEntityErrorInfo"
        },
        "fqn": {
          "type": "string"
        },
        "stageName": {
          "type": "string"
        },
        "stageIdentifier": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        },
        "stepIdentifier": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "IN_PROGRESS", "UNKNOWN"]
        }
      }
    },
    "ConnectorWrapperResponse": {
      "type": "object",
      "properties": {
        "checkResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorCheckResponse"
          }
        },
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "IN_PROGRESS", "UNKNOWN"]
        },
        "label": {
          "type": "string"
        }
      }
    },
    "PipelineInputResponse": {
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/PreFlightEntityErrorInfo"
        },
        "success": {
          "type": "boolean"
        },
        "fqn": {
          "type": "string"
        },
        "stageName": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        }
      }
    },
    "PipelineWrapperResponse": {
      "type": "object",
      "properties": {
        "pipelineInputResponse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineInputResponse"
          }
        },
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "IN_PROGRESS", "UNKNOWN"]
        },
        "label": {
          "type": "string"
        }
      }
    },
    "PreFlightCause": {
      "type": "object",
      "properties": {
        "cause": {
          "type": "string"
        }
      }
    },
    "PreFlightDTO": {
      "type": "object",
      "properties": {
        "pipelineInputWrapperResponse": {
          "$ref": "#/definitions/PipelineWrapperResponse"
        },
        "connectorWrapperResponse": {
          "$ref": "#/definitions/ConnectorWrapperResponse"
        },
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "IN_PROGRESS", "UNKNOWN"]
        },
        "errorInfo": {
          "$ref": "#/definitions/PreFlightErrorInfo"
        }
      }
    },
    "PreFlightEntityErrorInfo": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreFlightCause"
          }
        },
        "resolution": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreFlightResolution"
          }
        }
      }
    },
    "PreFlightErrorInfo": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PreFlightResolution": {
      "type": "object",
      "properties": {
        "resolution": {
          "type": "string"
        }
      }
    },
    "ResponsePreFlightDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PreFlightDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseListStageExecutionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageExecutionResponse"
          }
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "StageExecutionResponse": {
      "type": "object",
      "properties": {
        "stageIdentifier": {
          "type": "string"
        },
        "stageName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stagesRequired": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "toBeBlocked": {
          "type": "boolean"
        }
      }
    },
    "ExecutionInfo": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "AsyncWaiting",
            "TaskWaiting",
            "TimedWaiting",
            "Failed",
            "Errored",
            "IgnoreFailed",
            "NotStarted",
            "Expired",
            "Aborted",
            "Discontinuing",
            "Queued",
            "Paused",
            "ResourceWaiting",
            "InterventionWaiting",
            "ApprovalWaiting",
            "Success",
            "Suspended",
            "Skipped",
            "Pausing",
            "ApprovalRejected",
            "InputWaiting",
            "NOT_STARTED",
            "INTERVENTION_WAITING",
            "APPROVAL_WAITING",
            "APPROVAL_REJECTED",
            "WAITING"
          ]
        }
      }
    },
    "ResponseRetryHistoryResponseDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/RetryHistoryResponseDto"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryHistoryResponseDto": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "latestExecutionId": {
          "type": "string"
        },
        "executionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionInfo"
          }
        }
      }
    },
    "ResponseRetryLatestExecutionResponseDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/RetryLatestExecutionResponseDto"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RetryLatestExecutionResponseDto": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "latestExecutionId": {
          "type": "string"
        }
      }
    },
    "ResourceConstraintDetail": {
      "type": "object",
      "properties": {
        "pipelineName": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["BLOCKED", "ACTIVE", "FINISHED", "REJECTED"]
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        }
      }
    },
    "ResourceConstraintExecutionInfo": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "resourceConstraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceConstraintDetail"
          }
        }
      }
    },
    "ResponseResourceConstraintExecutionInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ResourceConstraintExecutionInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddRule"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddRuleYamlSpec"
            }
          }
        }
      ]
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "distribution": {
          "$ref": "#/definitions/DistributionYamlSpec"
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Clause"
          }
        }
      }
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddSegmentToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddTargetsToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApprovalStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["execution"],
          "properties": {
            "execution": {
              "$ref": "#/definitions/ExecutionElementConfig"
            }
          }
        }
      ]
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "Approvers": {
      "type": "object",
      "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
      "properties": {
        "userGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "minimumCount": {
          "type": "integer",
          "format": "int32"
        },
        "disallowPipelineExecutor": {
          "type": "boolean"
        }
      }
    },
    "BarrierInfoConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["barrierRef"],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["branch"],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Build": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["branch", "tag", "PR"]
        },
        "spec": {
          "$ref": "#/definitions/BuildSpec"
        }
      }
    },
    "BuildSpec": {
      "type": "object"
    },
    "CIProperties": {
      "type": "object",
      "properties": {
        "codebase": {
          "$ref": "#/definitions/CodeBase"
        }
      }
    },
    "Clause": {
      "type": "object",
      "required": ["attribute", "id", "negate", "op", "values"],
      "properties": {
        "id": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "negate": {
          "type": "boolean"
        }
      }
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": ["op", "values"],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CodeBase": {
      "type": "object",
      "required": ["build", "connectorRef"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/Build"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "sslVerify": {
          "type": "boolean"
        },
        "prCloneStrategy": {
          "type": "string",
          "enum": ["MergeCommit", "SourceBranch"]
        },
        "resources": {
          "$ref": "#/definitions/ContainerResource"
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": ["key", "operator"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": ["equals", "not equals", "in", "not in"]
        }
      }
    },
    "ContainerResource": {
      "type": "object",
      "required": ["limits"],
      "properties": {
        "limits": {
          "$ref": "#/definitions/Limits"
        }
      }
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Jexl", "KeyValues"]
        },
        "spec": {
          "$ref": "#/definitions/CriteriaSpec"
        }
      }
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "retryInterval", "scriptTimeout", "shell", "source"],
          "properties": {
            "shell": {
              "type": "string",
              "enum": ["Bash", "PowerShell"]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            }
          }
        }
      ]
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/PolicySpec"
        },
        {
          "type": "object",
          "required": ["payload"],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["execution"],
          "properties": {
            "execution": {
              "$ref": "#/definitions/ExecutionElementConfig"
            }
          }
        }
      ]
    },
    "Distribution": {
      "type": "object",
      "required": ["bucketBy", "variations"],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeightedVariation"
          }
        }
      }
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": ["bucketBy"],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClauseYamlSpec"
          }
        }
      }
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["subject", "to"],
          "properties": {
            "to": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "body": {
              "type": "string"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": ["steps"],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      }
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      }
    },
    "FeatureFlagStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["environment", "feature", "instructions"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            },
            "instructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchInstruction"
              }
            }
          }
        }
      ]
    },
    "FlowControlConfig": {
      "type": "object",
      "properties": {
        "barriers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BarrierInfoConfig"
          }
        }
      }
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvers", "includePipelineExecutionHistory"],
          "properties": {
            "approvalMessage": {
              "type": "string"
            },
            "includePipelineExecutionHistory": {
              "type": "boolean"
            },
            "approvers": {
              "$ref": "#/definitions/Approvers"
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproverInputInfo"
              }
            }
          }
        }
      ]
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["method", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "requestBody": {
              "type": "string"
            },
            "assertion": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HttpHeaderConfig"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "connectorRef", "issueKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "issueType", "projectKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JiraField": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "issueKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/TransitionTo"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["conditions"],
          "properties": {
            "matchAnyCondition": {
              "type": "boolean"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            }
          }
        }
      ]
    },
    "Limits": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        }
      }
    },
    "NGProperties": {
      "type": "object",
      "properties": {
        "ci": {
          "$ref": "#/definitions/CIProperties"
        }
      }
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["String", "Number", "Secret"]
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Number"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "default": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "PRBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["number"],
          "properties": {
            "number": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ParallelStageElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageElementWrapperConfig"
          }
        }
      }
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        }
      }
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      }
    },
    "PipelineConfig": {
      "type": "object",
      "properties": {
        "pipeline": {
          "readOnly": true,
          "$ref": "#/definitions/PipelineInfoConfig"
        }
      }
    },
    "PipelineInfoConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "flowControl": {
          "$ref": "#/definitions/FlowControlConfig"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "properties": {
          "$ref": "#/definitions/NGProperties"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageElementWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "notificationRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRules"
          }
        },
        "orgIdentifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "allowStageExecutions": {
          "type": "boolean"
        },
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["policySets"],
          "properties": {
            "policySets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string"
            },
            "policySpec": {
              "$ref": "#/definitions/PolicySpec"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["key", "scope"],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": ["Pipeline", "Stage"]
            }
          }
        }
      ]
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["RemoveSegmentToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["RemoveTargetsToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
          "properties": {
            "name": {
              "type": "string"
            },
            "resourceUnit": {
              "$ref": "#/definitions/ParameterFieldString"
            },
            "acquireMode": {
              "type": "string",
              "enum": ["ENSURE", "ACCUMULATE"]
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "holdingScope": {
              "type": "string",
              "enum": ["PLAN", "PIPELINE", "STAGE", "STEP_GROUP"]
            }
          }
        }
      ]
    },
    "ResponsePipelineConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PipelineConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Secret"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "variation": {
          "type": "string"
        }
      }
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "connectorRef", "ticketNumber", "ticketType"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/ServiceNowChangeWindowSpec"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "ticketType", "useServiceNowTemplate"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            },
            "templateName": {
              "type": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceNowField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ServiceNowField": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "ticketNumber", "ticketType", "useServiceNowTemplate"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            },
            "templateName": {
              "type": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceNowField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetDefaultVariations"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetDefaultVariationsYamlSpec"
            }
          }
        }
      ]
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": ["off", "on"],
      "properties": {
        "on": {
          "type": "string"
        },
        "off": {
          "type": "string"
        }
      }
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetFeatureFlagState"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetFeatureFlagStateYamlSpec"
            }
          }
        }
      ]
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": ["state"],
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetOffVariation"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOffVariationYamlSpec"
            }
          }
        }
      ]
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": {
        "variation": {
          "type": "string"
        }
      }
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetOnVariation"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOnVariationYamlSpec"
            }
          }
        }
      ]
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": {
        "variation": {
          "type": "string"
        }
      }
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ShellScriptBaseSource"
        }
      }
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["onDelegate", "shell", "source"],
          "properties": {
            "shell": {
              "type": "string",
              "enum": ["Bash", "PowerShell"]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            },
            "executionTarget": {
              "$ref": "#/definitions/ExecutionTarget"
            },
            "onDelegate": {
              "type": "boolean"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StageElementConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StageWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "skipInstances": {
          "type": "boolean"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "spec": {
          "$ref": "#/definitions/StageInfoConfig"
        }
      }
    },
    "StageElementWrapperConfig": {
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/StageElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStageElementConfig"
        }
      }
    },
    "StageInfoConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "StageWhenCondition": {
      "type": "object",
      "required": ["pipelineStatus"],
      "properties": {
        "pipelineStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StepElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "type": {
          "type": "string"
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        },
        "spec": {
          "$ref": "#/definitions/StepSpecType"
        }
      }
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "steps"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "strategy": {
          "$ref": "#/definitions/StrategyConfig"
        }
      }
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["String"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["tag"],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TransitionTo": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      }
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UpdateRule"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/UpdateRuleYamlSpec"
            }
          }
        }
      ]
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": ["bucketBy", "ruleID"],
      "properties": {
        "ruleID": {
          "type": "string"
        },
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        }
      }
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "WeightedVariation": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseJsonNode": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/JsonNode"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseYamlSchemaResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/YamlSchemaResponse"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "SchemaErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "YamlSchemaResponse": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "schemaErrorResponse": {
          "$ref": "#/definitions/SchemaErrorResponse"
        }
      }
    },
    "ResponseValidateTemplateInputsResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/ValidateTemplateInputsResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseYamlDiffResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/YamlDiffResponseDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "YamlDiffResponseDTO": {
      "type": "object",
      "properties": {
        "originalYaml": {
          "type": "string"
        },
        "refreshedYaml": {
          "type": "string"
        }
      }
    },
    "ResponseWaitStepExecutionDetailsDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/WaitStepExecutionDetailsDto"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "WaitStepExecutionDetailsDto": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "nodeExecutionId": {
          "type": "string"
        }
      }
    },
    "ResponseWaitStepResponseDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/WaitStepResponseDto"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "WaitStepResponseDto": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "WaitStepRequestDto": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MARK_AS_SUCCESS", "MARK_AS_FAIL"]
        }
      }
    }
  }
}
