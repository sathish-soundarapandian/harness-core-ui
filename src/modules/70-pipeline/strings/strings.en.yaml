verificationResult: 'Verification result:'
estimatedTimeRemaining: 'Estimated time remaining:'
progressPercentage: 'Progress percentage:'
piplineDiffTitle: pipeline.yaml (saved) ↔ pipeline.yaml (updated)
clone: Clone Pipeline
moveInlieToRemote: Move {{resource}} Inline to Remote
discard: '{{ $.common.discard }}'
serviceDependencyText: Service Dependency
serviceDependenciesText: Service Dependencies
stepLabel: '{{name}} (Id: {{identifier}})'
numOfStage: 1 stage
numOfStages: '{{n}} stages'
enableVerificationTitle: Add Continuous Verification
enableVerificationOptions: Enable Continuous Verification
enableVerificationHelpText: Apply verification step to a deployment to detect regressions or anomalies, and to rollback failed deployments.
openInPipelineStudio: Open in Pipeline Studio
closeStepConfig: Close step configuration?
stepConfigContent: Changes to your step configuration will be lost if you do not apply your changes.
stepConfigHasChanges: Form has some unsaved changes, Do you want to apply the changes?
clickHere: Click here
stepDetails: Step details
stageVariables: Stage Variables
scriptInputVariables: Script Input Variables
scriptOutputVariables: Script Output Variables
executionTarget: Execution Target
removeTemplate: '<b>{{name}}</b> will be removed from this {{entity}}.'
cloneSuccess: 'Pipeline {{name}} has been cloned successfully as {{cloneName}}'
templateSaved: 'Template {{name}} has been published successfully. Applying {{name}} to your {{entity}} might reset some fields.'
collapseIsDisabledWhileStageIsRunning: Collapse is disable while stage is running
changeTemplateLabel: Change Template
removeTemplateLabel: Remove Template
openTemplateInNewTabLabel: Open Template in new tab
previewTemplateLabel: Preview Template YAML
templateInputs: Template Inputs
onlyPositiveInteger: Only positive integer values
depth: Depth
feedsText: Feeds
advancedOptions: Advanced Options
additionalConfiguration: Additional Configuration
pipelineTimeoutSettings: Pipeline Timeout Settings
pipelineTimeoutHelpText: Enter a timeout for the entire Pipeline. You can change this setting at any time.
stageExecutionSettings: Stage Execution Settings
stageExecutionsHelperText: Allow selective stage(s) executions?
sslVerify: SSL Verify
noPipelinesLabel: No pipelines
noPipelinesText: There are no pipelines in your project. Click the button below to create a pipeline.
noRunsSimpleText: No {{moduleRunType}}
noRunsLabel: No {{moduleRunType}} in your project
noRunsText: Your project does not have any {{moduleRunType}} yet. Click the button below to run a pipeline.
parallelSelectedStages: '{{selected}}, +{{total}} Stages'
parallelStages: '+{{total}} Stages'
runAPipeline: Run a Pipeline
regionPlaceholder: Select or Enter Region
repositoryPlaceholder: <container-registry-name>.azurecr.io/<image>
repositoryUrlPlaceholder: Enter Repository URL
lastSevenDays: In Last 7 days
neverRan: This pipeline never ran
startedOn: Started On
nodes: nodes
nodesLabel: Nodes
amiTags: AMI Tags
advancedConfiguration: 'Advanced Configuration'
amiFilters: AMi Filters
poweredByHarness: powered by Harness
linuxOnly: Supported on Linux only
outOf: Out Of
clickToExpandErrorDetails: Click to expand error details
totalCount: 'Total: {{ count }}'
approvalStage:
  settingUpStage: Getting stage data
  approvalStageLogsViewMessage: This step is waiting for your approval. Please click on the Approval button on the right to approve or reject.
filters:
  pipelineNamePlaceholder: Enter Pipeline Name
  deploymentTypePlaceholder: Search/Select Deployment Type
  servicePlaceholder: Search/Select Service
  environmentPlaceholder: Search/Select Environment
  builtTypePlaceholder: Select Build Type
selectStagePlaceholder: Search/Select Stage
selectStage: Select Stage
stepNamePlaceholder: 'Enter Step Name'
rightBar:
  editCodebaseConfiguration: Edit Codebase Configuration
  mergeCommit: Merge Commit
barrierStep:
  barrierReference: Barrier Reference
  barrierReferenceRequired: Barrier Reference is required
  barrierReferencePlaceholder: Select or Enter Barrier Reference
timeRemainingSuffix: remaining till timeout
utilitiesStep:
  url: Enter the URL
  requestBody: Enter the message body
  assertion: Enter Assertion
  to: Enter recipient email
  subject: Enter the email subject
  cc: Cc
terraformStep:
  provisionerIdentifier: Enter Provisioner Identifier
  workspace: Enter Workspace
  workspacePlaceholder: Select Workspace
  workspaceName: Terraform Workspace
  workspaceError: No workspaces found within given organization
  messageLabel: Run Message
  messagePlaceholder: Enter Message
  discardPendingRuns: Discard Pending Runs
  overridePoliciesLabel: Continue on Soft Mandatory Policy evaluation result
  runTypeLabel: Run Type
  runTypePlaceholder: Select Run Type
  terraformVersion: Terraform Version
  terraformVersionPlaceholder: Enter Terraform Version
  runOnRemote: Run on Remote Workspace
kubernetesStep:
  workload: Enter Workload
waitStep:
  validation:
    duration10SecMinimum: 'Minimum Duration is 10 seconds'
approvalStep:
  message: 'Approval Message'
  approvers: 'Approver(s)'
  ensureUserGroups: To use Harness Approvals, please make sure your project has user groups.
  approversWithColon: '{{$.pipeline.approvalStep.approvers}}:'
  approverInputs: 'Inputs to be provided by approver'
  includeStageExecutionDetails: 'Include stage execution details in approval'
  addUserGroups: Enter User Group
  fetchingUserGroups: Select User Group
  fetchUserGroupsFailed: Failed to fetch User Groups
  minimumCount: 'Number of approvers that are required at this step'
  disallowPipelineExecutor: 'Disallow the executor from approving the pipeline'
  addApproverInputs: Add Approver Inputs
  execution:
    inputsTitle: Approval inputs
    statusMsg: '{{ count }} of {{ total }} approvals complete'
  validation:
    approvalMessage: Approval message is required.
    userGroups: 'Atleast one user group is required'
    minimumCountOne: 'Minimum count cannot be less than one.'
    minimumCountDecimal: 'Minimum count cannot be decimal value.'
    minimumCountRequired: 'Minimum count is required.'
  status:
    APPROVE: Approved
    REJECT: Rejected
  notAuthorizedExecution: User is not authorized to approve/reject the pipeline
  disallowedApproverExecution: This approval step has been configured to disallow pipeline executors to approve this stage.
queueStep:
  keyPlaceholder: Enter Resource Key
  resourceKey: Resource Key
  keyRequired: Resource Key is required
  scopeRequired: Scope is required
  scopePlaceholder: Select Scope
  scope: Run next queued execution after completion of
  queuedExecutions: Queued Executions
  queuedByResourceKey: 'Queued by Resource Key:'
  noQueuedExecutions: No queued executions
jenkinsStep:
  job: job
  addJobParameters: Add Job Parameter
  validations:
    jobName: Jobname is a required field
  jobNamePlaceholder: Select Job Name
  jobParameter: Job Parameters
  unstableStatusAsSuccess: Treat unstable Job status as success
  useConnectorUrlForJobExecution: Use Connector URL for job execution
  captureEnvironmentVariable: Capture environment variables from Jenkins build
syncStep:
  prune: Prune
  dryRun: Dry Run
  applyOnly: Apply Only
  forceApply: Force Apply
  syncOptionsLabel: Sync Options & Policy
  skipSchemaValidation: Skip Schema Validations
  autoCreateNamespace: Auto-Create Namespace
  pruneResourcesAtLast: Prune Last
  applyOutOfSyncOnly: Apply Out of Sync Only
  replaceResources: Replace
  prunePropagationPolicy: Prune Propagation Policy
  pruneProgrationPolicyPlaceholder: Select Prune Propagation Policy
  limit: Limit
  maxBackoffDuration: Max Duration
  increaseBackoffByFactor: Factor
  validation:
    prune: Prune is required when expression
    dryRun: Dry Run is required when expression
    applyOnly: Apply Only is required when expression
    forceApply: Force Apply is required when expression
    applicationsList: Applications list is required when expression
    skipSchemaValidation: Skip Schema Validations is required when expression
    autoCreateNamespace: Auto-Create Namespace is required when expression
    pruneResourcesAtLast: Prune Last is required when expression
    applyOutOfSyncOnly: Apply Out of Sync Only is required when expression
    replaceResources: Replace is required when expression
    limit: Limit is required
    maxBackoffDuration: Max Duration is required
    increaseBackoffByFactor: Factor is required
jiraApprovalStep:
  connectToJira: Connect to Jira
  connectorRef: Jira Connector
  jiraConnectorPlaceholder: Select Jira Connector
  project: Jira Project
  issueType: Issue Type
  issueTypePlaceholder: Select Issue Type
  issueKey: Issue Key
  issueKeyPlaceholder: Enter Issue Key
  fetchingProjectsPlaceholder: Fetching Projects...
  fetchProjectsError: Failed to fetch projects
  fetchingIssueTypePlaceholder: Fetching Issue Types...
  fetchIssueTypesError: Failed to fetch issue types
  jexlExpressionPlaceholder: |
    Example: <+issue.Status> == "Done"
  jiraField: Jira Field
  jexlExpressionApprovalCriteria: JEXL Expression for approval criteria
  jexlExpressionRejectionCriteria: JEXL Expression for rejection criteria
  execution:
    criteriaMsg: Approval/Rejection Criteria Listed Below
    wasApproved: 'Approval Criteria was met for Jira Ticket:'
    wasRejected: 'Rejection Criteria was met for Jira Ticket:'
    wasExpired: 'Jira approval expired for Ticket:'
    jiraTicket: 'JIRA Ticket Pending Approval:'
    conditions:
      equals: '{{ key }} equals'
      not_equals: '{{ key }} does not equals'
      in: '{{ key }} is in'
      not_in: '{{ key }} is not in'
  validations:
    connectorRef: Jira Connector is required
    project: '{{$.common.validation.projectIsRequired}}'
    issueKey: Issue Key is required
    issueType: Issue Type is required
    requiredField: This is a required field.
jiraCreateStep:
  fields: Jira Fields
  summaryPlaceholder: Enter a Title or Summary
  addFields: Add Jira Fields
  selectFieldsHeading: Select fields you would like to add.
  fieldSelectorAdd: '+ Fields'
  selectFromFieldList: Select from Field List
  provideFieldList: Provide Field List
  selectFieldListHelp: Select your project and issue type to list available fields to choose from.
  fetchingFields: Fetching your fields
  fieldsSelectorPlaceholder: Your fields will be populated here
  unsupportedRequiredFieldsError: "Changes can't be saved as unsupported fields are present - {{ fields }}"
  validations:
    summary: Summary is required
  projectIssueTypeDisclaimer: Only permitted projects or issue types are being displayed. Please check if there are sufficient permissions in Jira to perform this action
jiraUpdateStep:
  statusTransitionAccordion: Status and Transition (optional)
  transitionLabel: Transition Name
  transitionPlaceholder: Enter Transition Name
  fetchingStatus: Fetching Status List...
  selectStatus: Select Status
  projectIssueKeyDisclaimer: Only permitted fields are being displayed. Please check if there are sufficient permissions in Jira to perform this action.
  statusDisclaimer: Only permitted statuses are being displayed. Please check if there are sufficient permissions in Jira to perform this action.
  validations:
    status: Status is required with transition.
approvalCriteria:
  field: Field
  fetchingFields: Fetching fields...
  allConditions: All conditions
  anyCondition: Any condition
  jexlExpressionLabelApproval: If the JEXL Expression evaluates to true, approve this step
  jexlExpressionLabelRejection: If the JEXL Expression evaluates to true, reject this step
  match: Match
  approvalCriteria: Approval Criteria
  rejectionCriteria: Rejection Criteria
  approvalWindow: Approval Window
  rejectionCriteriaOptional: Rejection Criteria (optional)
  validations:
    approvalCriteriaCondition: At least one condition is required
    expression: Expression value is required
serviceNowApprovalStep:
  connectToServiceNow: Connect to ServiceNow
  connectorRef: ServiceNow Connector
  serviceNowConnectorPlaceholder: Select ServiceNow Connector
  project: ServcieNow Project
  ticketType: Ticket Type
  issueTypePlaceholder: Select Ticket Type
  issueNumber: Ticket Number
  issueNumberPlaceholder: Enter Ticket Number
  fetchingTicketTypesPlaceholder: Fetching Ticket Types...
  fetchTicketTypesError: Failed to fetch ticket types
  fetching: Fetching...
  failedToFetch: Failed to fetch
  jexlExpressionPlaceholder: |
    Example: <+ticket.state.value> == "Done"
  serviceNowField: Service Now Field
  approvalChangeWindow: Approval Change Window
  windowStart: Window Start
  windowEnd: Window End
  execution:
    wasApproved: 'Approval Criteria was met for ServiceNow Ticket:'
    wasRejected: 'Rejection Criteria was met for ServiceNow Ticket:'
    wasExpired: 'ServiceNow approval expired for Ticket:'
    serviceNowTicket: 'ServiceNow Ticket Pending Approval:'
    conditions:
      equals: '{{ key }} equals'
      not_equals: '{{ key }} does not equals'
      in: '{{ key }} is in'
      not_in: '{{ key }} is not in'
  validations:
    connectorRef: ServiceNow Connector is required
    ticketType: Ticket Type is required
    issueNumber: Ticket Number is required
    windowStart: Window Start is required
    windowEnd: Window End is required
serviceNowCreateStep:
  fieldType:
    configureFields: Configure Fields
    createFromTemplate: Create From Template
  selectFieldListHelp: Select the issue type to list available fields to choose from.
  addFields: Add ServiceNow Fields
  descriptionPlaceholder: Enter the Description
  shortDescriptionPlaceholder: Enter the Short Description
  shortDescription: Short Description
  templateNamePlaceholder: Enter the Template Name
  fetchingFields: Fetching fields
  fetchingTemplateDetails: Fetching template details
  noSuchTemplateFound: No Such Template Found
  templateName: Template name
  validations:
    description: Description is required
    shortDescription: Short Description is required
    validTemplateName: Valid Template Name is required
    templateName: Template Name is required
serviceNowUpdateStep:
  fieldType:
    applyFromTemplate: Apply from template
    updateFields: Update Fields
serviceNowImportSetStep:
  stagingTable: Staging Table
  jsonBody: JSON Body
  validations:
    stagingTableRequired: Staging Table is required
    jsonRequired: JSON is required
    invalidJson: JSON is not valid
  fetchingStagingTableNamePlaceholder: Fetching Staging Table Name...
commonApprovalStep:
  execution:
    allConditionsMsg: 'If all of the following conditions are met:'
    anyConditionsMsg: 'If any of the following conditions is met:'
    approvalWindowMsg: 'On Approval the execution will be performed within the specified Start and End Time'
customApprovalStep:
  scriptTimeout: Script Timeout
  retryInterval: Retry interval
  execution:
    wasApproved: 'Approval Criteria was met for Custom Shell Script Approval'
    wasRejected: 'Rejection Criteria was met for Custom Shell Script Approval'
    wasExpired: 'Custom Shell Script Approval expired'
    wasAborted: 'Custom Shell Script Approval aborted'
    customApprovalPending: 'Custom Shell Script Approval Pending Approval'
    conditions:
      equals: '{{ key }} equals'
      not_equals: '{{ key }} does not equals'
      in: '{{ key }} is in'
      not_in: '{{ key }} is not in'
  validation:
    outputVariable: Output Variable(s) is required
    minimumRetryIntervalIs10Secs: Minimum Retry interval is 10 seconds
    minimumScriptTimeoutIs10Secs: Minimum Script timeout is 10 seconds
    atLeastOneOutputVariableIsRequired: At least one output field must be set
manifestType:
  addManifestLabel: Add Manifest
  attachPath: + Attach {{manifestPath}}
  manifestTyperequired: Manifest Type is required
  gitConnectorLabel: 'Git'
  azureRepoConnectorLabel: 'Azure Repo'
  bitBucketLabel: 'Bitbucket'
  InheritFromManifest: 'Inherit From Manifest'
  customRemote: 'Custom Remote'
  httpHelmRepoConnectorLabel: 'HTTP Helm'
  manifestIdentifier: Manifest Identifier
  manifestIdentifierRegexErrorMsg: '{{$.pipeline.manifestType.manifestIdentifier}} must start with a letter or _ and can then be followed by alphanumerics, _, or $'
  manifestPlaceholder: Enter Manifest Name
  ociHelmConnectorLabel: OCI Helm
  basePathPlaceholder: Enter Base Path
  basePath: Base Path
  manifestSource: Manifest Source
  manifestDetails: Manifest Details
  manifestRepoType: '{{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestRepoType: 'Specify {{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestStore: 'Specify {{ $.manifestsText }} {{$.store}}'
  selectManifestStore: '{{$.select}} {{ $.manifestsText }} {{$.store}}'
  helmSkipResourceVersion: By selecting this option, Harness will no longer version ConfigMaps and Secrets for this Service.
  manifestPathPlaceholder: Enter File/Folder Path
  pluginPathHelperText: Enter the path to the dedicated directory for the plugin on the Delegate host(s). For example, '$HOME/plugin'. The default directory is named $XDG_CONFIG_HOME/kustomize/plugin and its value is $HOME/.config
  kustomizePathHelperText: Enter the path from the root of the Source Provider repo to the folder containing kustomization.yaml
  helmCommandFlags: By Default, Harness versions ConfigMaps and Secrets that are deployed into the Kubernetes Cluster.
  helmCommandFlagLabel: Helm Command Flags (optional)
  helmVersionRequired: 'Helm Version is required'
  commandFlagRequired: 'Command Flag is required'
  folderPathRequired: Folder Path is required
  chartPathRequired: Chart Path is required
  kustomizePathRequired: Kustomize Path is required
  kustomizeFolderPathRequired: Kustomize Folder Path is required
  pathRequired: File Path is required
  periodPrefixValidation: '{{ name }} can not start with "."'
  varsPathRequired: Vars Path is required
  autoScalerPathRequired: Autoscaler Path is required
  bucketNameRequired: Bucket Name is required
  path: '{{$.common.path}}'
  osTemplatePath: Template File Path
  osTemplatePathPlaceHolder: Enter Template File Path
  osTemplatePathRequired: Template File Path is required
  bucketNamePlaceholder: Enter Bucket Name
  bucketPlaceHolder: Select or Add Bucket Name
  pathPlaceholder: Enter File Path
  folderPathPlaceholder: Enter Folder Path
  chartPathPlaceholder: Enter Chart Path
  subChart: Sub-Chart Path
  subChartPlaceholder: Enter Sub Chart Name
  bucketName: '{{$.common.bucketName}}'
  gitFetchTypeLabel: Git Fetch Type
  commitId: Commit Id / Git Tag
  branchPlaceholder: Enter Branch Name
  commitPlaceholder: Enter Commit Id / Git Tag
  filePathPlaceholder: Enter File or Folder Path
  kustomizeFolderPath: Kustomize Folder Path
  kustomizeBasePath: Kustomize Base Path
  kustomizeFolderPathPlaceholder: Enter Kustomize Folder Path
  kustomizePluginPathPlaceholder: Enter Kustomize Plugin Path
  kustomizeCommandFlagLabel: Kustomize Command Flags (optional)
  repoNamePlaceholder: Enter Repository Name
  packagePlaceholder: Enter Package Name
  serverlessConfigFilePath: Serverless Config File Path
  serverlessConfigFilePathPlaceholder: Enter Serverless Config File Path
  valuesYamlPath: Values.yaml
  addValuesYamlPath: Add Values.yaml
  varsYAMLPath: Vars.yaml path
  addVarsYAMLPath: Add Vars.yaml
  autoScalerYAMLPath: AutoScaler.yaml
  addAutoScalerYAMLPath: Add AutoScaler.yaml
  cfCliVersion: CLI Version
  customRemoteExtractionScript: Custom Remote Manifest Extraction Script
  customRemoteExtractedFileLocation: Extracted Manifest File Location
  customRemoteExtractedFileLocationPlaceholder: Enter Extracted Manifest File Location
  paramsYamlPath: OpenShift Parameters
  helmRepoOverride:
    locationText: Chart Location Referenced From Service
    allowedLimitForEnvironment: You cannot configure multiple Helm Repo Overrides at the Environment Level.
    allowedLimitForService: You cannot configure multiple Helm Repo Overrides for the Service.
  http:
    chartName: 'Chart Name'
    chartVersion: 'Chart Version'
    chartNameRequired: 'Chart Name is required'
    chartNamePlaceHolder: 'Enter Chart Name'
    chartVersionPlaceHolder: 'Enter Chart Version'
    chartVersionRequired: 'Chart Version is required'
    loadingChartVersion: 'Fetching Chart Versions...'
    noResultsChartVersion: 'No manifest chart versions found'
  oci:
    basePathRequired: 'Base Path is required'
    chartVersionValidation: '"latest" tag is not supported as chart version'
  optimizedKustomizeManifestCollection: Optimized Kustomize Manifest Collection
  kustomizeYamlFolderPath: Kustomize YAML Folder Path
  kustomizeYamlFolderPathRequired: Kustomize YAML Folder Path is required
  enableDeclarativeRollback: Enable Declarative Rollback
manifestTypeLabels:
  K8sManifest: K8s Manifest
  ValuesYaml: Values YAML
  KustomizeLabel: Kustomize
  OpenshiftTemplate: OpenShift Template
  OpenshiftParam: OpenShift Param
  KustomizePatches: Kustomize Patches
  ServerlessAwsLambda: Serverless Lambda Manifest
  ServerlessAzure: Serverless Azure Manifest
  ServerlessGCP: Serverless GCP Manifest
  AwsSAM: AWS SAM Manifest
  AzureFunctions: Azure Functions Manifest
  EcsTaskDefinition: 'ECS Task Definition'
  EcsServiceDefinition: 'ECS Service Definition'
  EcsScalingPolicyDefinition: 'ECS Scaling Policy'
  EcsScalableTargetDefinition: 'ECS Scalable Target'
  AsgLaunchTemplate: ASG Launch Template
  AsgConfiguration: ASG Configuration
  AsgScalingPolicy: ASG Scaling Policy
  AsgScheduledUpdateGroupAction: ASG Scheduled Group Update Action
  ReleaseRepo: Release Repo Manifest
  TASManifest: TAS Manifest
  VarsYAML: TAS Vars
  Autoscaler: TAS AutoScaler
  GoogleCloudFunctionDefinition: Google Cloud Function Definition
  GoogleCloudFunctionDefinitionGenOne: Google Cloud Function Definition Gen One
  HelmRepoOverride: Helm Repo Override
  AwsLambdaFunctionDefinition: AWS Lambda Function Definition
  AwsLambdaFunctionAliasDefinition: AWS Lambda Function Alias Definition
manifestToConnectorLabelMap:
  AWSLabel: '{{ $.common.aws }}'
failureStrategies:
  performAction: '{{ $.common.performAction }}'
  title: Failure Strategy
  learnMoreLink: https://docs.harness.io/article/0zvnn5s1ph
  helpText: |
    Define one or more failure strategies. These will be used to control the behavior of your pipeline when there is an error in execution.
  addedAllStrategies: You have added all possible failure strategies. There are no more options to add.
  tabHasErrors: The current settings have errors. Please review the error messages displayed and resolve the issues.
  onFailureOfType: On failure of type
  fieldLabels:
    retryCountLabel: Retry count
    retryIntervalsLabel: Retry intervals
    onTimeoutLabel: Post timeout action
    onRetryFailureLabel: Post retry failure action
  strategiesLabel:
    Retry: '{{ $.retry }}'
    Abort: '{{ $.abort }}'
    Ignore: Ignore Failure
    StageRollback: Rollback Stage
    ManualIntervention: Manual Intervention
    MarkAsSuccess: Mark As Success
    MarkedAsSuccess: Marked As Success
    MarkAsFail: Mark As Fail
    MarkedAsFail: Marked As Fail
    PipelineRollback: Rollback Pipeline
    ProceedWithDefaultValues: Proceed with Default Values
    StepGroupRollback: Rollback Step Group
    MarkAsFailure: Mark As Failure
    UserMarkedFailure: Mark Stage As Failed
  errorTypeLabels:
    Authentication: Authentication Errors
    Authorization: Authorization Errors
    Timeout: Timeout Errors
    Verification: Verification Failures
    DelegateProvisioning: Delegate Provisioning Errors
    Unknown: Unknown Errors
    PolicyEvaluationFailure: Policy Evaluation Failures
    InputTimeoutError: Execution-time Inputs Timeout Errors
    ApprovalRejection: Approval Rejection
    DelegateRestart: Delegate Restart
    UserMarkedFailure: User Marked Failure
  validation:
    arrayOrRuntime: Value must be an array or runtime input.
    strategyRequired: 'At least 1 strategy is required'
    strategiesRequired: 'At least {{n}} strategies are required'
    errorsRequired: At least one failure type is required
    errorsMinimum: '{{ $.pipeline.failureStrategies.validation.errorsRequired }}'
    actionRequired: Action is required
    retryCountInteger: Retry Count must be a positive integer
    retryCountRequired: Retry Count is required
    retryCountMinimum: Retry Count must be greater or equal to 1
    retryCountMaximum: Retry Count cannot be more than {{ count }}
    retryIntervalRequired: Retry Interval is Required
    retryIntervalMinimum: At least one retry interval is Required
    retryIntervalMaxmimum: Number of retry intervals cannot be more than the retry count
    timeoutRequired: Timeout is required
    onRetryFailureRequired: Retry failure action is required
    onTimeoutRequired: Post timeout action is required
    ciCodebaseRequired: CI Codebase is required
    gitBranchRequired: Git Branch is required
    gitTagRequired: Git Tag is required
    gitPRRequired: Git Pull Request is required
loopingStrategy:
  title: Looping Strategy
  subTitle: 'Select 1 of the {{maxCount}} looping execution strategy below.'
  warningText: All the configuration will be lost.
  learnMore: Learn more about Looping strategies
  deleteModal:
    title: Remove looping strategy?
    content: Are you sure you want to remove this looping strategy? {{$.pipeline.loopingStrategy.warningText}}
  toggleTypeModal:
    title: Switch looping strategy?
    content: Are you sure you want to switch looping strategy? {{$.pipeline.loopingStrategy.warningText}}
    switch: Switch
  matrix:
    label: Matrix
    helperText: Matrix gives the ability to execute the same set of tasks multiple times for a bunch of different configurations.
  repeat:
    label: Repeat
    helperText: Repeat gives the ability to execute the same set of tasks multiple times.
  parallelism:
    label: Parallelism
    helperText: If parallelism is set to N > 1, then N independent executors will be set up and each will run that stage/step in parallel.
policyEnforcement:
  title: Policy Enforcement
  description: The following Policies will be evaluated after the Step is complete.
selectOrCreatePipeline:
  pipelineNameRequired: Please select a pipeline
  setupHeader: Create or Select a Pipeline
  selectAPipeline: Select an existing Pipeline
createANewPipeline: Create a new pipeline
createPipeline:
  setupHeader: Setup Pipeline
  setupSubtitle: Let’s get you started on your pipeline.
  setupLater: Setup Later
  learnMore: Learn More
  choosePipelineSetupHeader: How do you want to setup your pipeline?
selectOrCreateForm:
  description: '{{$.common.selectAVersion.description}}'
execution:
  elapsedTime: 'Elapsed time'
  stagesExecuted: Stages executed (most recent first)
  upcomingStagesPrefix: 'Upcoming stages: '
  rollbackStages: Rollback Stages
  stepTitlePrefix: 'Step: '
  stepGroupTitlePrefix: 'Step Group: '
  stageTitlePrefix: 'Stage: '
  noInputsText: No inputs found
  retryStepCount: 'Retry #{{ num }}'
  currentExecution: Current Execution
  timePrefix: 'Execution Time: '
  compareAction: Compare
  compareExecutionsTitle: Select executions to compare the compiled YAML
  emptyStepGroup: Step Group is empty
  ignoreFailedWarningText: A failed step was ignored because the step’s Failure Strategy is Ignore Failure. The step’s failure did not impact the Pipeline’s success.
  instanceList: Instance list
  instances: INSTANCES
  listDetails: List details
  iotab:
    noInputText: No input found for current step
    noOutputText: No output found for current step
  pipelineActionMessages:
    abortedMessage: Pipeline has been aborted successfully
    pausedMessage: Pipeline execution will pause once the currently running steps have completed.
    resumedMessage: Pipeline has been resumed successfully
  stageActionMessages:
    abortedMessage: Stage "{{stageName}}" has been aborted successfully
    pausedMessage: Stage "{{stageName}}" execution will pause once the currently running steps have completed.
    resumedMessage: Stage  "{{stageName}}" has been resumed successfully
    userMarkFailedMessage: Stage "{{stageName}}" has been marked failed.
  actions:
    resumePipeline: Resume Pipeline
    rerunPipeline: Re-run Pipeline
    pausePipeline: Pause Pipeline
    abortPipeline: Abort Pipeline
    resumeStage: Resume Stage
    rerunStage: Re-run Stage
    pauseStage: Pause Stage
    abortStage: Abort Stage
    downloadLogs: Download logs
    viewCompiledYaml: View Compiled YAML
    compareExecutions: Compare Pipeline Executions
    reRunInDebugMode: Re-run in Debug Mode
  layouts:
    bottom: Align to bottom
    right: Align to right
    float: Floating window
    minimize: Minimize window
  dialogMessages:
    abortExecution: 'Warning: Abort command will not clean up any resources created during execution so far. Please mark the stage as failed if you would like to clean up and revert back to the old state.'
    abortTitle: Abort Execution?
    markAsFailedTitle: Mark stage as failed?
    markAsFailedConfirmation: Are you sure you want to mark this stage as failed? Doing so will mark the stage as failed and trigger the respective failure strategy.
resourceConstraints:
  title: Resource Constraint
  infoText: You have {{executioncount}} Pipeline {{executiontext}} queued for this {{infraEntityText}}. Only one execution on the same {{infraEntityText}} is allowed at a time.
  currentlyExecuting: ' ( currently executing )'
  yourPipeline: ' ( your execution )'
  k8sNamespaceText: K8s namespace
  serverlessInfraEntity: serverless infrastructure entity
  elastigroupInfraEntity: Elastigroup Infrastructure
  tanzuInfraEntity: Tanzu Infrastructure
  ecsInfraEntity: ECS Infrastructure
  traditionalInfraEntity: SSH/WinRm Infrastructure

targets:
  title: Targets
barriers:
  syncBarriers: Synchronization Barriers
  flowControl: Flow Control
  addBarrier: Add Barrier
  tooltips:
    barrierWaiting: 'Waiting for another barrier '
    timeout: 'to Timeout'
  validation:
    barrierNamerequired: 'Enter name of barrier'
executionStatus:
  Failed: FAILED
  Success: SUCCESS
  Aborted: ABORTED
  AbortedByFreeze: ABORTED BY FREEZE
  Error: ERROR
  Paused: PAUSED
  Pausing: PAUSING
  Waiting: WAITING
  Aborting: ABORTING
  Running: RUNNING
  Queued: QUEUED
  Skipped: SKIPPED
  Starting: STARTING
  Expired: EXPIRED
  Suspended: SUSPENDED
  NotStarted: NOT STARTED
  ApprovalRejected: REJECTED
  QueuedLicenseLimitReached: QUEUED LICENSE LIMIT REACHED
  QueuedExecutionConcurrencyReached: QUEUED EXECUTION CONCURRENCY REACHED
  Unknown: UNKNOWN
executionFilters:
  labels:
    Aborted: Aborted
    AbortedByFreeze: Aborted by Freeze
    Expired: Expired
    Failed: '{{ $.failed }}'
    Running: Running
    Success: '{{ $.success }}'
    ApprovalRejected: Approval Rejected
    Paused: Paused
    ApprovalWaiting: Waiting on approval
    InterventionWaiting: Waiting on intervention
    Waiting: Waiting for resources
    InputWaiting: Waiting on inputs
    WaitStepRunning: Waiting on wait step
logs:
  sectionName: 'Section {{index}}'
  errorText: Something has gone wrong while fetching logs
  retry: '{{ $.retry }}'
conditionalExecution:
  title: Conditional Execution
  subTitle: Use conditions to determine when this {{entity}} is executed.
  statusOption:
    success: Execute this {{entity}} if the {{parentEntity}} execution is successful thus far
    all: Always execute this {{entity}}
    failure: Execute this {{entity}} only if prior {{parentEntity}} or {{entity}} failed
  condition: And execute this {{entity}} only if the following JEXL Condition evaluates to true
  conditionLabel: Execute only if the following JEXL Condition evaluates to true
  toolTip:
    stageTitle: Conditions for stage execution
    stepTitle: Conditions for step execution
    resolvedVariables: RESOLVED VARIABLES
  belowExpression: below expression is true
startTime: Start time
duration: Duration
and: '{{ $.common.andCaps }}'
gitDetails: git details
runtimeInputs: Runtime Inputs
approveOrReject: Approve or Reject
jenkinsBuild: Jenkins Builds
enterBuildRegex: Enter Build Regex
buildRegex: Build Regex
selectJenkinsBuildsPlaceholder: Select Jenkins Build
releaseRepo: Release Repo
deploymentRepo: Deployment Repo
addReleaseRepo: + Add Release Repo Manifest
addDeploymenteRepo: + Add Deployment Repo Manifest
releaseRepoStore: Release Repo Store
deploymentRepoStore: Deployment Repo Store
runtimeInputsSubmittedMsg: Inputs have been submitted successfully
packageType: Package Type
packageTypePlaceholder: Select Package Type
pipelineInputPanel:
  noRuntimeInputs: 'No Runtime Inputs'
  automaticallyExtractedFromText: Automatically extracted from event payload
  selectedExisitingOrProvide: 'Select an existing Input Set or provide new set of values'
  existing: Use Existing Input Sets
  provide: Provide Values
  whatAreInputsets: What are Input Sets?
artifactTriggerConfigPanel:
  artifact: 'Artifact'
  artifactRepository: '{{artifact}} Repository'
  buildTagArtifactPath: 'Build/Tag/ Artifact Path'
  locationRepoPath: Location/Repo Path
  configureInput: 'Configure Input'
  listenOnNewArtifact: 'Listen on New {{artifact}}'
  plusSelect: '+ Select {{artifact}}'
  defineArtifactSource: 'Define Artifact Source'
  defineManifestSource: 'Define Manifest Source'
  selectAnArtifact: 'Select an Artifact Reference'
  selectAManifest: 'Select a Manifest Reference'
  configureArtifactRuntimeInputs: 'Configure {{artifact}} Runtime Inputs'
  artifactTagSetting: 'Tag setting'
  noSelectableArtifactsFound: 'No selectable {{artifact}}s found. Please add one in the pipeline.'
  noSelectableRuntimeArtifactsFound: 'The {{artifact}} {{artifactOrManifest}} must be set to Runtime Input (<+input>) to use an {{artifact}} as a Trigger.'
  noArtifacts: No artifacts for selected stage.
  configureInputs: Configure inputs
  hasRuntimeInputs: 'Has Runtime Inputs'
  runtimeInput: 'Runtime Input'
  chartVersionRuntimeInput: 'Some {{artifact}} references may be unselectable because {{ runTimeStr }} must be a runtime input.'
  artifactReferenceUnique: 'Some {{artifact}} references may not be available for selection because they must be unique and not from a previous stage'
  tagArtifactPathBuild: Tag or Artifact Path or Build
dashboards:
  failedBuilds: Failed Builds
  activeBuilds: Active Builds
  workloads: Workloads
  failedDeployments: Failed Deployments
  activeDeployments: Active Deployments
  pendingDeployments: Pending Approval/Manual Intervention
  baselineTargets: Target Baselines
  noTargetBaselines: No Baseline Targets set
  noRepositories: No Repositories found
  noFailedBuilds: No Failed Builds found
  noActiveBuilds: No Active Builds found
  noWorkloads: 'No Services'
  noFailedDeployments: 'No Failed Deployments'
  noActiveDeployments: 'No Active Deployments'
  noPendingDeployments: 'No Pending Deployments found'
  buildExecutions: Build Executions
  buildHealth: Builds Health
  totalBuilds: Total Builds
  testCycleTimeSaved: Test Cycle Time Saved
  successfulBuilds: Successful Builds
  pipelineHealth: Pipeline health
  totalExecutions: Total Executions
  executionsLabel: '# of Executions'
  successRate: Success Rate
  meanDuration: Mean Duration
  medianDuration: Median Duration
savingInProgress: Saving in progress...
gitExperience:
  skipNow: SKIP NOW
  selectRepoBranch: Please select Repository and Branch from the pipeline edit modal
  noEntityFound: The {{entityType}} does not exist in the selected Branch.
  selectDiffBranch: Please select a different Branch.
testsReports:
  callgraphTitle: Call Graph
  expandGraph: Expand graph
  codeChanges: Code changes ({{count}})
  unchangedMethods: Unchanged methods ({{count}})
  directCall: Direct call
  indirectCall: Indirect call
  sourceMethod: Source Class
  callgraphField:
    package: Package
    class: Class
    method: '{{ $.methodLabel }}'
    params: Params
    file: '{{ $.common.file }}'
    type: '{{ $.typeLabel }}'
  viewCallgraph: View Callgraph
  testMethods: Test methods
  changedTestMethods: Changed/New Test methods
  changedSourceMethods: Changed/New Source methods
  selectedTestMethods: Selected Test Methods
  sourceMethods: Source methods
  calls: Calls
  description: Failure Description
  type: Failure Type
  status: '{{ $.status }}'
  executionOverview: Test Execution Overview
  numberOfSelectedTests: 'Selected Tests'
  totalDuration: Total Duration
  testDuration: Test Duration
  timeSaved: Time Saved
  totalExecutedTest: Total Executed Tests
  selectionBreakdown: Test Selection Breakdown
  totalWithColon: 'TOTAL:'
  failedWithColon: 'FAILED:'
  successWithColon: 'SUCCESS:'
  skippedWithColon: 'SKIPPED:'
  skipped: Skipped
  correlatedWithCodeChanges: Correlated with Code Changes
  newTests: New Tests
  updatedTests: Updated Tests
  coverage: Files Coverage
  coverageInfo: List of files that were added or changed in the build which don't have a proper testing coverage
  onlyUncoveredFiles: Only Uncovered Files
  filename: FILENAME
  commitId: COMMIT ID
  failedTests: Failed Tests
  failureMessage: Failure Message
  stackTrace: Stack Trace
  consoleOutput: Console Output
  testSuite: 'Test Suite:'
  totalTests: Total Tests
  testCaseName: Test Name
  className: Class Name
  result: RESULT
  testCasesExecution: Tests Execution
  testExecutions: Test Executions
  noFailedTestsFound: No failed tests found
  showAllTests: Show all tests
  hangTight: Hang tight! Report is being generated...
  noTestResults: No test results
  testsWillAppear: Tests will appear here if they were reported or uploaded to Harness.
  willBeDisplayedIfAvailable: Test reports will be displayed here if they are configured and available.
  resultLabel: Test Execution Result
  sortBy: 'Sort by:'
  poweredByTI: 'Powered by Test Intelligence'
  searchByTestName: Search by Test Name
  tiCallToAction:
    header: Did you know you can save time using Test Intelligence?
    utilizeTISubText: 'Reduce test cycle time of your Java, .NET, Scala, Kotlin applications by using machine learning based Test Intelligence.'
    addRunTestsStep: Add 'Run Tests step' to your Pipeline
    requiresEnterprisePlan: Requires Enterprise Plan to access Test Intelligence
uniqueIdentifier: Identifier must be unique
uniqueName: Name must be unique
inputSets:
  inputSetNameLabel: Input Set Name
  applyInputSet: Apply Input Set
  applyInputSets: Apply Input Sets
  applyingInputSets: Applying Input Sets
  applyingInputSet: Applying Input Set
  noRuntimeInputsCurrently: No runtime inputs in the pipeline currently
  noRuntimeInputsWhileExecution: No runtime inputs were present in the pipeline during this execution
  inputSetPlaceholder: Enter Input Sets
  selectPlaceholder: Select Input Set(s)
  createNewInputSet: Create New Input Set
  aboutInputSets: A Harness Input Set is a group of Pipeline settings and values. You create Input Sets and use them when you run a Pipeline. Input Sets let you use one Pipeline for many scenarios.
  overlayISHelperText: Selected inputs will be applied in the order listed. Drag to reorder the input sets.
  invalidFields: Invalid Fields
  removeInvalidFields: Remove Invalid Fields
  editInYamlView: Edit in YAML view
  invalidInputSetDesc1: Your input set is not valid anymore because you do not have any pipeline runtime inputs. You may delete this input set, update your pipeline or go back to the Input Set list.
  invalidInputSetDesc2: Your input set is not valid anymore because you do not have any pipeline runtime inputs. You can either delete this input set or navigate to the Input Set list.
  invalidInputSetDesc3: Your input set is not valid anymore because you do not have any pipeline runtime inputs. This input set may be removed.
  invalidInputSet: Invalid Input Set
  invalidOverlayISDesc1: Your overlay input set is not valid anymore because there are no valid input set references. This overlay input set may be removed.
  invalidOverlayISDesc2: Your overlay input set is not valid anymore because there are no valid input set references. You can either delete this overlay input set or navigate to the Input Set list.
  invalidOverlayIS: Invalid Overlay Input Set
  deleteInputSet: Delete Input Set
  deleteOverlayIS: Delete Overlay Input Set
  goBackToInputSetList: Go back to Input Set list
  inputSetUpdated: Input Set "{{name}}" updated
  overlayISUpdated: Overlay Input Set "{{name}}" updated
  inputSetApplied: Input Set(s) applied successfully
provisionerSteps: Provisioner Steps
addStage:
  title: Select Stage Type
  description: Hover over stage type for more info.
pipelineSteps:
  templateStage: Template Stage
  customStage: Custom Stage
  templateStageDescription: Use stage template.
  customStageDescription: Use this to set up a stage configurable to your needs.
  chainedPipelineDescription: Run a Pipeline as a stage in another Pipeline.
  deployStageDescription: Deploy services, Serverless functions, or other workloads.
  featureStageDescription: Enable or disable functionality remotely without redeploying code.
  approvalStageDescription: Approve or reject changes during Pipeline progress.
pipelineChaining:
  selectPipeline: Select Pipeline
  noProjectSelected: Project is not selected
  noPipelineSelected: Pipeline is not selected
  noPipelinesInSelectedScope: No pipelines available in the selected scope
  noPipelinesInSearchCriteria: No pipelines match your search criteria
  loadingChildPipeline: Please wait while system is attempting to fetch your pipeline details...
  pipelineOutputs: Pipeline Outputs
  outputTabSummaryDetail: Define outputs from child pipeline that you can use in other stages in parent pipeline.
  newOutput: New Output
  removeOutput: Remove this output
  outputAlreadyExists: Output with same name already exists
  enterOutputName: Enter Output Name
aboutYourStage:
  stageNamePlaceholder: Enter Stage Name
infraSpecifications:
  namespacePlaceholder: Enter Namespace
  serviceAccountName: Service Account Name
  serviceAccountNamePlaceholder: Enter Service Account Name
  initTimeout: Init Timeout
  initTimeoutPlaceholder: Enter Init Timeout
  validation:
    requiredExistingStage: Existing stage is a required field
  selectOs: Select the Operating System
  os: OS
  osTypes:
    windows: Windows
    macos: MacOS
  selectArchitecture: Select the Architecture
  architecture: Architecture
  architectureTypes:
    amd64: AMD64
    arm64: ARM64
imagePathLabel: Image Path
digest: Digest
artifactPathLabel: Artifact Path
applicationName: Application Name
selectApplications: Select Applications
artifactImagePathLabel: Artifact/Image Path
selectArtifactPathPlaceholder: Select or Enter an Artifact Path (Optional)
artifactPathFilterLabel: Artifact Path Filter
artifactsSelection:
  loadingRepository: Loading Repository...
  artifactId: Artifact ID
  customArtifactManualFill: Manually Enter an artifact version
  customArtifactScriptFill: Provide a script to dynamically pull the artifact location.
  artifactIdPlaceholder: Enter Artifact ID
  groupId: Group ID
  groupIdPlaceholder: Enter Group ID
  groupPlaceholder: Enter Group
  extension: Extension
  extensionPlaceholder: Enter Extension
  classifier: Classifier
  classifierPlaceholder: Enter Classifier
  digestPlaceholder: Enter Digest
  packageName: Package Name
  packageNamePlaceholder: Select Package
  addPrimaryArtifact: Add Primary Artifact
  addArtifactSource: Add Artifact Source
  addSidecar: Add Sidecar
  feed: Feed
  feedPlaceholder: Select Feed
  artifactSourceId: Artifact Source Identifier
  artifactSourceIdPlaceholder: Enter Artifact Source Identifier
  artifactSourceIdRegexErrorMsg: '{{$.pipeline.artifactsSelection.artifactSourceId}} must start with a letter or _ and can then be followed by alphanumerics, _, or $'
  projectPlaceholder: Enter Project
  projectIDPlaceholder: Enter Project ID
  repositoryTypePlaceholder: Select Repository Type
  delegateselectionPlaceholder: Add specific selectors or leave empty to target any delegate
  repositoryPort: Repository Port
  artifactsArrayPath: Artifacts Array Path
  versionPath: Version Path
  versionPathPlaceholder: Enter Version Path
  repositoryPortPlaceholder: Enter Repository Port
  repositoryPlaceholder: Enter Repository
  artifactType: Artifact Type
  artifactDetails: Artifact Details
  orgNamePlaceholder: Enter Organization Name
  versionDetails: Version Details
  versionPlaceholder: Enter Version
  versionRegex: Version Regex
  versionRegexPlaceholder: Enter Version Regex
  artifactTyperequired: Artifact Type is required
  loadingTags: Loading Tags...
  loadingDigest: Loading Digest...
  loadingArtifactPaths: Loading Artifact Paths...
  artifactPathPlaceholder: Enter Artifact Path
  artifactDirectory: Artifact Directory
  artifactDirectoryPlaceholder: Enter Artifact Directory
  filePathRegexLabel: File Path Regex
  filePathRegexPlaceholder: Enter File Path Regex
  amazonS3Title: Amazon S3
  googleArtifactRegistryTitle: Google Artifact Registry
  githubPackageRegistryTitle: Github Package Registry
  AmazonMachineImageTitle: Amazon Machine Image
  existingDocker:
    sidecarId: Sidecar Identifier
    sidecarIdPlaceholder: Enter Sidecar Identifier
    imageNamePlaceholder: Enter Image Path
    enterTagRegex: Enter Tag Regex
  validation:
    connectorForJobname: Connector is required to fetch job name
    jobConnectorRequired: Job name and connector are required to fetch
    script: Script is required
    artifactsArrayPath: Artifact array path is required
    versionPath: Version path is required
    noBuild: No build found with given details
    noPackage: No package found with given details
    noFeeds: No feeds found with given details
    noVersion: No version found with given details
    packageType: Package Type is required
    versionRegex: Version Regex is required
    packageName: Package Name is required
    imagePath: Image Path is required
    artifactPath: Artifact Path is required
    artifactId: Artifact ID is required
    groupId: Group ID is required
    group: Group is required
    region: '{{$.validation.regionRequired}}'
    tag: Tag is required
    tagRegex: Tag Regex is required
    sidecarId: Sidecar Identifier is required
    repositoryPort: Repository Port is required
    repositoryFormat: Repository Format is required
    repositoryUrl: Repository URL is required
    repositoryType: Repository Type is required
    artifactDirectory: Artifact Directory is required
    artifactPathFilter: Artifact Path Filter is required
    filePathRegex: File Path Regex is required
  errors:
    noRepositories: No repositories found with given connector
    nodigest: No Digests found with given tag
overrideSets:
  createOverrideSet: Create Override Set
  overrideSetPlaceholder: Enter Override Set Name
  overrideSetError: Override Set is required
  createOverrideSetPlus: + Create New Override Set
  configure: Configure pre-defined Override Sets (Advanced)
  overrideSetInfo: Override sets provide flexibility when specifying the service configuration. It can be used when stages requires different configuration from the initial specifications.
keyPlaceholder: Enter Key
operatorPlaceholder: Select Operator
variable:
  variableNamePlaceholder: Enter Variable Name
  typePlaceholder: Enter Type
moveStage:
  title: 'Move Pipeline Stage'
  description: 'Propagation is set up between this stage and another stage. Moving the parent/child stage out of sequence resets any propagated settings to their defaults. Do you want to continue?'
verification:
  currentTest: Current test
  testsRan: Tests ran
  baselineTest: Baseline test
  metricsInViolation: Metrics in violation
  logClustersInViolation: Log Clusters in violation
  errorClustersInViolation: Error Clusters in violation
  metricViewPlaceholder: Filter for a metric or transaction
  anomalousMetrics: Anomalous Metrics
  anomalousLogClusters: Anomalous Log Clusters
  healthSourcePlaceholder: Filter by Health Source
  healthSourceLabel: Health Source
  refreshViewForNewData: Latest incoming data available.
  toGetLatest: to get latest
  waitForAnalysis: Please wait a few moments for analysis to begin...
  nodeCountDisplay: nodes with anomalous metric
  loadMore: Load more
  tableHeaders:
    metricName: METRIC NAME
    group: GROUP
    nodes: NODES
  analysisTab:
    metrics: 'Metrics'
    logs: 'Logs'
  controlHostName: Control Hostname
  anomalousMetricsFilterLabel: Display only anomalous metrics and affected nodes
  testHostName: Test Hostname
  expandAll: Expand All
  collapseAll: Collapse All
  predicted: Predicted
  testHost: Test Host
  testData: Test Data
  controlHost: Control Host
  controlData: Control Data

  logs:
    logCluster: Log cluster
    filterByClusterType: Filter by cluster type
    noAnalysis: No analysis
    clusterType: CLUSTER TYPE
    sampleMessage: MESSAGE
    messageFrequency: MESSAGE FREQUENCY
    messageCount: COUNT
    actions: ACTIONS
    risk: RISK
    copyURL: Copy url
    urlCopied: URL copied
    share: share
    sampleEvent: Sample event
    trend: trend
    eventType: Event Type
    countPerMin: Count per min
    eventCountPerMin: Event count per minute
    eventDetails: Event Details
    updateEventPreference: Update event preference
    eventPreference: Event Preference
    lastKnownOccurrence: Last Known Occurrence
    firstOccurrence: First Occurrence
    notARiskLabel: Mark as Not a Risk
    eventPriorityLabel: Update the Event Priority
    reasonRequired: Reason field is required
    totalClusters: Total Clusters
stepCommonFields:
  runAsUser: Run as User
  validation:
    mustBeANumber: '{{label}} must be a number'
    invalidLimitMemory: Invalid Limit Memory. To learn more, hover over the Set Container Resources tooltip.
    invalidLimitCPU: Invalid Limit CPU. To learn more, hover over the Set Container Resources tooltip.
    notIn: '{{label}} must not be one of the following values: {{notAllowedValues}}'
ciCodebase:
  prCloneStrategy: Pull Request Clone Strategy
  ciCodebaseBuildType: CI Codebase build type
  pullRequestNumber: Pull Request Number
  validation:
    oneOfValues: Value must be one of these values [{{values}}]
    optionalDepth: Only positive integer values. You may use the default value provided.
    optionalSslVerify: SSL Verify must be a boolean value. You may use the default value provided.
    optionalPrCloneStrategy: Value must be one of these values [{{values}}]. You may use the default value provided.
    optionalLimitMemory: Invalid Limit Memory. To learn more, hover over the Set Container Resources tooltip. You may use the default value provided.
    optionalLimitCPU: Invalid Limit CPU. To learn more, hover over the Set Container Resources tooltip. You may use the default value provided.
    pullRequestNumber: Pull Request Number must be a positive integer.
gitCloneStep:
  cloneDirectory: Clone Directory
  validation:
    associatedBuildInput: Associated build input
tagDependencyRequired: required to fetch the tags
artifactPathDependencyRequired: required to fetch the artifact paths
artifactOrImagePathDependencyRequired: required to fetch the artifact/image path
artifactRepositoryDependencyRequired: 'Artifactory Connector is required to fetch repositories. You can make this field Runtime input otherwise.'
bucketNameHelperText: 'Connector is required to fetch buckets'
projectHelperText: 'Connector is required to fetch projects'
filePathHelperText: 'Connector and Bucket Name are required to fetch file paths'
imagePathHelperText: 'Connector and Region are required to fetch image paths'
myDeploymentsText: My Deployments
myBuildsText: My Builds
mySecurityTestsText: My Security Tests
myExecutionsText: My Executions
noRegions: No regions found
noBuckets: No buckets found with given region
noBucketsFound: No buckets found
noFilePathsFound: No file paths found
noClustersFound: No clusters found
noImagesFound: No images found
noImages: 'No Images'
noCloudSourceRepositoriesFound: No cloud source repositories found
gitRepo: Git Repo
buildRepo: Build Repo
failureTypetext: Select Failure Type
stepDescription:
  HTTP: Run HTTP requests containing URLs, methods, headers, assertions, and variables.
  ShellScriptProvision: The Shell Script Provisioner supports custom provisioners or your existing shell script implementations.
  SHELLSCRIPT: Execute scripts in the shell session. The scripts can be executed on the pod/instance running a Harness Delegate or on a remote host in the infrastructure.
  Email: Send email messages to Harness users as part of the pipeline execution.
  Wait: Suspend/Wait the execution for the given amount of time.
  Barrier: Synchronize multiple Pipelines to coordinate deployments systematically.
  Queue: Queue pipeline executions to prevent multiple stages or pipelines from requesting the same deployment resources simultaneously.
  K8sRollingRollback: Roll back the workloads deployed by the stage.
  K8sBlueGreenDeploy: Deploy your new app version to the stage environment.
  K8sCanaryDeploy: Define how many pods are deployed for a Canary test of your new service version.
  K8sBGSwapServices: Swap services to route production traffic to the new version of the application and stage traffic to the old version.
  K8sScale: Update the number of pods running for a workload by count or percentage.
  K8sApply: Deploy individual Kubernetes workloads from your stage's Service.
  K8sCanaryDelete: Clean up the workload deployed by the Canary Deployment step.
  K8sDelete: Delete Kubernetes resources by name, manifest path, and release name.
  AdvancedCommandFlags: Command Flags
  K8sRollingDeploy: Use a rolling update to schedule new pods on nodes with available resources. This step uses the number of replicas you specified in the Deployment manifest.
  Plugin: Use Docker containers to perform predefined tasks like deploy code, publish artifacts, send notifications, and more.
  Run: Execute one or more commands on a container image in a CI stage.
  ACR: Build a Docker image and push it to Azure Container Registry (ACR).
  GCR: Build a Docker image and push it to Google Container Registry (GCR).
  ECR: Build a Docker image and push it to AWS Elastic Container Registry (ECR).
  SaveCacheGCS: Preserve files and directories between builds using Google Cloud Storage (GCS).
  RestoreCacheGCS: Restore saved files and directories between builds using Google Cloud Storage (GCS).
  SaveCacheS3: Preserve files and directories between builds using AWS S3.
  RestoreCacheS3: Restore saved files and directories between builds using AWS S3.
  DockerHub: Build a Docker image from a Dockerfile and push it to a Docker registry.
  Jenkins: Jenkins Description.
  Bamboo: Bamboo Description.
  GitOpsSync: Gitops Sync
  GCS: Upload artifacts to Google Cloud Storage (GCS).
  S3: Upload artifacts to AWS S3.
  JFrogArtifactory: Upload artifacts to JFrog Artifactory.
  RunTests: Execute unit tests for Java and .NET with Harness Test Intelligence. For all other tests, use the "Run" step
  HarnessApproval: Add manual approvals as steps and stages.
  JiraApproval: Use Jira issues to approve steps and stages.
  Verify: Verify a deployment using your monitoring tools.
  JiraCreate: Create a Jira issue as a step in the execution of a Pipeline.
  JiraUpdate: Update a Jira issue as a step in the execution of a Pipeline.
  TerraformRollback: Roll back your provisioned infrastructure and resources and return your environment to its pre-deployment state.
  TerraformDestroy: Remove any infrastructure you've provisioned using Harness.
  TerraformPlan: Run a Terraform script as a Terraform plan.
  TerraformApply: Apply a Terraform plan or script.
  TerragruntPlan: Run a Terraform script as a Terragrunt plan.
  TerragruntApply: Apply a Terragrunt plan or script.
  ResourceConstraint: Queue the number of resources Harness requests during a deployment by placing capacity limits on the requests.
  FlagConfiguration: Add or update Feature Flag configuration.
  HelmDeploy: Performs native Helm deployments. Requires Helm and Tiller and supports basic deployments. Helm charts are also supported in Harness Kubernetes deployments without requiring Helm or Tiller and using all deployment strategies.
  HelmRollback: Rolls back all the deployed objects to the previous version.
  ServiceNowApproval: Use ServiceNow issues to approve steps and stages.
  ServiceNowCreate: Create a Service Now ticket as part of the pipeline execution
  ServiceNowUpdate: Update a Service Now ticket as part of the pipeline execution
  ServiceNowImportSet: Create or Update Service Now issues using Service Now Import Set APIs
  Policy: Evaluate policy during pipeline execution
  ServerlessLambdaDeploy: Create the Lambda functions defined in this Stage.
  ServerlessLambdaRollback: Deploy the previous successful version as a new version.
  DeployCloudFunction: Deploy a Google function.
  DeployCloudFunctionRollback: Roll back the Google function.
  DeployCloudFunctionGenOne: Deploy a Google function (Gen One).
  DeployCloudFunctionRollbackGenOne: Roll back the Google function (Gen One).
  DeployCloudFunctionNoTrafficShift: Deploy a Google function and route traffic to it.
  DeployCloudFunctionTrafficShift: Shift traffic between the existing revision and the new revision of a Google function.
  createPR: Create PR
  mergePR: Merge the PR created by the GitOps Update Release Repo step
  updateReleaseRepo: Create the PR with your updated JSON files
  fetchLinkedApps: Fetch Linked Apps
  fetchInstanceScript: Fetch Instances
  AzureSlotDeployment: Select the Web App and source and target deployment slots for the deployment.
  CustomApproval: Custom Approval
  AzureTrafficShift: Shift network traffic to the new Web App version in the deployment slot.
  ECSRollingDeploy: Roll out a new ECS service version.
  ECSRollingRollback: Roll back the ECS service version deployed using the ECS Rolling Deploy step.
  ECSCanaryDeploy: Deploy a new ECS service version to one instance for validation.
  ECSCanaryDelete: Delete the ECS service version deployed by the ECS Canary Deploy step.
  ECSBlueGreenCreateService: Stage a new service version to a target group.
  ECSBlueGreenSwapTargetGroups: Swap stage and prod routes for a Blue/Green deployment.
  ECSBlueGreenRollback: Roll back the new ECS service version and upscale the old version to its previous task number.
  ECSRunTask: Run one-time or periodic batch job tasks using placement constraints and strategies.
  GitClone: Clone a Git repository to a directory in addition to the codebase Git clone
  Background: Set commands to run in the background. The execution will immediately proceed to the subsequent step rather than waiting for the background commands to finish.
  ElastigroupRollback: Rollback for the Elastigroup steps
  ElastigroupSetup: Elastigroup setup step
  SwapRoute: Swap between Active and InActive TAS Applications
  SwapRollback: Rollback the Swap to Active in Blue Green Deployments
  TasRollback: Rollback to previous deployment during failure
  AppResize: Scale the TAS Application as per the scaling requirements
  TanzuCommandScript: Execute custom Tanzu Commands in this Step
  GHAPlugin: Run GitHub Actions as a step in the pipeline
  BitrisePlugin: Run Bitrise plugin as a step in the pipeline
  TASBasicAppSetup: Initialize the TAS Application for Basic Deployment
  TASBGAppSetup: Initialize the TAS Application for BlueGreen Deployment
  TASCanaryAppSetup: Initialize the TAS Application for Canary Deployment
  RollingRollback: Rollback to previous deployment during failure of Rolling Deployment
  RollingDeployment: Performs Rolling Deployment of TAS
  RouteMapping: Enhance routes available in Service Manifest
  ElastigroupDeploy: Elastigroup Deploy step
  ElastigroupSwapRoute: Elastigroup Swap Route
  ElastigroupBGStageSetup: Elastigroup Blue/Green Step
  Container: Execute one or more commands on a container image in a CD stage.
  AwsLambdaDeploy: Deploy an AWS Lambda function.
  AwsLambdaDeployRollback: Roll back the AWS Lambda function.
  TerraformCloudRun: Trigger a run in a Terraform Cloud Workspace.
  TerraformCloudRollback: Trigger a rollback of the latest run on your Terraform Cloud Workspace.
  SscaOrchestration: Orchestrate SBOM generation for your artifacts and repository

executionStrategy:
  executionStrategies: Execution Strategies
  useStrategy: Use Strategy
  strategies:
    rolling:
      description: All pods/instances in a single environment are incrementally replaced with a new service version without downtime.
      learnMoreLink: https://docs.harness.io/article/0zsf97lo3c-deployment-concepts#rolling_deployment
      steps:
        step1:
          description: Test the new version.
        step2:
          description: Approve the new version.
        step3:
          description: Replace new version.
    blueGreen:
      description: 'Two identical environments for staging and production traffic run simultaneously with different versions of the service. Deployment of a new service version is first done to the staging environment. Once the new version is verified, network traffic is switched between the two environments. The staging environment is now the production environment.'
      learnMoreLink: https://docs.harness.io/article/0zsf97lo3c-deployment-concepts#blue_green_deployment
      steps:
        step1:
          description: Maintain two identical fleets of servers.
        step2:
          description: Verify the services in the blue environment.
        step3:
          description: After verification, switch the load balancer to point to the newly-deployed fleet.
    canary:
      description: 'Harness performs a two phase deployment: Phase 1 adds new pods/instances with the new service version to a single environment. Phase 2 performs a Rolling Update in the same environment.'
      learnMoreLink: https://docs.harness.io/article/0zsf97lo3c-deployment-concepts#canary_deployment
      steps:
        step1:
          title: 'Canary deployment:'
          description: 'Add canary pods until they guarantee you their safety'
        step2:
          title: 'Canary delete:'
          description: 'Update 50% new instances in phase 2 and verify it.'
        step3:
          title: 'Rolling Update:'
          description: 'Update all new instances in phase 3 and verify it.'
    default:
      actualName: '{{$.common.default}}'
      displayName: Blank Canvas
      description: A blank slate for custom processes. You can use any combination of steps. Only recommended for advanced users.
      learnMoreLink: https://docs.harness.io/article/0zsf97lo3c-deployment-concepts#basic_deployment
    basic:
      description: In a Basic deployment, all nodes within a single environment are replaced at the same time with new nodes containing the new service/artifact version.Basic deployments are useful for development, learning Harness, and any non-mission critical workflows.
    common:
      steps:
        step1:
          title: 'Step 1:'
        step2:
          title: 'Step 2:'
        step3:
          title: 'Step 3:'
newPipelineText: New Pipeline
gitPullRequest: Git Pull Request
gitPullRequestNumber: Git Pull Request Number
expressionsEvaluation: Expressions Evaluation
deploymentFrequency: 'Deployment Frequency'
executionFrequency: 'Execution Frequency'
retryPipeline: Retry Failed Pipeline
openPipelineInNewTab: Open Pipeline in new tab
stagetoRetryFrom: Select the stage that you would like to resume from
runAllParallelstages: Run all parallel stages
runFailedStages: Run only failed stages
runPipelineForm:
  notifyOnlyMe: Notify only me about execution status
  disallowStageExecution: Not allowed for Individual Stage executions
singleStageExecution: 'SELECTIVE STAGE EXECUTION:'
multiStageExecution: 'MULTIPLE STAGES EXECUTION'
allStages: All Stages
retryHistory: Retry History
retryHistoryDescription: List of retries for my Pipeline
recentExecutionText: Most Recent Execution
viewLatestExecution: You are viewing an older execution of this pipeline.
featureRestriction:
  integratedApprovalsJira: Integrated Approvals with Jira
  serviceLimitExceeded: You have reached the Service License limit.
  serviceUsageWarning: You have reached {{ warningLimit }}% of service licence limit.
  monthlyDeploymentLimitExceeded: You have reached the monthly deployments limit.
  monthlyDeploymentWarning: You have reached {{ warningLimit }}% of the monthly deployments limit.
  initialDeploymentLimitExceeded: You have reached the free deployments limit.
  initialDeploymentWarning: You have reached {{ warningLimit }}% of the free deployments limit.
  maxTotalBuilds90PercentLimit: You have used {{usagePercent}}% of builds included in the free plan. After 2,500 builds, the free plan will be restricted to 100 builds per month.
  maxBuildsPerMonth100PercentLimit: You have used 100 / 100 free builds this month. Consider upgrading for unlimited builds.
  numMonthlyBuilds: You have used {{count}} / {{limit}} free builds this month.
  maxTotalScans90PercentLimit: You have used {{usagePercent}}% of scans included in the free plan. After 2,500 scans, the free plan will be restricted to 100 scans per month.
  maxScansPerMonth100PercentLimit: You have used 100 / 100 free scans this month. Consider upgrading for unlimited builds.
  numMonthlyScans: You have used {{count}} / {{limit}} free scans this month.
  subscription90PercentLimit: You have used {{usagePercent}}% of your developer subscription limit.
  subscriptionExceededLimit: You have exceeded your developer subscription limit.
  unlimitedBuildsRequiredPlan: Monthly builds limit met. For Unlimited builds, consider upgrading to Team or Enterprise plan.
policyEvaluations:
  title: Policy Evaluations
  failedToSavePipeline: Pipeline can not be saved due to the policy evaluation failures.
  evaluatedTime: 'Evaluated '
  policySets: 'Policy Sets ({{count}})'
  evaluations: Evaluations {{count}}
  policySetName: 'Policy Set: {{name}}'
  emptyPolicySet: This policy set does not have any policies attached to it.
  policySetsApplied: '{{pipelineName}}: Policy Sets applied'
  failureHeadingEvaluationDetail: Policy Evaluation failed.
  warningHeadingEvaluationDetail: Policy Evaluation contains warnings.
expressionsReplaced: 'Pipeline updated with {{count}} expression(s) replaced. Please provide the value(s) for new expression(s).'
runstageError: '{{count}} Error(s): Unable to run stages.'
stageDependencyError: 'Stage {{stageId}} has a ‘useFromStage’ dependency on Stage {{dependentStage}}. Please select Stage {{dependentStage}} to run Stage {{stageId}}.'
noApprovalInstanceCreated: Approval instance not created, no details to display
approvalTypeRequired: Approval type is required
numOfServices: '{{numOfServices}} Services'
numOfEnvs: '{{numOfEnvironments}} Environments'
numOfApps: '{{numOfApps}} Applications'
numOfServicesAndEnv: '{{numOfServices}} Service(s), {{numOfEnvironments}} Environment(s)'
requiredToFetch: '{{requiredField}} is required to fetch {{dependentField}}'
multiRequiredToFetch: '{{requiredField}} are required to fetch {{dependentField}}'
executionList:
  servicesDeployedText: 'Services deployed ({{size}})'
  servicesDeployed: 'Services deployed'
  artifactDeployedText: 'Artifacts deployed ({{size}})'
  EnvironmentsText: 'Environments ({{size}})'
artifactImageTag: 'Artifact (Image: Tag)'
replacedExpressions: Replaced Expressions
expressionRequired: Expression value is required.
nativeHelm: Native Helm
dashboardDeploymentsWidget:
  pendingManualIntervention:
    singular: Pending Manual Intervention
    plural: Pending Manual Interventions
  pendingApproval:
    singular: Pending Approval
    plural: Pending Approvals
  failed24Hrs:
    singular: Pipeline failed in past 24 hours
    plural: Pipelines failed in past 24 hours
  runningPipeline:
    singular: Currently running pipeline
    plural: Currently running pipelines
  activePipeline:
    singular: Currently active pipeline
    plural: Currently active pipelines
runtimeInputNotSupported: '{{field}} cannot be runtime inputs'
runPipeline:
  ciCodebaseConfig: CI Codebase Configuration is missing. Codebase is required when the pipeline contains a CI stage that is set to clone codebase.
buildInfra:
  poolName: Pool Name
  nodeSelector: Node Selector
  tolerations: Tolerations
  volumes: Volumes
  automountServiceAccountToken: Automount Service Account Token
  priorityClassName: Priority Class
  containerSecurityContext: Container Security Context
  allowPrivilegeEscalation: Allow Privilege Escalation
  addCapabilities: Add Capabilities
  dropCapabilities: Drop Capabilities
  runAsNonRoot: Run as Non Root
  readOnlyRootFilesystem: Read-only Root Filesystem
  privileged: Privileged
  effect: Effect
  mountPath: Mount Path
  size: Size
  pathType: Path Type
  emptyDirectory: Empty Directory
  hostPath: Host Path
  persistentVolumeClaim: Persistent Volume Claim
  claimName: Claim Name
ci:
  validations:
    port: Port can only contain digits
    serviceDependencyIdentifier: 'Identifier should match regex {{regex}}'
    mountPathUnique: Mount Path should be unique
    keyUnique: Key should be unique
    invalidSize: Invalid Size. To learn more, hover over the Size tooltip.
    pathRequiredForHostPath: 'Path is required for Type Host Path'
imageVersionDeprecated: Image version outdated
unsupportedImagesWarning: 'You are using unsupported Harness CI images. Harness allows builds to use these images, but we cannot ensure that builds will not fail. Please update the versions of the following image(s):'
invalidRequest: Invalid Request
serviceDeploymentTypes:
  elastigroup: Elastigroup
  kubernetes: '{{$.kubernetesText}}'
  kubernetesWithGitops: Kubernetes with GitOps
  amazonEcs: '{{$.delegate.cardData.amazonECS.name}}'
  amazonAmi: AWS AMI
  awsCodeDeploy: CodeDeploy
  winrm: WinRM
  awsLambda: AWS Lambda
  tas: Tanzu Application Services
  ssh: Secure Shell
  deployDifferentLabel: Deploy different service
  serverlessAwsLambda: Serverless Lambda
  serverlessAzureFunctions: Serverless Azure Functions
  serverlessGoogleFunctions: Serverless Google Functions
  awsSAM: AWS SAM
  azureFunctions: Azure Functions
  azureWebApp: Azure Web Apps
  customDeployment: Deployment Template
  serverlessAwsType: Serverless Aws Lambda
  customDeploy: Custom Deployment
  spotElastigroup: Spot Elastigroup
  asg: AWS Auto Scaling Group
  googleCloudFunctions: Google Cloud Functions
noArtifactPaths: No artifact paths found with given Artifact Directory
stageDataDeleteWarningTitle: Discard Stage Data
serviceDataDeleteWarningTitle: Discard Service Data
stageDataDeleteWarningText: Changing deployment type will delete existing stage data like artifacts, manifests, infrastructure details, steps etc. Do you still want to proceed?
serviceDataDeleteWarningText: Changing deployment type will delete existing service data like artifacts, manifests etc. Do you still want to proceed?
envTypeChangeServiceDataDeleteWarningText: Changing environment type will delete existing service data like artifacts, manifests etc. Do you still want to proceed?
errorFramework:
  pipelineErrorsTitle: 'Pipeline cannot be saved because {{fields}} further configuration.'
  fixErrors: Fix Errors
  fixStep: Fix Step
  fixStage: Fix Stage
  header1: ', stage and steps'
  header2: ', some stages and steps'
  header3: ' and stage'
  header4: ' and some stages'
  header5: ' and steps'
  header6: 'pipeline{{stringToAppend}} need'
  header7: 'stage and steps need'
  header8: 'some stages and steps need'
  header9: 'stage needs'
  header10: 'some stages need'
  header11: 'some steps need'
  header12: 'it needs'
delegate:
  DelegateSelectorOptional: 'Delegate Selector (optional)'
cannotRunInvalidPipeline: Cannot run the pipeline because it's invalid, please review the configuration.
inputSetWithInvalidStoreType: Cannot use this input set to run the pipeline as pipeline is “Remote” (stored in git) and Input Set is “Inline” (stored in Harness DB). Please make sure that both entities are either Remote or Inline.
inputSetInvalidStoreTypeCallout: Pipeline is Remote (stored in git) and Input Set is Inline (stored in Harness DB). Please make sure that both entities are either Remote or Inline to edit the Input Set.
cannotRunUnsavedPipeline: Please click Save and then run the pipeline.
cannotAddTriggerInvalidPipeline: Cannot add a trigger because pipeline is invalid, please review the configuration.
cannotAddInputSetInvalidPipeline: Cannot add an input set because pipeline is invalid, please review the configuration.
cannotEditTriggerInvalidPipeline: Cannot edit the trigger because pipeline is invalid, please review the configuration.
parentStageDeleteWarning: "Warning: this Stage's settings are propagated to another Stage(s) in this Pipeline ({{propagatingStages}}). If you delete this Stage, you must update the other Stages' settings or the Pipeline will fail."
outOfSyncErrorStrip:
  reconcile: Reconcile
  reconcileStarted: Reconciliation has started.
  noErrorText: All of the entities referenced in this {{entity}} are in sync.
  unsyncedTemplateInfo: Some of the entities referenced in this {{entity}} have gone out of sync.
  updatedTemplateInfo: Some of the entities referenced in this {{entity}} have been updated.
reconcileDialog:
  title: Template Error Inspection
  subtitle: Error Trace
  unsyncedTemplateInfo: The error detected in <b>{{name}}</b> is parsed from unsynced entities.
  updatedTemplateInfo: The error detected in <b>{{name}}</b> is parsed from updated entities.
  updateAllLabel: Update all unsynced entities
  updateEntityLabel: 'Update {{entity}}'
inputSetErrorStrip:
  errorInfo: Your {{type}} form contains invalid fields!
  goToInpSetBtn: Go to Input Set list
  updateRuntimeFields: Update Runtime Field(s)
  reconcileDialogTitle: '{{type}} ERROR INSPECTION'
  existingYaml: Existing YAML (Invalid)
  validYaml: Valid YAML
  reconcileErrorInfo: Please reconcile the invalid input set present in selected input set(s)
ACR:
  name: ACR
  subscription: '{{ $.common.subscriptionId }}'
  subscriptionPlaceholder: '{{ $.common.subscriptionPlaceholder }}'
  subscriptionError: 'No subscription found with given Connector'
  registry: 'Registry'
  registryPlaceholder: 'Select or add Registry'
  registryError: 'No registry found with given Subscription'
  repositoryPlaceholder: 'Select or add Repository'
  repositoryError: 'No repository found with given Registry'
  tagError: 'No tags found with given Connector, Subscription Id, Registry and Repository'
configFiles:
  title: 'Config File {{type}}'
  source: 'Config File Source'
  selectFileType: 'Select file type'
  plainText: 'Plain text'
  identifierLabel: 'Config File Identifier'
  encryptedFiles: 'Encrypted file(s)'
  fileType: 'File Type'
  encryptedLocation: 'Secrets Manager Name'
  addConfigFile: Add Config File
  name: Config File Name,
  placeholder: Enter Config File Name
  paths: File Path for config files from Git
  error:
    fileType: 'File type is required'
    identifier: 'Config file identifier is required'
    files: 'File(s) is required'
    file: 'This field is required'
    fileSelection: 'Select atleast one config file'
    duplicateIdError: 'Failed to create Config File: There is already a Config File with identifier {{ configFileIdentifier }} present or soft deleted. Please provide a new unique identifier and save again.'
OverviewEmptyStates:
  createPipelineHeaderMsg: Set up a Pipeline and run your first {{executionLabel}}!
  createPipelineInfo: A Harness Pipeline is a series of stages that performs operations like {{pipelineOperation1}} and {{pipelineOperation2}} software.
  runPipelineHeaderMsg: You haven’t tried running your pipelines yet.
  runPipelineInfo: Click the button below to select a pipeline and get your {{executionsLabel}} started.
importSuccessMessage: '{{resourceType}} has been imported successfully'
defaultMoveCommitMsg: Moving {{resourceType}} [{{name}}] to Git
moveSuccessMessage: '{{resourceType}} has been moved successfully'
duplicateImport: This file is already in use. Do you still want to proceed?
duplicateImportPipeline: This file is already in use by another pipeline. Do you still want to proceed?
duplicateImportInputset: This file is already in use by another pipeline or input set. Do you still want to proceed?
duplicateImportTemplate: This file is already in use by another Template. Do you still want to proceed?
MatrixNode:
  maxConcurrency: 'Max Concurrency:'
fieldLabels:
  commandType: Command Type
fieldPlaceholders:
  commandType: Enter Command Type
traffic: Traffic
trafficPercentage: '{{$.pipeline.traffic}} %'
viewPipeline: View Pipeline
viewExecution: View Execution
codeSource: 'Code Source'
recentExecutions: 'Recent Executions'
mostRecentDirection: 'Latest one on right side'
lastExecution: 'Last Execution'
executionId: Execution Id
imageTag: 'image: {{image}}'
fileSource: 'File Source'
configSource: Configuration Source
fileDetails: 'File Details'
appServiceConfig:
  title: App Services Configuration
  applicationSettings:
    name: Application Settings
    file: '{{$.pipeline.appServiceConfig.applicationSettings.name}} File'
    fileDetails: '{{$.pipeline.appServiceConfig.applicationSettings.name}} File Details'
    fileSource: '{{$.pipeline.appServiceConfig.applicationSettings.name}} File Source'
    filePath: '{{$.pipeline.appServiceConfig.applicationSettings.name}} File Path'
    subtitle: 'Specify {{$.pipeline.appServiceConfig.applicationSettings.name}} Script File Type'
    overrides: '{{$.pipeline.appServiceConfig.applicationSettings.name}} Overrides'
  connectionStrings:
    name: Connection Strings
    file: '{{$.pipeline.appServiceConfig.connectionStrings.name}} File'
    fileDetails: '{{$.pipeline.appServiceConfig.connectionStrings.name}} File Details'
    fileSource: '{{$.pipeline.appServiceConfig.connectionStrings.name}} File Source'
    filePath: '{{$.pipeline.appServiceConfig.connectionStrings.name}} File Path'
    subtitle: 'Specify {{$.pipeline.appServiceConfig.connectionStrings.name}} Script File Type'
    overrides: '{{$.pipeline.appServiceConfig.connectionStrings.name}} Overrides'
startup:
  script:
    name: Startup Script
    subtitle: 'Specify {{deploymentType}} {{$.pipeline.startup.script.name}} Store Type'
    fileDetails: '{{$.pipeline.startup.script.name}} File Details'
    fileSource: '{{$.pipeline.startup.script.name}} File Source'
  command:
    name: Startup Command
    subtitle: 'Specify {{deploymentType}} {{$.pipeline.startup.command.name}} Store Type'
    fileDetails: '{{$.pipeline.startup.command.name}} File Details'
    fileSource: '{{$.pipeline.startup.command.name}} File Source'
  scriptFilePath: 'Script File Path'
  fileValidation: 'file is required'
  plainText: 'Plain Text'
triggerInfo: 'Trigger Info'
phasesForm:
  phases: 'Phases'
  phase: 'Phase'
  addPhase: '+ Add Phase'
  useVerification: 'Use Verification'
  errors:
    limitError: 'This field can not be more than'
    prevLimitError: 'This field should be more than'
    wrongPercentageFormat: 'Wrong percentage format'
    duplicationValue: 'Duplication of previous value'
  packageTypes:
    jar: 'Jar'
    tar: 'Tar'
    war: 'War'
    rpm: 'Rpm'
    zip: 'Zip'
  packageTypesWinrm:
    application: 'IIS Application'
    website: 'IIS Website'
    virtualDir: 'IIS Virtual directory'
draft: 'Draft'
logLevelSettings: 'Show Log Level'
logDateTimeSettings: 'Show Date and Time Information'
configureLogSettings: 'Configure Logs Settings'
logSettingsHeader: 'Configure the following Logs Settings at the User Scope'
duplicateStepIdentifiers: 'Duplicate identifiers found: {{duplicateIdString}}'
alwaysEditModeYAML: Enable read/write mode always
warningForInvalidYAMLDiscard: Enabling this option lets you edit and save changes to the YAML code of the pipelines you are viewing. You can toggle this setting on or off in any pipeline.
azureWebApp:
  name: Azure Web App
  strategy:
    basic: In a Basic deployment, a new Service/Artifact version is deployed to the deployment slot. Basic deployments are useful for development, learning Harness, and any non-mission critical workflows.
    canary: 'Harness performs a three phase deployment: Phase 1 deploys a new service version to the deployment slot. Phase 2 performs a Traffic Shift to that deployment slot. Phase 3 swaps the deployment slot with target slot.'
    blueGreen: 'Harness performs a two phase deployment: Phase 1 deploys a new service version to deployment slot. Phase 2 swaps the deployment slot with target slot.'
skipInstances:
  title: 'Skip instances with the same artifact version already deployed'
selectiveStageExecution: 'Selective stage execution'
customDeployment:
  infraDefinitionVariablesTitle: 'Infrastructure Properties'
  infraVariablesTitle: 'Define the variables to be used in your infrastructure'
  updateInfraVariablesTitle: 'Update values for variables defined as part of used template'
  emptyInfraVariablesTitle: 'No variables are defined as part of used template'
  seeOnlyTemplatesFor: See only templates for {{name}}
  instanceObjectArrayPath: 'Instance Object Array Path'
  instanceAttributes: 'Instance Attributes'
  newAttribute: 'New Attribute'
  fetchInstancesScript: 'Fetch Instance Script'
  fetchInstanceScriptHeader: 'Define your script inline or from File Store.'
  fieldNameLabel: 'Field Name'
  jsonPathRelativeLabel: 'JSON Path (relative)'
  fieldNamePlaceholder: 'Enter Field Name'
  errors:
    fetchScriptRequired: 'Fetch Instances Script is required'
    fetchScriptBodyRequired: 'Fetch Instances Script body is required'
  validations:
    nameUnique: Field Name should be unique
step:
  validation:
    namePatternIsNotValid: 'Name can only contain alphanumerics, _ and -'
runDisabledOnFreeze: An active freeze is applicable on this pipeline. Any deployment stage on this pipeline will be aborted.
viewFreeze: View freeze details
executionTriggeredBy: This execution was triggered by
triggeredBy: Triggered by {{triggerType}}
manuallyTriggered: This execution was triggered manually
triggeredByThirdParty: Triggered by a third party system
triggeredByCron: Triggered on {{start}} by cron {{triggeredBy}}
configureArtifactSource: Configure Artifact Source
pipelineCachedCopy:
  cachedCopyText: Last cached at
  reloadPipeline: Reload {{pageType}}?
  reloadPipelineContent: Are you sure you want to load the {{pageType}} from Git? You will lose all your unsaved changes.
  cacheInProgress: Cache update in progress
  cacheUpdateFailed: Cache Update Failed
  updateAvailable: Update Available
  cacheUpdateAvailable: Cache {{$.pipeline.pipelineCachedCopy.updateAvailable}}
  newCacheVersion: New Cache version is available, click reload to view details.
resilienceTab:
  title: Resilience
noServicesFound: No Services Available
noEnvironmentGroupsFound: No Environment Groups Available
envGroupLabel: Select an existing Environment Group
envLabel: Select an existing Environment
serviceLabel: Select an existing service
moreCommitsLabel: 'More commits'
commitsTab:
  youHaveNoCommits: You have no commits
  youWillSeeYourCommitsHere: You will see your commits here
commitsOn: 'Commits on'
vmLabel: VM
emptyExecutionListMsg: 'There are no executions for this given criteria.'
lastDeployed: 'Last deployed'
prTitle: PR Title
ServiceDetail:
  envCardEmptyStateMsg: 'There are no environments with instances in this service.'
iacm:
  workflow: Workflow
  resourceStack: Resource Stack
banner:
  bannerText: Harness has significantly updated services and environments in CD. Please review our
  bannerDescription: on upgrading to the newer v2 versions of these entities. Support for v1 was reduced and the entities were deprecated at the end of January 2023. Please reach out to
  bannerDescriptionSecond: for any questions.
  docs: docs
validation:
  validated: Validated
  validating: Validating
  validationSuccessful: Validation successful
  validationSuccessfulText: No errors were found with your pipeline configurations. You can start running your pipeline! Click to view more.
  validationInProgressText: Click to view details of the pipeline configuration validation progress.
  nIssuesFound: '{{n}} issue(s) found'
  nIssues: '{{n}} issue(s)'
  errorText: Click to view list of issues.
  pipelineValidated: Pipeline validated
  pipelineValidationFailed: Pipeline validation failed
  revalidate: Revalidate
  validationResultApiError: Unable to complete validation due to an error.
  validationAreasTitle: 'Validation was conducted in the following areas:'
  templateUsage: Template usage
  policySetEvaluation: Policy set evaluation
  pending: pending
  templateIssuesN: Template issues ({{n}})
  policySetIssuesN: Policy set issues ({{n}})
bamboo:
  planName: Plan Name
planNamePlaceholder: Enter or Select Plan
bambooBuilds: Bamboo Builds
selectBambooBuildsPlaceholder: Select Bamboo Build
Bamboo: Bamboo Description
bambooStep:
  validations:
    planName: Planname is a required field
  planParameter: Plan Parameters
  addPlanParameters: Add Plan Parameter
  noPlans: No Plans Defined
namespaceValidation: Namespace must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc')
cannotFetchOptions: Cannot Fetch {{fieldName}}...
noNotifications:
  title: No notifications configured for this {{entity}}
  subtitle: Configure settings to notify your team of specific events in your {{entity}}.
guidedCDK8sGetStarted: Get started with guided K8s Deployment
provisionerField:
  description: Is dynamic provisioner
frozenExecList:
  freezeTime: Freeze Time
  freezeConfig: Freeze Configuration
  emptyStateMsg: No Freeze Window details present for this execution.
frozenExecPopover:
  abortedMsg: Pipeline was aborted due to freeze windows.
  viewFreezeWindows: View associated freeze windows
notGenerated: Not Generated
notAvailable: Not Available
artifacts:
  googleCloudStorage:
    title: Google Cloud Storage
    bucketPlaceholder: Enter Bucket
  googleCloudSourceRepositories:
    title: Google Cloud Source
    cloudSourceRepository: Cloud Source Repository
    cloudSourceRepositoryPlaceholder: Select Cloud Source Repository
    sourceDirectory: Source Directory
    sourceDirectoryPlaceholder: Enter Source Directory
    commitId: Commit Id
    commitIdPlaceholder: Enter Commit Id
    tagPlaceholder: Enter Tag
    fetchType: Fetch Type
templateAlreadyExists:
  title: Template Already Exists
  content: The template with given identifier already exists, if you want to create a new version of this template then use save as new version option from the given template or if you want to create a new Template then use a different identifier.
  confirmation: Save as new version of existing template
